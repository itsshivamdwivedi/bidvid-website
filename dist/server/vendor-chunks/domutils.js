"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/domutils";
exports.ids = ["vendor-chunks/domutils"];
exports.modules = {

/***/ "(rsc)/./node_modules/domutils/lib/feeds.js":
/*!********************************************!*\
  !*** ./node_modules/domutils/lib/feeds.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getFeed = void 0;\nvar stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/domutils/lib/stringify.js\");\nvar legacy_js_1 = __webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/domutils/lib/legacy.js\");\n/**\n * Get the feed object from the root of a DOM tree.\n *\n * @category Feeds\n * @param doc - The DOM to to extract the feed from.\n * @returns The feed.\n */\nfunction getFeed(doc) {\n  var feedRoot = getOneElement(isValidFeed, doc);\n  return !feedRoot ? null : feedRoot.name === \"feed\" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);\n}\nexports.getFeed = getFeed;\n/**\n * Parse an Atom feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\nfunction getAtomFeed(feedRoot) {\n  var _a;\n  var childs = feedRoot.children;\n  var feed = {\n    type: \"atom\",\n    items: (0, legacy_js_1.getElementsByTagName)(\"entry\", childs).map(function (item) {\n      var _a;\n      var children = item.children;\n      var entry = {\n        media: getMediaElements(children)\n      };\n      addConditionally(entry, \"id\", \"id\", children);\n      addConditionally(entry, \"title\", \"title\", children);\n      var href = (_a = getOneElement(\"link\", children)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n      if (href) {\n        entry.link = href;\n      }\n      var description = fetch(\"summary\", children) || fetch(\"content\", children);\n      if (description) {\n        entry.description = description;\n      }\n      var pubDate = fetch(\"updated\", children);\n      if (pubDate) {\n        entry.pubDate = new Date(pubDate);\n      }\n      return entry;\n    })\n  };\n  addConditionally(feed, \"id\", \"id\", childs);\n  addConditionally(feed, \"title\", \"title\", childs);\n  var href = (_a = getOneElement(\"link\", childs)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n  if (href) {\n    feed.link = href;\n  }\n  addConditionally(feed, \"description\", \"subtitle\", childs);\n  var updated = fetch(\"updated\", childs);\n  if (updated) {\n    feed.updated = new Date(updated);\n  }\n  addConditionally(feed, \"author\", \"email\", childs, true);\n  return feed;\n}\n/**\n * Parse a RSS feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\nfunction getRssFeed(feedRoot) {\n  var _a, _b;\n  var childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n  var feed = {\n    type: feedRoot.name.substr(0, 3),\n    id: \"\",\n    items: (0, legacy_js_1.getElementsByTagName)(\"item\", feedRoot.children).map(function (item) {\n      var children = item.children;\n      var entry = {\n        media: getMediaElements(children)\n      };\n      addConditionally(entry, \"id\", \"guid\", children);\n      addConditionally(entry, \"title\", \"title\", children);\n      addConditionally(entry, \"link\", \"link\", children);\n      addConditionally(entry, \"description\", \"description\", children);\n      var pubDate = fetch(\"pubDate\", children) || fetch(\"dc:date\", children);\n      if (pubDate) entry.pubDate = new Date(pubDate);\n      return entry;\n    })\n  };\n  addConditionally(feed, \"title\", \"title\", childs);\n  addConditionally(feed, \"link\", \"link\", childs);\n  addConditionally(feed, \"description\", \"description\", childs);\n  var updated = fetch(\"lastBuildDate\", childs);\n  if (updated) {\n    feed.updated = new Date(updated);\n  }\n  addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n  return feed;\n}\nvar MEDIA_KEYS_STRING = [\"url\", \"type\", \"lang\"];\nvar MEDIA_KEYS_INT = [\"fileSize\", \"bitrate\", \"framerate\", \"samplingrate\", \"channels\", \"duration\", \"height\", \"width\"];\n/**\n * Get all media elements of a feed item.\n *\n * @param where Nodes to search in.\n * @returns Media elements.\n */\nfunction getMediaElements(where) {\n  return (0, legacy_js_1.getElementsByTagName)(\"media:content\", where).map(function (elem) {\n    var attribs = elem.attribs;\n    var media = {\n      medium: attribs[\"medium\"],\n      isDefault: !!attribs[\"isDefault\"]\n    };\n    for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {\n      var attrib = MEDIA_KEYS_STRING_1[_i];\n      if (attribs[attrib]) {\n        media[attrib] = attribs[attrib];\n      }\n    }\n    for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {\n      var attrib = MEDIA_KEYS_INT_1[_a];\n      if (attribs[attrib]) {\n        media[attrib] = parseInt(attribs[attrib], 10);\n      }\n    }\n    if (attribs[\"expression\"]) {\n      media.expression = attribs[\"expression\"];\n    }\n    return media;\n  });\n}\n/**\n * Get one element by tag name.\n *\n * @param tagName Tag name to look for\n * @param node Node to search in\n * @returns The element or null\n */\nfunction getOneElement(tagName, node) {\n  return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];\n}\n/**\n * Get the text content of an element with a certain tag name.\n *\n * @param tagName Tag name to look for.\n * @param where Node to search in.\n * @param recurse Whether to recurse into child nodes.\n * @returns The text content of the element.\n */\nfunction fetch(tagName, where, recurse) {\n  if (recurse === void 0) {\n    recurse = false;\n  }\n  return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();\n}\n/**\n * Adds a property to an object if it has a value.\n *\n * @param obj Object to be extended\n * @param prop Property name\n * @param tagName Tag name that contains the conditionally added property\n * @param where Element to search for the property\n * @param recurse Whether to recurse into child nodes.\n */\nfunction addConditionally(obj, prop, tagName, where, recurse) {\n  if (recurse === void 0) {\n    recurse = false;\n  }\n  var val = fetch(tagName, where, recurse);\n  if (val) obj[prop] = val;\n}\n/**\n * Checks if an element is a feed root node.\n *\n * @param value The name of the element to check.\n * @returns Whether an element is a feed root node.\n */\nfunction isValidFeed(value) {\n  return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2ZlZWRzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlHLGNBQWMsR0FBR0MsbUJBQU8sQ0FBQyxzRUFBZ0IsQ0FBQztBQUM5QyxJQUFJQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsZ0VBQWEsQ0FBQztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNGLE9BQU9BLENBQUNJLEdBQUcsRUFBRTtFQUNsQixJQUFJQyxRQUFRLEdBQUdDLGFBQWEsQ0FBQ0MsV0FBVyxFQUFFSCxHQUFHLENBQUM7RUFDOUMsT0FBTyxDQUFDQyxRQUFRLEdBQ1YsSUFBSSxHQUNKQSxRQUFRLENBQUNHLElBQUksS0FBSyxNQUFNLEdBQ3BCQyxXQUFXLENBQUNKLFFBQVEsQ0FBQyxHQUNyQkssVUFBVSxDQUFDTCxRQUFRLENBQUM7QUFDbEM7QUFDQVAsZUFBZSxHQUFHRSxPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNTLFdBQVdBLENBQUNKLFFBQVEsRUFBRTtFQUMzQixJQUFJTSxFQUFFO0VBQ04sSUFBSUMsTUFBTSxHQUFHUCxRQUFRLENBQUNRLFFBQVE7RUFDOUIsSUFBSUMsSUFBSSxHQUFHO0lBQ1BDLElBQUksRUFBRSxNQUFNO0lBQ1pDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRWIsV0FBVyxDQUFDYyxvQkFBb0IsRUFBRSxPQUFPLEVBQUVMLE1BQU0sQ0FBQyxDQUFDTSxHQUFHLENBQUMsVUFBVUMsSUFBSSxFQUFFO01BQzlFLElBQUlSLEVBQUU7TUFDTixJQUFJRSxRQUFRLEdBQUdNLElBQUksQ0FBQ04sUUFBUTtNQUM1QixJQUFJTyxLQUFLLEdBQUc7UUFBRUMsS0FBSyxFQUFFQyxnQkFBZ0IsQ0FBQ1QsUUFBUTtN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QUFFLENBQUMsQ0FBQyxDQUFDLENBQUNFLElBQUksQ0FBQyxDQUFDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzdCLGdCQUFnQkEsQ0FBQzhCLEdBQUcsRUFBRUMsSUFBSSxFQUFFTixPQUFPLEVBQUVYLEtBQUssRUFBRWEsT0FBTyxFQUFFO0VBQzFELElBQUlBLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtJQUFFQSxPQUFPLEdBQUcsS0FBSztFQUFFO0VBQzNDLElBQUlLLEdBQUcsR0FBRzNCLEtBQUssQ0FBQ29CLE9BQU8sRUFBRVgsS0FBSyxFQUFFYSxPQUFPLENBQUM7RUFDeEMsSUFBSUssR0FBRyxFQUNIRixHQUFHLENBQUNDLElBQUksQ0FBQyxHQUFHQyxHQUFHO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2hELFdBQVdBLENBQUNSLEtBQUssRUFBRTtFQUN4QixPQUFPQSxLQUFLLEtBQUssS0FBSyxJQUFJQSxLQUFLLEtBQUssTUFBTSxJQUFJQSxLQUFLLEtBQUssU0FBUztBQUNyRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZHZpZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9mZWVkcy5qcz81MjdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRGZWVkID0gdm9pZCAwO1xudmFyIHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xudmFyIGxlZ2FjeV9qc18xID0gcmVxdWlyZShcIi4vbGVnYWN5LmpzXCIpO1xuLyoqXG4gKiBHZXQgdGhlIGZlZWQgb2JqZWN0IGZyb20gdGhlIHJvb3Qgb2YgYSBET00gdHJlZS5cbiAqXG4gKiBAY2F0ZWdvcnkgRmVlZHNcbiAqIEBwYXJhbSBkb2MgLSBUaGUgRE9NIHRvIHRvIGV4dHJhY3QgdGhlIGZlZWQgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRGZWVkKGRvYykge1xuICAgIHZhciBmZWVkUm9vdCA9IGdldE9uZUVsZW1lbnQoaXNWYWxpZEZlZWQsIGRvYyk7XG4gICAgcmV0dXJuICFmZWVkUm9vdFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBmZWVkUm9vdC5uYW1lID09PSBcImZlZWRcIlxuICAgICAgICAgICAgPyBnZXRBdG9tRmVlZChmZWVkUm9vdClcbiAgICAgICAgICAgIDogZ2V0UnNzRmVlZChmZWVkUm9vdCk7XG59XG5leHBvcnRzLmdldEZlZWQgPSBnZXRGZWVkO1xuLyoqXG4gKiBQYXJzZSBhbiBBdG9tIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWRSb290IFRoZSByb290IG9mIHRoZSBmZWVkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRBdG9tRmVlZChmZWVkUm9vdCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY2hpbGRzID0gZmVlZFJvb3QuY2hpbGRyZW47XG4gICAgdmFyIGZlZWQgPSB7XG4gICAgICAgIHR5cGU6IFwiYXRvbVwiLFxuICAgICAgICBpdGVtczogKDAsIGxlZ2FjeV9qc18xLmdldEVsZW1lbnRzQnlUYWdOYW1lKShcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0geyBtZWRpYTogZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbikgfTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJpZFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgdmFyIGhyZWYgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJzW1wiaHJlZlwiXTtcbiAgICAgICAgICAgIGlmIChocmVmKSB7XG4gICAgICAgICAgICAgICAgZW50cnkubGluayA9IGhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBmZXRjaChcInN1bW1hcnlcIiwgY2hpbGRyZW4pIHx8IGZldGNoKFwiY29udGVudFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHB1YkRhdGUgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgaWYgKHB1YkRhdGUpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUocHViRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH0pLFxuICAgIH07XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImlkXCIsIFwiaWRcIiwgY2hpbGRzKTtcbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgIHZhciBocmVmID0gKF9hID0gZ2V0T25lRWxlbWVudChcImxpbmtcIiwgY2hpbGRzKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJpYnNbXCJocmVmXCJdO1xuICAgIGlmIChocmVmKSB7XG4gICAgICAgIGZlZWQubGluayA9IGhyZWY7XG4gICAgfVxuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcInN1YnRpdGxlXCIsIGNoaWxkcyk7XG4gICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRzKTtcbiAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcImVtYWlsXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgcmV0dXJuIGZlZWQ7XG59XG4vKipcbiAqIFBhcnNlIGEgUlNTIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWRSb290IFRoZSByb290IG9mIHRoZSBmZWVkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRSc3NGZWVkKGZlZWRSb290KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgY2hpbGRzID0gKF9iID0gKF9hID0gZ2V0T25lRWxlbWVudChcImNoYW5uZWxcIiwgZmVlZFJvb3QuY2hpbGRyZW4pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2hpbGRyZW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgIHZhciBmZWVkID0ge1xuICAgICAgICB0eXBlOiBmZWVkUm9vdC5uYW1lLnN1YnN0cigwLCAzKSxcbiAgICAgICAgaWQ6IFwiXCIsXG4gICAgICAgIGl0ZW1zOiAoMCwgbGVnYWN5X2pzXzEuZ2V0RWxlbWVudHNCeVRhZ05hbWUpKFwiaXRlbVwiLCBmZWVkUm9vdC5jaGlsZHJlbikubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0geyBtZWRpYTogZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbikgfTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJndWlkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImxpbmtcIiwgXCJsaW5rXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiZGVzY3JpcHRpb25cIiwgXCJkZXNjcmlwdGlvblwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICB2YXIgcHViRGF0ZSA9IGZldGNoKFwicHViRGF0ZVwiLCBjaGlsZHJlbikgfHwgZmV0Y2goXCJkYzpkYXRlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmIChwdWJEYXRlKVxuICAgICAgICAgICAgICAgIGVudHJ5LnB1YkRhdGUgPSBuZXcgRGF0ZShwdWJEYXRlKTtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSksXG4gICAgfTtcbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJsaW5rXCIsIFwibGlua1wiLCBjaGlsZHMpO1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcImxhc3RCdWlsZERhdGVcIiwgY2hpbGRzKTtcbiAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgcmV0dXJuIGZlZWQ7XG59XG52YXIgTUVESUFfS0VZU19TVFJJTkcgPSBbXCJ1cmxcIiwgXCJ0eXBlXCIsIFwibGFuZ1wiXTtcbnZhciBNRURJQV9LRVlTX0lOVCA9IFtcbiAgICBcImZpbGVTaXplXCIsXG4gICAgXCJiaXRyYXRlXCIsXG4gICAgXCJmcmFtZXJhdGVcIixcbiAgICBcInNhbXBsaW5ncmF0ZVwiLFxuICAgIFwiY2hhbm5lbHNcIixcbiAgICBcImR1cmF0aW9uXCIsXG4gICAgXCJoZWlnaHRcIixcbiAgICBcIndpZHRoXCIsXG5dO1xuLyoqXG4gKiBHZXQgYWxsIG1lZGlhIGVsZW1lbnRzIG9mIGEgZmVlZCBpdGVtLlxuICpcbiAqIEBwYXJhbSB3aGVyZSBOb2RlcyB0byBzZWFyY2ggaW4uXG4gKiBAcmV0dXJucyBNZWRpYSBlbGVtZW50cy5cbiAqL1xuZnVuY3Rpb24gZ2V0TWVkaWFFbGVtZW50cyh3aGVyZSkge1xuICAgIHJldHVybiAoMCwgbGVnYWN5X2pzXzEuZ2V0RWxlbWVudHNCeVRhZ05hbWUpKFwibWVkaWE6Y29udGVudFwiLCB3aGVyZSkubWFwKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHZhciBhdHRyaWJzID0gZWxlbS5hdHRyaWJzO1xuICAgICAgICB2YXIgbWVkaWEgPSB7XG4gICAgICAgICAgICBtZWRpdW06IGF0dHJpYnNbXCJtZWRpdW1cIl0sXG4gICAgICAgICAgICBpc0RlZmF1bHQ6ICEhYXR0cmlic1tcImlzRGVmYXVsdFwiXSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBNRURJQV9LRVlTX1NUUklOR18xID0gTUVESUFfS0VZU19TVFJJTkc7IF9pIDwgTUVESUFfS0VZU19TVFJJTkdfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWIgPSBNRURJQV9LRVlTX1NUUklOR18xW19pXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJzW2F0dHJpYl0pIHtcbiAgICAgICAgICAgICAgICBtZWRpYVthdHRyaWJdID0gYXR0cmlic1thdHRyaWJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgTUVESUFfS0VZU19JTlRfMSA9IE1FRElBX0tFWVNfSU5UOyBfYSA8IE1FRElBX0tFWVNfSU5UXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmliID0gTUVESUFfS0VZU19JTlRfMVtfYV07XG4gICAgICAgICAgICBpZiAoYXR0cmlic1thdHRyaWJdKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFbYXR0cmliXSA9IHBhcnNlSW50KGF0dHJpYnNbYXR0cmliXSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJzW1wiZXhwcmVzc2lvblwiXSkge1xuICAgICAgICAgICAgbWVkaWEuZXhwcmVzc2lvbiA9IGF0dHJpYnNbXCJleHByZXNzaW9uXCJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IG9uZSBlbGVtZW50IGJ5IHRhZyBuYW1lLlxuICpcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRvIGxvb2sgZm9yXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaCBpblxuICogQHJldHVybnMgVGhlIGVsZW1lbnQgb3IgbnVsbFxuICovXG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHRhZ05hbWUsIG5vZGUpIHtcbiAgICByZXR1cm4gKDAsIGxlZ2FjeV9qc18xLmdldEVsZW1lbnRzQnlUYWdOYW1lKSh0YWdOYW1lLCBub2RlLCB0cnVlLCAxKVswXTtcbn1cbi8qKlxuICogR2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgYW4gZWxlbWVudCB3aXRoIGEgY2VydGFpbiB0YWcgbmFtZS5cbiAqXG4gKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB3aGVyZSBOb2RlIHRvIHNlYXJjaCBpbi5cbiAqIEBwYXJhbSByZWN1cnNlIFdoZXRoZXIgdG8gcmVjdXJzZSBpbnRvIGNoaWxkIG5vZGVzLlxuICogQHJldHVybnMgVGhlIHRleHQgY29udGVudCBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZmV0Y2godGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSBmYWxzZTsgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudGV4dENvbnRlbnQpKCgwLCBsZWdhY3lfanNfMS5nZXRFbGVtZW50c0J5VGFnTmFtZSkodGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UsIDEpKS50cmltKCk7XG59XG4vKipcbiAqIEFkZHMgYSBwcm9wZXJ0eSB0byBhbiBvYmplY3QgaWYgaXQgaGFzIGEgdmFsdWUuXG4gKlxuICogQHBhcmFtIG9iaiBPYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRoYXQgY29udGFpbnMgdGhlIGNvbmRpdGlvbmFsbHkgYWRkZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB3aGVyZSBFbGVtZW50IHRvIHNlYXJjaCBmb3IgdGhlIHByb3BlcnR5XG4gKiBAcGFyYW0gcmVjdXJzZSBXaGV0aGVyIHRvIHJlY3Vyc2UgaW50byBjaGlsZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYWRkQ29uZGl0aW9uYWxseShvYmosIHByb3AsIHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gZmFsc2U7IH1cbiAgICB2YXIgdmFsID0gZmV0Y2godGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UpO1xuICAgIGlmICh2YWwpXG4gICAgICAgIG9ialtwcm9wXSA9IHZhbDtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGVsZW1lbnQgaXMgYSBmZWVkIHJvb3Qgbm9kZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBXaGV0aGVyIGFuIGVsZW1lbnQgaXMgYSBmZWVkIHJvb3Qgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEZlZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwicnNzXCIgfHwgdmFsdWUgPT09IFwiZmVlZFwiIHx8IHZhbHVlID09PSBcInJkZjpSREZcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlZWRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEZlZWQiLCJzdHJpbmdpZnlfanNfMSIsInJlcXVpcmUiLCJsZWdhY3lfanNfMSIsImRvYyIsImZlZWRSb290IiwiZ2V0T25lRWxlbWVudCIsImlzVmFsaWRGZWVkIiwibmFtZSIsImdldEF0b21GZWVkIiwiZ2V0UnNzRmVlZCIsIl9hIiwiY2hpbGRzIiwiY2hpbGRyZW4iLCJmZWVkIiwidHlwZSIsIml0ZW1zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJtYXAiLCJpdGVtIiwiZW50cnkiLCJtZWRpYSIsImdldE1lZGlhRWxlbWVudHMiLCJhZGRDb25kaXRpb25hbGx5IiwiaHJlZiIsImF0dHJpYnMiLCJsaW5rIiwiZGVzY3JpcHRpb24iLCJmZXRjaCIsInB1YkRhdGUiLCJEYXRlIiwidXBkYXRlZCIsIl9iIiwic3Vic3RyIiwiaWQiLCJNRURJQV9LRVlTX1NUUklORyIsIk1FRElBX0tFWVNfSU5UIiwid2hlcmUiLCJlbGVtIiwibWVkaXVtIiwiaXNEZWZhdWx0IiwiX2kiLCJNRURJQV9LRVlTX1NUUklOR18xIiwibGVuZ3RoIiwiYXR0cmliIiwiTUVESUFfS0VZU19JTlRfMSIsInBhcnNlSW50IiwiZXhwcmVzc2lvbiIsInRhZ05hbWUiLCJub2RlIiwicmVjdXJzZSIsInRleHRDb250ZW50IiwidHJpbSIsIm9iaiIsInByb3AiLCJ2YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/feeds.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/domutils/lib/helpers.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.uniqueSort = exports.compareDocumentPosition = exports.DocumentPosition = exports.removeSubsets = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\n/**\n * Given an array of nodes, remove any member that is contained by another\n * member.\n *\n * @category Helpers\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't contained by other nodes.\n */\nfunction removeSubsets(nodes) {\n  var idx = nodes.length;\n  /*\n   * Check if each node (or one of its ancestors) is already contained in the\n   * array.\n   */\n  while (--idx >= 0) {\n    var node = nodes[idx];\n    /*\n     * Remove the node if it is not unique.\n     * We are going through the array from the end, so we only\n     * have to check nodes that preceed the node under consideration in the array.\n     */\n    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n      nodes.splice(idx, 1);\n      continue;\n    }\n    for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n      if (nodes.includes(ancestor)) {\n        nodes.splice(idx, 1);\n        break;\n      }\n    }\n  }\n  return nodes;\n}\nexports.removeSubsets = removeSubsets;\n/**\n * @category Helpers\n * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n */\nvar DocumentPosition;\n(function (DocumentPosition) {\n  DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n  DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n  DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n  DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n  DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n})(DocumentPosition = exports.DocumentPosition || (exports.DocumentPosition = {}));\n/**\n * Compare the position of one node against another node in any other document,\n * returning a bitmask with the values from {@link DocumentPosition}.\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent.\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @category Helpers\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */\nfunction compareDocumentPosition(nodeA, nodeB) {\n  var aParents = [];\n  var bParents = [];\n  if (nodeA === nodeB) {\n    return 0;\n  }\n  var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n  while (current) {\n    aParents.unshift(current);\n    current = current.parent;\n  }\n  current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n  while (current) {\n    bParents.unshift(current);\n    current = current.parent;\n  }\n  var maxIdx = Math.min(aParents.length, bParents.length);\n  var idx = 0;\n  while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n    idx++;\n  }\n  if (idx === 0) {\n    return DocumentPosition.DISCONNECTED;\n  }\n  var sharedParent = aParents[idx - 1];\n  var siblings = sharedParent.children;\n  var aSibling = aParents[idx];\n  var bSibling = bParents[idx];\n  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n    if (sharedParent === nodeB) {\n      return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n    }\n    return DocumentPosition.FOLLOWING;\n  }\n  if (sharedParent === nodeA) {\n    return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n  }\n  return DocumentPosition.PRECEDING;\n}\nexports.compareDocumentPosition = compareDocumentPosition;\n/**\n * Sort an array of nodes based on their relative position in the document,\n * removing any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @category Helpers\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */\nfunction uniqueSort(nodes) {\n  nodes = nodes.filter(function (node, i, arr) {\n    return !arr.includes(node, i + 1);\n  });\n  nodes.sort(function (a, b) {\n    var relative = compareDocumentPosition(a, b);\n    if (relative & DocumentPosition.PRECEDING) {\n      return -1;\n    } else if (relative & DocumentPosition.FOLLOWING) {\n      return 1;\n    }\n    return 0;\n  });\n  return nodes;\n}\nexports.uniqueSort = uniqueSort;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/domutils/lib/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;\n__exportStar(__webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/domutils/lib/stringify.js\"), exports);\n__exportStar(__webpack_require__(/*! ./traversal.js */ \"(rsc)/./node_modules/domutils/lib/traversal.js\"), exports);\n__exportStar(__webpack_require__(/*! ./manipulation.js */ \"(rsc)/./node_modules/domutils/lib/manipulation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./querying.js */ \"(rsc)/./node_modules/domutils/lib/querying.js\"), exports);\n__exportStar(__webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/domutils/lib/legacy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/domutils/lib/helpers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./feeds.js */ \"(rsc)/./node_modules/domutils/lib/feeds.js\"), exports);\n/** @deprecated Use these methods from `domhandler` directly. */\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"isTag\", ({\n  enumerable: true,\n  get: function get() {\n    return domhandler_1.isTag;\n  }\n}));\nObject.defineProperty(exports, \"isCDATA\", ({\n  enumerable: true,\n  get: function get() {\n    return domhandler_1.isCDATA;\n  }\n}));\nObject.defineProperty(exports, \"isText\", ({\n  enumerable: true,\n  get: function get() {\n    return domhandler_1.isText;\n  }\n}));\nObject.defineProperty(exports, \"isComment\", ({\n  enumerable: true,\n  get: function get() {\n    return domhandler_1.isComment;\n  }\n}));\nObject.defineProperty(exports, \"isDocument\", ({\n  enumerable: true,\n  get: function get() {\n    return domhandler_1.isDocument;\n  }\n}));\nObject.defineProperty(exports, \"hasChildren\", ({\n  enumerable: true,\n  get: function get() {\n    return domhandler_1.hasChildren;\n  }\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQUlBLGVBQWUsR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDQSxlQUFlLEtBQU1DLE1BQU0sQ0FBQ0MsTUFBTSxHQUFJLFVBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUUsRUFBRTtFQUM1RixJQUFJQSxFQUFFLEtBQUtDLFNBQVMsRUFBRUQsRUFBRSxHQUFHRCxDQUFDO0VBQzVCLElBQUlHLElBQUksR0FBR1AsTUFBTSxDQUFDUSx3QkFBd0IsQ0FBQ0wsQ0FBQyxFQUFFQyxDQUFDLENBQUM7RUFDaEQsSUFBSSxDQUFDRyxJQUFJLEtBQUssS0FBSyxJQUFJQSxJQUFJLEdBQUcsQ0FBQ0osQ0FBQyxDQUFDTSxVQUFVLEdBQUdGLElBQUksQ0FBQ0csUUFBUSxJQUFJSCxJQUFJLENBQUNJLFlBQVksQ0FBQyxFQUFFO0lBQ2pGSixJQUFJLEdBQUc7TUFBRUssVUFBVSxFQUFFLElBQUk7TUFBRUMsR0FBRyxFQUFFLFNBQUFBLElBQUEsRUFBVztRQUFFLE9BQU9WLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDO01BQUU7SUFBRSxDQUFDO0VBQy9EO0VBQ0FKLE1BQU0sQ0FBQ2MsY0FBYyxDQUFDWixDQUFDLEVBQUVHLEVBQUUsRUFBRUUsSUFBSSxDQUFDO0FBQ3RDLENBQUMsR0FBSyxVQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFLEVBQUU7RUFDeEIsSUFBSUEsRUFBRSxLQUFLQyxTQUFTLEVBQUVELEVBQUUsR0FBR0QsQ0FBQztFQUM1QkYsQ0FBQyxDQUFDRyxFQUFFLENBQUMsR0FBR0YsQ0FBQyxDQUFDQyxDQUFDLENBQUM7QUFDaEIsQ0FBRSxDQUFDO0FBQ0gsSUFBSVcsWUFBWSxHQUFJLElBQUksSUFBSSxJQUFJLENBQUNBLFlBQVksSUFBSyxVQUFTWixDQUFDLEVBQUVhLE9BQU8sRUFBRTtFQUNuRSxLQUFLLElBQUlDLENBQUMsSUFBSWQsQ0FBQyxFQUFFLElBQUljLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLE9BQU8sRUFBRUMsQ0FBQyxDQUFDLEVBQUVsQixlQUFlLENBQUNpQixPQUFPLEVBQUViLENBQUMsRUFBRWMsQ0FBQyxDQUFDO0FBQzdILENBQUM7QUFDRGpCLDhDQUE2QztFQUFFcUIsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdETCxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGlCQUFpQixHQUFHQSxjQUFjLEdBQUdBLGVBQWUsR0FBR0EsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUN4SEQsWUFBWSxDQUFDYSxtQkFBTyxDQUFDLHNFQUFnQixDQUFDLEVBQUVaLE9BQU8sQ0FBQztBQUNoREQsWUFBWSxDQUFDYSxtQkFBTyxDQUFDLHNFQUFnQixDQUFDLEVBQUVaLE9BQU8sQ0FBQztBQUNoREQsWUFBWSxDQUFDYSxtQkFBTyxDQUFDLDRFQUFtQixDQUFDLEVBQUVaLE9BQU8sQ0FBQztBQUNuREQsWUFBWSxDQUFDYSxtQkFBTyxDQUFDLG9FQUFlLENBQUMsRUFBRVosT0FBTyxDQUFDO0FBQy9DRCxZQUFZLENBQUNhLG1CQUFPLENBQUMsZ0VBQWEsQ0FBQyxFQUFFWixPQUFPLENBQUM7QUFDN0NELFlBQVksQ0FBQ2EsbUJBQU8sQ0FBQyxrRUFBYyxDQUFDLEVBQUVaLE9BQU8sQ0FBQztBQUM5Q0QsWUFBWSxDQUFDYSxtQkFBTyxDQUFDLDhEQUFZLENBQUMsRUFBRVosT0FBTyxDQUFDO0FBQzVDO0FBQ0EsSUFBSWEsWUFBWSxHQUFHRCxtQkFBTyxDQUFDLGdFQUFZLENBQUM7QUFDeEM1Qix5Q0FBd0M7RUFBRVksVUFBVSxFQUFFLElBQUk7RUFBRUMsR0FBRyxFQUFFLFNBQUFBLElBQUEsRUFBWTtJQUFFLE9BQU9nQixZQUFZLENBQUNGLEtBQUs7RUFBRTtBQUFFLENBQUMsRUFBQztBQUM5RzNCLDJDQUEwQztFQUFFWSxVQUFVLEVBQUUsSUFBSTtFQUFFQyxHQUFHLEVBQUUsU0FBQUEsSUFBQSxFQUFZO0lBQUUsT0FBT2dCLFlBQVksQ0FBQ0gsT0FBTztFQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xIMUIsMENBQXlDO0VBQUVZLFVBQVUsRUFBRSxJQUFJO0VBQUVDLEdBQUcsRUFBRSxTQUFBQSxJQUFBLEVBQVk7SUFBRSxPQUFPZ0IsWUFBWSxDQUFDSixNQUFNO0VBQUU7QUFBRSxDQUFDLEVBQUM7QUFDaEh6Qiw2Q0FBNEM7RUFBRVksVUFBVSxFQUFFLElBQUk7RUFBRUMsR0FBRyxFQUFFLFNBQUFBLElBQUEsRUFBWTtJQUFFLE9BQU9nQixZQUFZLENBQUNMLFNBQVM7RUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SHhCLDhDQUE2QztFQUFFWSxVQUFVLEVBQUUsSUFBSTtFQUFFQyxHQUFHLEVBQUUsU0FBQUEsSUFBQSxFQUFZO0lBQUUsT0FBT2dCLFlBQVksQ0FBQ04sVUFBVTtFQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hIdkIsK0NBQThDO0VBQUVZLFVBQVUsRUFBRSxJQUFJO0VBQUVDLEdBQUcsRUFBRSxTQUFBQSxJQUFBLEVBQVk7SUFBRSxPQUFPZ0IsWUFBWSxDQUFDUCxXQUFXO0VBQUU7QUFBRSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWR2aWQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvaW5kZXguanM/YmYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNDaGlsZHJlbiA9IGV4cG9ydHMuaXNEb2N1bWVudCA9IGV4cG9ydHMuaXNDb21tZW50ID0gZXhwb3J0cy5pc1RleHQgPSBleHBvcnRzLmlzQ0RBVEEgPSBleHBvcnRzLmlzVGFnID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHJhdmVyc2FsLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tYW5pcHVsYXRpb24uanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3F1ZXJ5aW5nLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9sZWdhY3kuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlbHBlcnMuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ZlZWRzLmpzXCIpLCBleHBvcnRzKTtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgdGhlc2UgbWV0aG9kcyBmcm9tIGBkb21oYW5kbGVyYCBkaXJlY3RseS4gKi9cbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVGFnXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaXNUYWc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0NEQVRBXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaXNDREFUQTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVGV4dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzVGV4dDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzQ29tbWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzQ29tbWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRG9jdW1lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc0RvY3VtZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaGFzQ2hpbGRyZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwiaGFzQ2hpbGRyZW4iLCJpc0RvY3VtZW50IiwiaXNDb21tZW50IiwiaXNUZXh0IiwiaXNDREFUQSIsImlzVGFnIiwicmVxdWlyZSIsImRvbWhhbmRsZXJfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/legacy.js":
/*!*********************************************!*\
  !*** ./node_modules/domutils/lib/legacy.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\nvar querying_js_1 = __webpack_require__(/*! ./querying.js */ \"(rsc)/./node_modules/domutils/lib/querying.js\");\n/**\n * A map of functions to check nodes against.\n */\nvar Checks = {\n  tag_name: function tag_name(name) {\n    if (typeof name === \"function\") {\n      return function (elem) {\n        return (0, domhandler_1.isTag)(elem) && name(elem.name);\n      };\n    } else if (name === \"*\") {\n      return domhandler_1.isTag;\n    }\n    return function (elem) {\n      return (0, domhandler_1.isTag)(elem) && elem.name === name;\n    };\n  },\n  tag_type: function tag_type(type) {\n    if (typeof type === \"function\") {\n      return function (elem) {\n        return type(elem.type);\n      };\n    }\n    return function (elem) {\n      return elem.type === type;\n    };\n  },\n  tag_contains: function tag_contains(data) {\n    if (typeof data === \"function\") {\n      return function (elem) {\n        return (0, domhandler_1.isText)(elem) && data(elem.data);\n      };\n    }\n    return function (elem) {\n      return (0, domhandler_1.isText)(elem) && elem.data === data;\n    };\n  }\n};\n/**\n * Returns a function to check whether a node has an attribute with a particular\n * value.\n *\n * @param attrib Attribute to check.\n * @param value Attribute value to look for.\n * @returns A function to check whether the a node has an attribute with a\n *   particular value.\n */\nfunction getAttribCheck(attrib, value) {\n  if (typeof value === \"function\") {\n    return function (elem) {\n      return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);\n    };\n  }\n  return function (elem) {\n    return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;\n  };\n}\n/**\n * Returns a function that returns `true` if either of the input functions\n * returns `true` for a node.\n *\n * @param a First function to combine.\n * @param b Second function to combine.\n * @returns A function taking a node and returning `true` if either of the input\n *   functions returns `true` for the node.\n */\nfunction combineFuncs(a, b) {\n  return function (elem) {\n    return a(elem) || b(elem);\n  };\n}\n/**\n * Returns a function that executes all checks in `options` and returns `true`\n * if any of them match a node.\n *\n * @param options An object describing nodes to look for.\n * @returns A function that executes all checks in `options` and returns `true`\n *   if any of them match a node.\n */\nfunction compileTest(options) {\n  var funcs = Object.keys(options).map(function (key) {\n    var value = options[key];\n    return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);\n  });\n  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);\n}\n/**\n * Checks whether a node matches the description in `options`.\n *\n * @category Legacy Query Functions\n * @param options An object describing nodes to look for.\n * @param node The element to test.\n * @returns Whether the element matches the description in `options`.\n */\nfunction testElement(options, node) {\n  var test = compileTest(options);\n  return test ? test(node) : true;\n}\nexports.testElement = testElement;\n/**\n * Returns all nodes that match `options`.\n *\n * @category Legacy Query Functions\n * @param options An object describing nodes to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes that match `options`.\n */\nfunction getElements(options, nodes, recurse, limit) {\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  var test = compileTest(options);\n  return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];\n}\nexports.getElements = getElements;\n/**\n * Returns the node with the supplied ID.\n *\n * @category Legacy Query Functions\n * @param id The unique ID attribute value to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @returns The node with the supplied ID.\n */\nfunction getElementById(id, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (!Array.isArray(nodes)) nodes = [nodes];\n  return (0, querying_js_1.findOne)(getAttribCheck(\"id\", id), nodes, recurse);\n}\nexports.getElementById = getElementById;\n/**\n * Returns all nodes with the supplied `tagName`.\n *\n * @category Legacy Query Functions\n * @param tagName Tag name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `tagName`.\n */\nfunction getElementsByTagName(tagName, nodes, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  return (0, querying_js_1.filter)(Checks[\"tag_name\"](tagName), nodes, recurse, limit);\n}\nexports.getElementsByTagName = getElementsByTagName;\n/**\n * Returns all nodes with the supplied `type`.\n *\n * @category Legacy Query Functions\n * @param type Element type to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `type`.\n */\nfunction getElementsByTagType(type, nodes, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  return (0, querying_js_1.filter)(Checks[\"tag_type\"](type), nodes, recurse, limit);\n}\nexports.getElementsByTagType = getElementsByTagType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/manipulation.js":
/*!***************************************************!*\
  !*** ./node_modules/domutils/lib/manipulation.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;\n/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */\nfunction removeElement(elem) {\n  if (elem.prev) elem.prev.next = elem.next;\n  if (elem.next) elem.next.prev = elem.prev;\n  if (elem.parent) {\n    var childs = elem.parent.children;\n    var childsIndex = childs.lastIndexOf(elem);\n    if (childsIndex >= 0) {\n      childs.splice(childsIndex, 1);\n    }\n  }\n  elem.next = null;\n  elem.prev = null;\n  elem.parent = null;\n}\nexports.removeElement = removeElement;\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */\nfunction replaceElement(elem, replacement) {\n  var prev = replacement.prev = elem.prev;\n  if (prev) {\n    prev.next = replacement;\n  }\n  var next = replacement.next = elem.next;\n  if (next) {\n    next.prev = replacement;\n  }\n  var parent = replacement.parent = elem.parent;\n  if (parent) {\n    var childs = parent.children;\n    childs[childs.lastIndexOf(elem)] = replacement;\n    elem.parent = null;\n  }\n}\nexports.replaceElement = replaceElement;\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param parent The element to append to.\n * @param child The element to be added as a child.\n */\nfunction appendChild(parent, child) {\n  removeElement(child);\n  child.next = null;\n  child.parent = parent;\n  if (parent.children.push(child) > 1) {\n    var sibling = parent.children[parent.children.length - 2];\n    sibling.next = child;\n    child.prev = sibling;\n  } else {\n    child.prev = null;\n  }\n}\nexports.appendChild = appendChild;\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */\nfunction append(elem, next) {\n  removeElement(next);\n  var parent = elem.parent;\n  var currNext = elem.next;\n  next.next = currNext;\n  next.prev = elem;\n  elem.next = next;\n  next.parent = parent;\n  if (currNext) {\n    currNext.prev = next;\n    if (parent) {\n      var childs = parent.children;\n      childs.splice(childs.lastIndexOf(currNext), 0, next);\n    }\n  } else if (parent) {\n    parent.children.push(next);\n  }\n}\nexports.append = append;\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param parent The element to prepend before.\n * @param child The element to be added as a child.\n */\nfunction prependChild(parent, child) {\n  removeElement(child);\n  child.parent = parent;\n  child.prev = null;\n  if (parent.children.unshift(child) !== 1) {\n    var sibling = parent.children[1];\n    sibling.prev = child;\n    child.next = sibling;\n  } else {\n    child.next = null;\n  }\n}\nexports.prependChild = prependChild;\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */\nfunction prepend(elem, prev) {\n  removeElement(prev);\n  var parent = elem.parent;\n  if (parent) {\n    var childs = parent.children;\n    childs.splice(childs.indexOf(elem), 0, prev);\n  }\n  if (elem.prev) {\n    elem.prev.next = prev;\n  }\n  prev.parent = parent;\n  prev.prev = elem.prev;\n  prev.next = elem;\n  elem.prev = prev;\n}\nexports.prepend = prepend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/manipulation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/querying.js":
/*!***********************************************!*\
  !*** ./node_modules/domutils/lib/querying.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n  /** Stack of the arrays we are looking at. */\n  var nodeStack = [nodes];\n  /** Stack of the indices within the arrays. */\n  var indexStack = [0];\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    var elem = nodeStack[0][indexStack[0]++];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  var elem = null;\n  for (var i = 0; i < nodes.length && !elem; i++) {\n    var node = nodes[i];\n    if (!(0, domhandler_1.isTag)(node)) {\n      continue;\n    } else if (test(node)) {\n      elem = node;\n    } else if (recurse && node.children.length > 0) {\n      elem = findOne(test, node.children, true);\n    }\n  }\n  return elem;\n}\nexports.findOne = findOne;\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nfunction existsOne(test, nodes) {\n  return nodes.some(function (checked) {\n    return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));\n  });\n}\nexports.existsOne = existsOne;\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n  var result = [];\n  var nodeStack = [nodes];\n  var indexStack = [0];\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    var elem = nodeStack[0][indexStack[0]++];\n    if (!(0, domhandler_1.isTag)(elem)) continue;\n    if (test(elem)) result.push(elem);\n    if (elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\nexports.findAll = findAll;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/querying.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/stringify.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/stringify.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\nvar dom_serializer_1 = __importDefault(__webpack_require__(/*! dom-serializer */ \"(rsc)/./node_modules/dom-serializer/lib/index.js\"));\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/index.js\");\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @returns `node`'s outer HTML.\n */\nfunction getOuterHTML(node, options) {\n  return (0, dom_serializer_1[\"default\"])(node, options);\n}\nexports.getOuterHTML = getOuterHTML;\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @returns `node`'s inner HTML.\n */\nfunction getInnerHTML(node, options) {\n  return (0, domhandler_1.hasChildren)(node) ? node.children.map(function (node) {\n    return getOuterHTML(node, options);\n  }).join(\"\") : \"\";\n}\nexports.getInnerHTML = getInnerHTML;\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.\n *\n * @category Stringify\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */\nfunction getText(node) {\n  if (Array.isArray(node)) return node.map(getText).join(\"\");\n  if ((0, domhandler_1.isTag)(node)) return node.name === \"br\" ? \"\\n\" : getText(node.children);\n  if ((0, domhandler_1.isCDATA)(node)) return getText(node.children);\n  if ((0, domhandler_1.isText)(node)) return node.data;\n  return \"\";\n}\nexports.getText = getText;\n/**\n * Get a node's text content. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */\nfunction textContent(node) {\n  if (Array.isArray(node)) return node.map(textContent).join(\"\");\n  if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {\n    return textContent(node.children);\n  }\n  if ((0, domhandler_1.isText)(node)) return node.data;\n  return \"\";\n}\nexports.textContent = textContent;\n/**\n * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */\nfunction innerText(node) {\n  if (Array.isArray(node)) return node.map(innerText).join(\"\");\n  if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {\n    return innerText(node.children);\n  }\n  if ((0, domhandler_1.isText)(node)) return node.data;\n  return \"\";\n}\nexports.innerText = innerText;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/traversal.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/traversal.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/index.js\");\n/**\n * Get a node's children.\n *\n * @category Traversal\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */\nfunction getChildren(elem) {\n  return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];\n}\nexports.getChildren = getChildren;\n/**\n * Get a node's parent.\n *\n * @category Traversal\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n */\nfunction getParent(elem) {\n  return elem.parent || null;\n}\nexports.getParent = getParent;\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first. If we don't\n * have a parent (the element is a root node), we walk the element's `prev` &\n * `next` to get all remaining nodes.\n *\n * @category Traversal\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings, including `elem`.\n */\nfunction getSiblings(elem) {\n  var _a, _b;\n  var parent = getParent(elem);\n  if (parent != null) return getChildren(parent);\n  var siblings = [elem];\n  var prev = elem.prev,\n    next = elem.next;\n  while (prev != null) {\n    siblings.unshift(prev);\n    _a = prev, prev = _a.prev;\n  }\n  while (next != null) {\n    siblings.push(next);\n    _b = next, next = _b.next;\n  }\n  return siblings;\n}\nexports.getSiblings = getSiblings;\n/**\n * Gets an attribute from an element.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */\nfunction getAttributeValue(elem, name) {\n  var _a;\n  return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\nexports.getAttributeValue = getAttributeValue;\n/**\n * Checks whether an element has an attribute.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */\nfunction hasAttrib(elem, name) {\n  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n}\nexports.hasAttrib = hasAttrib;\n/**\n * Get the tag name of an element.\n *\n * @category Traversal\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */\nfunction getName(elem) {\n  return elem.name;\n}\nexports.getName = getName;\n/**\n * Returns the next element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n * sibling.\n */\nfunction nextElementSibling(elem) {\n  var _a;\n  var next = elem.next;\n  while (next !== null && !(0, domhandler_1.isTag)(next)) _a = next, next = _a.next;\n  return next;\n}\nexports.nextElementSibling = nextElementSibling;\n/**\n * Returns the previous element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n * previous sibling.\n */\nfunction prevElementSibling(elem) {\n  var _a;\n  var prev = elem.prev;\n  while (prev !== null && !(0, domhandler_1.isTag)(prev)) _a = prev, prev = _a.prev;\n  return prev;\n}\nexports.prevElementSibling = prevElementSibling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/traversal.js\n");

/***/ })

};
;