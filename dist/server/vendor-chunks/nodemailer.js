"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nodemailer";
exports.ids = ["vendor-chunks/nodemailer"];
exports.modules = {

/***/ "(rsc)/./node_modules/nodemailer/lib/addressparser/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/addressparser/index.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _handleAddress(tokens) {\n  var token;\n  var isGroup = false;\n  var state = 'text';\n  var address;\n  var addresses = [];\n  var data = {\n    address: [],\n    comment: [],\n    group: [],\n    text: []\n  };\n  var i;\n  var len;\n\n  // Filter out <addresses>, (comments) and regular text\n  for (i = 0, len = tokens.length; i < len; i++) {\n    token = tokens[i];\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n        case '(':\n          state = 'comment';\n          break;\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n        default:\n          state = 'text';\n      }\n    } else if (token.value) {\n      if (state === 'address') {\n        // handle use case where unquoted name includes a \"<\"\n        // Apple Mail truncates everything between an unexpected < and an address\n        // and so will we\n        token.value = token.value.replace(/^[^<]*<\\s*/, '');\n      }\n      data[state].push(token.value);\n    }\n  }\n\n  // If there is no text but a comment, replace the two\n  if (!data.text.length && data.comment.length) {\n    data.text = data.comment;\n    data.comment = [];\n  }\n  if (isGroup) {\n    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n    data.text = data.text.join(' ');\n    addresses.push({\n      name: data.text || address && address.name,\n      group: data.group.length ? addressparser(data.group.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (!data.address.length && data.text.length) {\n      for (i = data.text.length - 1; i >= 0; i--) {\n        if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          data.address = data.text.splice(i, 1);\n          break;\n        }\n      }\n      var _regexHandler = function _regexHandler(address) {\n        if (!data.address.length) {\n          data.address = [address.trim()];\n          return ' ';\n        } else {\n          return address;\n        }\n      };\n\n      // still no address\n      if (!data.address.length) {\n        for (i = data.text.length - 1; i >= 0; i--) {\n          // fixed the regex to parse email address correctly when email address has more than one @\n          data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n          if (data.address.length) {\n            break;\n          }\n        }\n      }\n    }\n\n    // If there's still is no text but a comment exixts, replace the two\n    if (!data.text.length && data.comment.length) {\n      data.text = data.comment;\n      data.comment = [];\n    }\n\n    // Keep only the first address occurence, push others to regular text\n    if (data.address.length > 1) {\n      data.text = data.text.concat(data.address.splice(1));\n    }\n\n    // Join values with spaces\n    data.text = data.text.join(' ');\n    data.address = data.address.join(' ');\n    if (!data.address && isGroup) {\n      return [];\n    } else {\n      address = {\n        address: data.address || data.text || '',\n        name: data.text || data.address || ''\n      };\n      if (address.address === address.name) {\n        if ((address.address || '').match(/@/)) {\n          address.name = '';\n        } else {\n          address.address = '';\n        }\n      }\n      addresses.push(address);\n    }\n  }\n  return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(str) {\n    _classCallCheck(this, Tokenizer);\n    this.str = (str || '').toString();\n    this.operatorCurrent = '';\n    this.operatorExpecting = '';\n    this.node = null;\n    this.escaped = false;\n    this.list = [];\n    /**\n     * Operator tokens and which tokens are expected to end the sequence\n     */\n    this.operators = {\n      '\"': '\"',\n      '(': ')',\n      '<': '>',\n      ',': '',\n      ':': ';',\n      // Semicolons are not a legal delimiter per the RFC2822 grammar other\n      // than for terminating a group, but they are also not valid for any\n      // other use in this context.  Given that some mail clients have\n      // historically allowed the semicolon as a delimiter equivalent to the\n      // comma in their UI, it makes sense to treat them the same as a comma\n      // when used outside of a group.\n      ';': ''\n    };\n  }\n\n  /**\n   * Tokenizes the original input string\n   *\n   * @return {Array} An array of operator|text tokens\n   */\n  return _createClass(Tokenizer, [{\n    key: \"tokenize\",\n    value: function tokenize() {\n      var chr,\n        list = [];\n      for (var i = 0, len = this.str.length; i < len; i++) {\n        chr = this.str.charAt(i);\n        this.checkChar(chr);\n      }\n      this.list.forEach(function (node) {\n        node.value = (node.value || '').toString().trim();\n        if (node.value) {\n          list.push(node);\n        }\n      });\n      return list;\n    }\n\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */\n  }, {\n    key: \"checkChar\",\n    value: function checkChar(chr) {\n      if (this.escaped) {\n        // ignore next condition blocks\n      } else if (chr === this.operatorExpecting) {\n        this.node = {\n          type: 'operator',\n          value: chr\n        };\n        this.list.push(this.node);\n        this.node = null;\n        this.operatorExpecting = '';\n        this.escaped = false;\n        return;\n      } else if (!this.operatorExpecting && chr in this.operators) {\n        this.node = {\n          type: 'operator',\n          value: chr\n        };\n        this.list.push(this.node);\n        this.node = null;\n        this.operatorExpecting = this.operators[chr];\n        this.escaped = false;\n        return;\n      } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n        this.escaped = true;\n        return;\n      }\n      if (!this.node) {\n        this.node = {\n          type: 'text',\n          value: ''\n        };\n        this.list.push(this.node);\n      }\n      if (chr === '\\n') {\n        // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n        // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n        chr = ' ';\n      }\n      if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n        // skip command bytes\n        this.node.value += chr;\n      }\n      this.escaped = false;\n    }\n  }]);\n}();\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str, options) {\n  options = options || {};\n  var tokenizer = new Tokenizer(str);\n  var tokens = tokenizer.tokenize();\n  var addresses = [];\n  var address = [];\n  var parsedAddresses = [];\n  tokens.forEach(function (token) {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (address.length) {\n        addresses.push(address);\n      }\n      address = [];\n    } else {\n      address.push(token);\n    }\n  });\n  if (address.length) {\n    addresses.push(address);\n  }\n  addresses.forEach(function (address) {\n    address = _handleAddress(address);\n    if (address.length) {\n      parsedAddresses = parsedAddresses.concat(address);\n    }\n  });\n  if (options.flatten) {\n    var _addresses = [];\n    var walkAddressList = function walkAddressList(list) {\n      list.forEach(function (address) {\n        if (address.group) {\n          return walkAddressList(address.group);\n        } else {\n          _addresses.push(address);\n        }\n      });\n    };\n    walkAddressList(parsedAddresses);\n    return _addresses;\n  }\n  return parsedAddresses;\n}\n\n// expose to the world\nmodule.exports = addressparser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/base64/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/base64/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer, 'utf-8');\n  }\n  return buffer.toString('base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n  if (str.length <= lineLength) {\n    return str;\n  }\n  var result = [];\n  var pos = 0;\n  var chunkLength = lineLength * 1024;\n  while (pos < str.length) {\n    var wrappedLines = str.substr(pos, chunkLength).replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n').trim();\n    result.push(wrappedLines);\n    pos += chunkLength;\n  }\n  return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nvar Encoder = /*#__PURE__*/function (_Transform) {\n  function Encoder(options) {\n    var _this2;\n    _classCallCheck(this, Encoder);\n    _this2 = _callSuper(this, Encoder);\n    // init Transform\n    _this2.options = options || {};\n    if (_this2.options.lineLength !== false) {\n      _this2.options.lineLength = _this2.options.lineLength || 76;\n    }\n    _this2._curLine = '';\n    _this2._remainingBytes = false;\n    _this2.inputBytes = 0;\n    _this2.outputBytes = 0;\n    return _this2;\n  }\n  _inherits(Encoder, _Transform);\n  return _createClass(Encoder, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      if (encoding !== 'buffer') {\n        chunk = Buffer.from(chunk, encoding);\n      }\n      if (!chunk || !chunk.length) {\n        return setImmediate(done);\n      }\n      this.inputBytes += chunk.length;\n      if (this._remainingBytes && this._remainingBytes.length) {\n        chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n        this._remainingBytes = false;\n      }\n      if (chunk.length % 3) {\n        this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n        chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n      } else {\n        this._remainingBytes = false;\n      }\n      var b64 = this._curLine + encode(chunk);\n      if (this.options.lineLength) {\n        b64 = wrap(b64, this.options.lineLength);\n\n        // remove last line as it is still most probably incomplete\n        var lastLF = b64.lastIndexOf('\\n');\n        if (lastLF < 0) {\n          this._curLine = b64;\n          b64 = '';\n        } else if (lastLF === b64.length - 1) {\n          this._curLine = '';\n        } else {\n          this._curLine = b64.substr(lastLF + 1);\n          b64 = b64.substr(0, lastLF + 1);\n        }\n      }\n      if (b64) {\n        this.outputBytes += b64.length;\n        this.push(Buffer.from(b64, 'ascii'));\n      }\n      setImmediate(done);\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(done) {\n      if (this._remainingBytes && this._remainingBytes.length) {\n        this._curLine += encode(this._remainingBytes);\n      }\n      if (this._curLine) {\n        this._curLine = wrap(this._curLine, this.options.lineLength);\n        this.outputBytes += this._curLine.length;\n        this.push(this._curLine, 'ascii');\n        this._curLine = '';\n      }\n      done();\n    }\n  }]);\n}(Transform); // expose to the world\nmodule.exports = {\n  encode: encode,\n  wrap: wrap,\n  Encoder: Encoder\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/base64/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/index.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar MessageParser = __webpack_require__(/*! ./message-parser */ \"(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\");\nvar RelaxedBody = __webpack_require__(/*! ./relaxed-body */ \"(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\");\nvar sign = __webpack_require__(/*! ./sign */ \"(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\");\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar DKIM_ALGO = 'sha256';\nvar MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\nvar DKIMSigner = /*#__PURE__*/function () {\n  function DKIMSigner(options, keys, input, output) {\n    var _this = this;\n    _classCallCheck(this, DKIMSigner);\n    this.options = options || {};\n    this.keys = keys;\n    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n    this.cacheDir = this.options.cacheDir || false;\n    this.chunks = [];\n    this.chunklen = 0;\n    this.readPos = 0;\n    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n    this.cache = false;\n    this.headers = false;\n    this.bodyHash = false;\n    this.parser = false;\n    this.relaxedBody = false;\n    this.input = input;\n    this.output = output;\n    this.output.usingCache = false;\n    this.hasErrored = false;\n    this.input.on('error', function (err) {\n      _this.hasErrored = true;\n      _this.cleanup();\n      output.emit('error', err);\n    });\n  }\n  return _createClass(DKIMSigner, [{\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (!this.cache || !this.cachePath) {\n        return;\n      }\n      fs.unlink(this.cachePath, function () {\n        return false;\n      });\n    }\n  }, {\n    key: \"createReadCache\",\n    value: function createReadCache() {\n      var _this2 = this;\n      // pipe remainings to cache file\n      this.cache = fs.createReadStream(this.cachePath);\n      this.cache.once('error', function (err) {\n        _this2.cleanup();\n        _this2.output.emit('error', err);\n      });\n      this.cache.once('close', function () {\n        _this2.cleanup();\n      });\n      this.cache.pipe(this.output);\n    }\n  }, {\n    key: \"sendNextChunk\",\n    value: function sendNextChunk() {\n      var _this3 = this;\n      if (this.hasErrored) {\n        return;\n      }\n      if (this.readPos >= this.chunks.length) {\n        if (!this.cache) {\n          return this.output.end();\n        }\n        return this.createReadCache();\n      }\n      var chunk = this.chunks[this.readPos++];\n      if (this.output.write(chunk) === false) {\n        return this.output.once('drain', function () {\n          _this3.sendNextChunk();\n        });\n      }\n      setImmediate(function () {\n        return _this3.sendNextChunk();\n      });\n    }\n  }, {\n    key: \"sendSignedOutput\",\n    value: function sendSignedOutput() {\n      var _this4 = this;\n      var keyPos = 0;\n      var signNextKey = function signNextKey() {\n        if (keyPos >= _this4.keys.length) {\n          _this4.output.write(_this4.parser.rawHeaders);\n          return setImmediate(function () {\n            return _this4.sendNextChunk();\n          });\n        }\n        var key = _this4.keys[keyPos++];\n        var dkimField = sign(_this4.headers, _this4.hashAlgo, _this4.bodyHash, {\n          domainName: key.domainName,\n          keySelector: key.keySelector,\n          privateKey: key.privateKey,\n          headerFieldNames: _this4.options.headerFieldNames,\n          skipFields: _this4.options.skipFields\n        });\n        if (dkimField) {\n          _this4.output.write(Buffer.from(dkimField + '\\r\\n'));\n        }\n        return setImmediate(signNextKey);\n      };\n      if (this.bodyHash && this.headers) {\n        return signNextKey();\n      }\n      this.output.write(this.parser.rawHeaders);\n      this.sendNextChunk();\n    }\n  }, {\n    key: \"createWriteCache\",\n    value: function createWriteCache() {\n      var _this5 = this;\n      this.output.usingCache = true;\n      // pipe remainings to cache file\n      this.cache = fs.createWriteStream(this.cachePath);\n      this.cache.once('error', function (err) {\n        _this5.cleanup();\n        // drain input\n        _this5.relaxedBody.unpipe(_this5.cache);\n        _this5.relaxedBody.on('readable', function () {\n          while (_this5.relaxedBody.read() !== null) {\n            // do nothing\n          }\n        });\n        _this5.hasErrored = true;\n        // emit error\n        _this5.output.emit('error', err);\n      });\n      this.cache.once('close', function () {\n        _this5.sendSignedOutput();\n      });\n      this.relaxedBody.removeAllListeners('readable');\n      this.relaxedBody.pipe(this.cache);\n    }\n  }, {\n    key: \"signStream\",\n    value: function signStream() {\n      var _this6 = this;\n      this.parser = new MessageParser();\n      this.relaxedBody = new RelaxedBody({\n        hashAlgo: this.hashAlgo\n      });\n      this.parser.on('headers', function (value) {\n        _this6.headers = value;\n      });\n      this.relaxedBody.on('hash', function (value) {\n        _this6.bodyHash = value;\n      });\n      this.relaxedBody.on('readable', function () {\n        var chunk;\n        if (_this6.cache) {\n          return;\n        }\n        while ((chunk = _this6.relaxedBody.read()) !== null) {\n          _this6.chunks.push(chunk);\n          _this6.chunklen += chunk.length;\n          if (_this6.chunklen >= _this6.cacheTreshold && _this6.cachePath) {\n            return _this6.createWriteCache();\n          }\n        }\n      });\n      this.relaxedBody.on('end', function () {\n        if (_this6.cache) {\n          return;\n        }\n        _this6.sendSignedOutput();\n      });\n      this.parser.pipe(this.relaxedBody);\n      setImmediate(function () {\n        return _this6.input.pipe(_this6.parser);\n      });\n    }\n  }]);\n}();\nvar DKIM = /*#__PURE__*/function () {\n  function DKIM(options) {\n    _classCallCheck(this, DKIM);\n    this.options = options || {};\n    this.keys = [].concat(this.options.keys || {\n      domainName: options.domainName,\n      keySelector: options.keySelector,\n      privateKey: options.privateKey\n    });\n  }\n  return _createClass(DKIM, [{\n    key: \"sign\",\n    value: function sign(input, extraOptions) {\n      var _this7 = this;\n      var output = new PassThrough();\n      var inputStream = input;\n      var writeValue = false;\n      if (Buffer.isBuffer(input)) {\n        writeValue = input;\n        inputStream = new PassThrough();\n      } else if (typeof input === 'string') {\n        writeValue = Buffer.from(input);\n        inputStream = new PassThrough();\n      }\n      var options = this.options;\n      if (extraOptions && Object.keys(extraOptions).length) {\n        options = {};\n        Object.keys(this.options || {}).forEach(function (key) {\n          options[key] = _this7.options[key];\n        });\n        Object.keys(extraOptions || {}).forEach(function (key) {\n          if (!(key in options)) {\n            options[key] = extraOptions[key];\n          }\n        });\n      }\n      var signer = new DKIMSigner(options, this.keys, inputStream, output);\n      setImmediate(function () {\n        signer.signStream();\n        if (writeValue) {\n          setImmediate(function () {\n            inputStream.end(writeValue);\n          });\n        }\n      });\n      return output;\n    }\n  }]);\n}();\nmodule.exports = DKIM;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/message-parser.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n\n/**\n * MessageParser instance is a transform stream that separates message headers\n * from the rest of the body. Headers are emitted with the 'headers' event. Message\n * body is passed on as the resulting stream.\n */\nvar MessageParser = /*#__PURE__*/function (_Transform) {\n  function MessageParser(options) {\n    var _this2;\n    _classCallCheck(this, MessageParser);\n    _this2 = _callSuper(this, MessageParser, [options]);\n    _this2.lastBytes = Buffer.alloc(4);\n    _this2.headersParsed = false;\n    _this2.headerBytes = 0;\n    _this2.headerChunks = [];\n    _this2.rawHeaders = false;\n    _this2.bodySize = 0;\n    return _this2;\n  }\n\n  /**\n   * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries\n   *\n   * @param {Buffer} data Next data chunk from the stream\n   */\n  _inherits(MessageParser, _Transform);\n  return _createClass(MessageParser, [{\n    key: \"updateLastBytes\",\n    value: function updateLastBytes(data) {\n      var lblen = this.lastBytes.length;\n      var nblen = Math.min(data.length, lblen);\n\n      // shift existing bytes\n      for (var i = 0, len = lblen - nblen; i < len; i++) {\n        this.lastBytes[i] = this.lastBytes[i + nblen];\n      }\n\n      // add new bytes\n      for (var _i = 1; _i <= nblen; _i++) {\n        this.lastBytes[lblen - _i] = data[data.length - _i];\n      }\n    }\n\n    /**\n     * Finds and removes message headers from the remaining body. We want to keep\n     * headers separated until final delivery to be able to modify these\n     *\n     * @param {Buffer} data Next chunk of data\n     * @return {Boolean} Returns true if headers are already found or false otherwise\n     */\n  }, {\n    key: \"checkHeaders\",\n    value: function checkHeaders(data) {\n      var _this3 = this;\n      if (this.headersParsed) {\n        return true;\n      }\n      var lblen = this.lastBytes.length;\n      var headerPos = 0;\n      this.curLinePos = 0;\n      for (var i = 0, len = this.lastBytes.length + data.length; i < len; i++) {\n        var chr = void 0;\n        if (i < lblen) {\n          chr = this.lastBytes[i];\n        } else {\n          chr = data[i - lblen];\n        }\n        if (chr === 0x0a && i) {\n          var pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];\n          var pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;\n          if (pr1 === 0x0a) {\n            this.headersParsed = true;\n            headerPos = i - lblen + 1;\n            this.headerBytes += headerPos;\n            break;\n          } else if (pr1 === 0x0d && pr2 === 0x0a) {\n            this.headersParsed = true;\n            headerPos = i - lblen + 1;\n            this.headerBytes += headerPos;\n            break;\n          }\n        }\n      }\n      if (this.headersParsed) {\n        this.headerChunks.push(data.slice(0, headerPos));\n        this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);\n        this.headerChunks = null;\n        this.emit('headers', this.parseHeaders());\n        if (data.length - 1 > headerPos) {\n          var chunk = data.slice(headerPos);\n          this.bodySize += chunk.length;\n          // this would be the first chunk of data sent downstream\n          setImmediate(function () {\n            return _this3.push(chunk);\n          });\n        }\n        return false;\n      } else {\n        this.headerBytes += data.length;\n        this.headerChunks.push(data);\n      }\n\n      // store last 4 bytes to catch header break\n      this.updateLastBytes(data);\n      return false;\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, callback) {\n      if (!chunk || !chunk.length) {\n        return callback();\n      }\n      if (typeof chunk === 'string') {\n        chunk = Buffer.from(chunk, encoding);\n      }\n      var headersFound;\n      try {\n        headersFound = this.checkHeaders(chunk);\n      } catch (E) {\n        return callback(E);\n      }\n      if (headersFound) {\n        this.bodySize += chunk.length;\n        this.push(chunk);\n      }\n      setImmediate(callback);\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      if (this.headerChunks) {\n        var chunk = Buffer.concat(this.headerChunks, this.headerBytes);\n        this.bodySize += chunk.length;\n        this.push(chunk);\n        this.headerChunks = null;\n      }\n      callback();\n    }\n  }, {\n    key: \"parseHeaders\",\n    value: function parseHeaders() {\n      var lines = (this.rawHeaders || '').toString().split(/\\r?\\n/);\n      for (var i = lines.length - 1; i > 0; i--) {\n        if (/^\\s/.test(lines[i])) {\n          lines[i - 1] += '\\n' + lines[i];\n          lines.splice(i, 1);\n        }\n      }\n      return lines.filter(function (line) {\n        return line.trim();\n      }).map(function (line) {\n        return {\n          key: line.substr(0, line.indexOf(':')).trim().toLowerCase(),\n          line: line\n        };\n      });\n    }\n  }]);\n}(Transform);\nmodule.exports = MessageParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/relaxed-body.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// streams through a message body and calculates relaxed body hash\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar RelaxedBody = /*#__PURE__*/function (_Transform) {\n  function RelaxedBody(options) {\n    var _this2;\n    _classCallCheck(this, RelaxedBody);\n    _this2 = _callSuper(this, RelaxedBody);\n    options = options || {};\n    _this2.chunkBuffer = [];\n    _this2.chunkBufferLen = 0;\n    _this2.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n    _this2.remainder = '';\n    _this2.byteLength = 0;\n    _this2.debug = options.debug;\n    _this2._debugBody = options.debug ? [] : false;\n    return _this2;\n  }\n  _inherits(RelaxedBody, _Transform);\n  return _createClass(RelaxedBody, [{\n    key: \"updateHash\",\n    value: function updateHash(chunk) {\n      var bodyStr;\n\n      // find next remainder\n      var nextRemainder = '';\n\n      // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n      // If we get another chunk that does not match this description then we can restore the previously processed data\n      var state = 'file';\n      for (var i = chunk.length - 1; i >= 0; i--) {\n        var c = chunk[i];\n        if (state === 'file' && (c === 0x0a || c === 0x0d)) {\n          // do nothing, found \\n or \\r at the end of chunk, stil end of file\n        } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n          // switch to line ending mode, this is the last non-empty line\n          state = 'line';\n        } else if (state === 'line' && (c === 0x09 || c === 0x20)) {\n          // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n        } else if (state === 'file' || state === 'line') {\n          // non line/file ending character found, switch to body mode\n          state = 'body';\n          if (i === chunk.length - 1) {\n            // final char is not part of line end or file end, so do nothing\n            break;\n          }\n        }\n        if (i === 0) {\n          // reached to the beginning of the chunk, check if it is still about the ending\n          // and if the remainder also matches\n          if (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n            // keep everything\n            this.remainder += chunk.toString('binary');\n            return;\n          } else if (state === 'line' || state === 'file') {\n            // process existing remainder as normal line but store the current chunk\n            nextRemainder = chunk.toString('binary');\n            chunk = false;\n            break;\n          }\n        }\n        if (state !== 'body') {\n          continue;\n        }\n\n        // reached first non ending byte\n        nextRemainder = chunk.slice(i + 1).toString('binary');\n        chunk = chunk.slice(0, i + 1);\n        break;\n      }\n      var needsFixing = !!this.remainder;\n      if (chunk && !needsFixing) {\n        // check if we even need to change anything\n        for (var _i = 0, len = chunk.length; _i < len; _i++) {\n          if (_i && chunk[_i] === 0x0a && chunk[_i - 1] !== 0x0d) {\n            // missing \\r before \\n\n            needsFixing = true;\n            break;\n          } else if (_i && chunk[_i] === 0x0d && chunk[_i - 1] === 0x20) {\n            // trailing WSP found\n            needsFixing = true;\n            break;\n          } else if (_i && chunk[_i] === 0x20 && chunk[_i - 1] === 0x20) {\n            // multiple spaces found, needs to be replaced with just one\n            needsFixing = true;\n            break;\n          } else if (chunk[_i] === 0x09) {\n            // TAB found, needs to be replaced with a space\n            needsFixing = true;\n            break;\n          }\n        }\n      }\n      if (needsFixing) {\n        bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n        this.remainder = nextRemainder;\n        bodyStr = bodyStr.replace(/\\r?\\n/g, '\\n') // use js line endings\n        .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n        .replace(/[ \\t]+/gm, ' ') // single spaces\n        .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n        chunk = Buffer.from(bodyStr, 'binary');\n      } else if (nextRemainder) {\n        this.remainder = nextRemainder;\n      }\n      if (this.debug) {\n        this._debugBody.push(chunk);\n      }\n      this.bodyHash.update(chunk);\n    }\n  }, {\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, callback) {\n      if (!chunk || !chunk.length) {\n        return callback();\n      }\n      if (typeof chunk === 'string') {\n        chunk = Buffer.from(chunk, encoding);\n      }\n      this.updateHash(chunk);\n      this.byteLength += chunk.length;\n      this.push(chunk);\n      callback();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      // generate final hash and emit it\n      if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n        // add terminating line end\n        this.bodyHash.update(Buffer.from('\\r\\n'));\n      }\n      if (!this.byteLength) {\n        // emit empty line buffer to keep the stream flowing\n        this.push(Buffer.from('\\r\\n'));\n        // this.bodyHash.update(Buffer.from('\\r\\n'));\n      }\n\n      this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n      callback();\n    }\n  }]);\n}(Transform);\nmodule.exports = RelaxedBody;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/sign.js":
/*!**************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/sign.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar punycode = __webpack_require__(/*! ../punycode */ \"(rsc)/./node_modules/nodemailer/lib/punycode/index.js\");\nvar mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */\n\nmodule.exports = function (headers, hashAlgo, bodyHash, options) {\n  options = options || {};\n\n  // all listed fields from RFC4871 #5.5\n  var defaultFieldNames = 'From:Sender:Reply-To:Subject:Date:Message-ID:To:' + 'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' + 'Content-Description:Resent-Date:Resent-From:Resent-Sender:' + 'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' + 'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' + 'List-Owner:List-Archive';\n  var fieldNames = options.headerFieldNames || defaultFieldNames;\n  var canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n  var dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n  var signer, signature;\n  canonicalizedHeaderData.headers += 'dkim-signature:' + relaxedHeaderLine(dkimHeader);\n  signer = crypto.createSign(('rsa-' + hashAlgo).toUpperCase());\n  signer.update(canonicalizedHeaderData.headers);\n  try {\n    signature = signer.sign(options.privateKey, 'base64');\n  } catch (E) {\n    return false;\n  }\n  return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, '$&\\r\\n ').trim();\n};\nmodule.exports.relaxedHeaders = relaxedHeaders;\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n  var dkim = ['v=1', 'a=rsa-' + hashAlgo, 'c=relaxed/relaxed', 'd=' + punycode.toASCII(domainName), 'q=dns/txt', 's=' + keySelector, 'bh=' + bodyHash, 'h=' + fieldNames].join('; ');\n  return mimeFuncs.foldLines('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n  var includedFields = new Set();\n  var skip = new Set();\n  var headerFields = new Map();\n  (skipFields || '').toLowerCase().split(':').forEach(function (field) {\n    skip.add(field.trim());\n  });\n  (fieldNames || '').toLowerCase().split(':').filter(function (field) {\n    return !skip.has(field.trim());\n  }).forEach(function (field) {\n    includedFields.add(field.trim());\n  });\n  for (var i = headers.length - 1; i >= 0; i--) {\n    var line = headers[i];\n    // only include the first value from bottom to top\n    if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n      headerFields.set(line.key, relaxedHeaderLine(line.line));\n    }\n  }\n  var headersList = [];\n  var fields = [];\n  includedFields.forEach(function (field) {\n    if (headerFields.has(field)) {\n      fields.push(field);\n      headersList.push(field + ':' + headerFields.get(field));\n    }\n  });\n  return {\n    headers: headersList.join('\\r\\n') + '\\r\\n',\n    fieldNames: fields.join(':')\n  };\n}\nfunction relaxedHeaderLine(line) {\n  return line.substr(line.indexOf(':') + 1).replace(/\\r?\\n/g, '').replace(/\\s+/g, ' ').trim();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/cookies.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// module to handle cookies\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar urllib = __webpack_require__(/*! url */ \"url\");\nvar SESSION_TIMEOUT = 1800; // 30 min\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nvar Cookies = /*#__PURE__*/function () {\n  function Cookies(options) {\n    _classCallCheck(this, Cookies);\n    this.options = options || {};\n    this.cookies = [];\n  }\n\n  /**\n   * Stores a cookie string to the cookie storage\n   *\n   * @param {String} cookieStr Value from the 'Set-Cookie:' header\n   * @param {String} url Current URL\n   */\n  return _createClass(Cookies, [{\n    key: \"set\",\n    value: function set(cookieStr, url) {\n      var urlparts = urllib.parse(url || '');\n      var cookie = this.parse(cookieStr);\n      var domain;\n      if (cookie.domain) {\n        domain = cookie.domain.replace(/^\\./, '');\n\n        // do not allow cross origin cookies\n        if (\n        // can't be valid if the requested domain is shorter than current hostname\n        urlparts.hostname.length < domain.length ||\n        // prefix domains with dot to be sure that partial matches are not used\n        ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain) {\n          cookie.domain = urlparts.hostname;\n        }\n      } else {\n        cookie.domain = urlparts.hostname;\n      }\n      if (!cookie.path) {\n        cookie.path = this.getPath(urlparts.pathname);\n      }\n\n      // if no expire date, then use sessionTimeout value\n      if (!cookie.expires) {\n        cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n      }\n      return this.add(cookie);\n    }\n\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      return this.list(url).map(function (cookie) {\n        return cookie.name + '=' + cookie.value;\n      }).join('; ');\n    }\n\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */\n  }, {\n    key: \"list\",\n    value: function list(url) {\n      var result = [];\n      var i;\n      var cookie;\n      for (i = this.cookies.length - 1; i >= 0; i--) {\n        cookie = this.cookies[i];\n        if (this.isExpired(cookie)) {\n          this.cookies.splice(i, i);\n          continue;\n        }\n        if (this.match(cookie, url)) {\n          result.unshift(cookie);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(cookieStr) {\n      var cookie = {};\n      (cookieStr || '').toString().split(';').forEach(function (cookiePart) {\n        var valueParts = cookiePart.split('=');\n        var key = valueParts.shift().trim().toLowerCase();\n        var value = valueParts.join('=').trim();\n        var domain;\n        if (!key) {\n          // skip empty parts\n          return;\n        }\n        switch (key) {\n          case 'expires':\n            value = new Date(value);\n            // ignore date if can not parse it\n            if (value.toString() !== 'Invalid Date') {\n              cookie.expires = value;\n            }\n            break;\n          case 'path':\n            cookie.path = value;\n            break;\n          case 'domain':\n            domain = value.toLowerCase();\n            if (domain.length && domain.charAt(0) !== '.') {\n              domain = '.' + domain; // ensure preceeding dot for user set domains\n            }\n\n            cookie.domain = domain;\n            break;\n          case 'max-age':\n            cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n            break;\n          case 'secure':\n            cookie.secure = true;\n            break;\n          case 'httponly':\n            cookie.httponly = true;\n            break;\n          default:\n            if (!cookie.name) {\n              cookie.name = key;\n              cookie.value = value;\n            }\n        }\n      });\n      return cookie;\n    }\n\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */\n  }, {\n    key: \"match\",\n    value: function match(cookie, url) {\n      var urlparts = urllib.parse(url || '');\n\n      // check if hostname matches\n      // .foo.com also matches subdomains, foo.com does not\n      if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n        return false;\n      }\n\n      // check if path matches\n      var path = this.getPath(urlparts.pathname);\n      if (path.substr(0, cookie.path.length) !== cookie.path) {\n        return false;\n      }\n\n      // check secure argument\n      if (cookie.secure && urlparts.protocol !== 'https:') {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */\n  }, {\n    key: \"add\",\n    value: function add(cookie) {\n      var i;\n      var len;\n\n      // nothing to do here\n      if (!cookie || !cookie.name) {\n        return false;\n      }\n\n      // overwrite if has same params\n      for (i = 0, len = this.cookies.length; i < len; i++) {\n        if (this.compare(this.cookies[i], cookie)) {\n          // check if the cookie needs to be removed instead\n          if (this.isExpired(cookie)) {\n            this.cookies.splice(i, 1); // remove expired/unset cookie\n            return false;\n          }\n          this.cookies[i] = cookie;\n          return true;\n        }\n      }\n\n      // add as new if not already expired\n      if (!this.isExpired(cookie)) {\n        this.cookies.push(cookie);\n      }\n      return true;\n    }\n\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */\n  }, {\n    key: \"isExpired\",\n    value: function isExpired(cookie) {\n      return cookie.expires && cookie.expires < new Date() || !cookie.value;\n    }\n\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */\n  }, {\n    key: \"getPath\",\n    value: function getPath(pathname) {\n      var path = (pathname || '/').split('/');\n      path.pop(); // remove filename part\n      path = path.join('/').trim();\n\n      // ensure path prefix /\n      if (path.charAt(0) !== '/') {\n        path = '/' + path;\n      }\n\n      // ensure path suffix /\n      if (path.substr(-1) !== '/') {\n        path += '/';\n      }\n      return path;\n    }\n  }]);\n}();\nmodule.exports = Cookies;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar urllib = __webpack_require__(/*! url */ \"url\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nvar Cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\");\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar net = __webpack_require__(/*! net */ \"net\");\nvar MAX_REDIRECTS = 5;\nmodule.exports = function (url, options) {\n  return nmfetch(url, options);\n};\nmodule.exports.Cookies = Cookies;\nfunction nmfetch(url, options) {\n  options = options || {};\n  options.fetchRes = options.fetchRes || new PassThrough();\n  options.cookies = options.cookies || new Cookies();\n  options.redirects = options.redirects || 0;\n  options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n  if (options.cookie) {\n    [].concat(options.cookie || []).forEach(function (cookie) {\n      options.cookies.set(cookie, url);\n    });\n    options.cookie = false;\n  }\n  var fetchRes = options.fetchRes;\n  var parsed = urllib.parse(url);\n  var method = (options.method || '').toString().trim().toUpperCase() || 'GET';\n  var finished = false;\n  var cookies;\n  var body;\n  var handler = parsed.protocol === 'https:' ? https : http;\n  var headers = {\n    'accept-encoding': 'gzip,deflate',\n    'user-agent': 'nodemailer/' + packageData.version\n  };\n  Object.keys(options.headers || {}).forEach(function (key) {\n    headers[key.toLowerCase().trim()] = options.headers[key];\n  });\n  if (options.userAgent) {\n    headers['user-agent'] = options.userAgent;\n  }\n  if (parsed.auth) {\n    headers.Authorization = 'Basic ' + Buffer.from(parsed.auth).toString('base64');\n  }\n  if (cookies = options.cookies.get(url)) {\n    headers.cookie = cookies;\n  }\n  if (options.body) {\n    if (options.contentType !== false) {\n      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n    }\n    if (typeof options.body.pipe === 'function') {\n      // it's a stream\n      headers['Transfer-Encoding'] = 'chunked';\n      body = options.body;\n      body.on('error', function (err) {\n        if (finished) {\n          return;\n        }\n        finished = true;\n        err.type = 'FETCH';\n        err.sourceUrl = url;\n        fetchRes.emit('error', err);\n      });\n    } else {\n      if (options.body instanceof Buffer) {\n        body = options.body;\n      } else if (_typeof(options.body) === 'object') {\n        try {\n          // encodeURIComponent can fail on invalid input (partial emoji etc.)\n          body = Buffer.from(Object.keys(options.body).map(function (key) {\n            var value = options.body[key].toString().trim();\n            return encodeURIComponent(key) + '=' + encodeURIComponent(value);\n          }).join('&'));\n        } catch (E) {\n          if (finished) {\n            return;\n          }\n          finished = true;\n          E.type = 'FETCH';\n          E.sourceUrl = url;\n          fetchRes.emit('error', E);\n          return;\n        }\n      } else {\n        body = Buffer.from(options.body.toString().trim());\n      }\n      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n      headers['Content-Length'] = body.length;\n    }\n    // if method is not provided, use POST instead of GET\n    method = (options.method || '').toString().trim().toUpperCase() || 'POST';\n  }\n  var req;\n  var reqOptions = {\n    method: method,\n    host: parsed.hostname,\n    path: parsed.path,\n    port: parsed.port ? parsed.port : parsed.protocol === 'https:' ? 443 : 80,\n    headers: headers,\n    rejectUnauthorized: false,\n    agent: false\n  };\n  if (options.tls) {\n    Object.keys(options.tls).forEach(function (key) {\n      reqOptions[key] = options.tls[key];\n    });\n  }\n  if (parsed.protocol === 'https:' && parsed.hostname && parsed.hostname !== reqOptions.host && !net.isIP(parsed.hostname) && !reqOptions.servername) {\n    reqOptions.servername = parsed.hostname;\n  }\n  try {\n    req = handler.request(reqOptions);\n  } catch (E) {\n    finished = true;\n    setImmediate(function () {\n      E.type = 'FETCH';\n      E.sourceUrl = url;\n      fetchRes.emit('error', E);\n    });\n    return fetchRes;\n  }\n  if (options.timeout) {\n    req.setTimeout(options.timeout, function () {\n      if (finished) {\n        return;\n      }\n      finished = true;\n      req.abort();\n      var err = new Error('Request Timeout');\n      err.type = 'FETCH';\n      err.sourceUrl = url;\n      fetchRes.emit('error', err);\n    });\n  }\n  req.on('error', function (err) {\n    if (finished) {\n      return;\n    }\n    finished = true;\n    err.type = 'FETCH';\n    err.sourceUrl = url;\n    fetchRes.emit('error', err);\n  });\n  req.on('response', function (res) {\n    var inflate;\n    if (finished) {\n      return;\n    }\n    switch (res.headers['content-encoding']) {\n      case 'gzip':\n      case 'deflate':\n        inflate = zlib.createUnzip();\n        break;\n    }\n    if (res.headers['set-cookie']) {\n      [].concat(res.headers['set-cookie'] || []).forEach(function (cookie) {\n        options.cookies.set(cookie, url);\n      });\n    }\n    if ([301, 302, 303, 307, 308].includes(res.statusCode) && res.headers.location) {\n      // redirect\n      options.redirects++;\n      if (options.redirects > options.maxRedirects) {\n        finished = true;\n        var err = new Error('Maximum redirect count exceeded');\n        err.type = 'FETCH';\n        err.sourceUrl = url;\n        fetchRes.emit('error', err);\n        req.abort();\n        return;\n      }\n      // redirect does not include POST body\n      options.method = 'GET';\n      options.body = false;\n      return nmfetch(urllib.resolve(url, res.headers.location), options);\n    }\n    fetchRes.statusCode = res.statusCode;\n    fetchRes.headers = res.headers;\n    if (res.statusCode >= 300 && !options.allowErrorResponse) {\n      finished = true;\n      var _err = new Error('Invalid status code ' + res.statusCode);\n      _err.type = 'FETCH';\n      _err.sourceUrl = url;\n      fetchRes.emit('error', _err);\n      req.abort();\n      return;\n    }\n    res.on('error', function (err) {\n      if (finished) {\n        return;\n      }\n      finished = true;\n      err.type = 'FETCH';\n      err.sourceUrl = url;\n      fetchRes.emit('error', err);\n      req.abort();\n    });\n    if (inflate) {\n      res.pipe(inflate).pipe(fetchRes);\n      inflate.on('error', function (err) {\n        if (finished) {\n          return;\n        }\n        finished = true;\n        err.type = 'FETCH';\n        err.sourceUrl = url;\n        fetchRes.emit('error', err);\n        req.abort();\n      });\n    } else {\n      res.pipe(fetchRes);\n    }\n  });\n  setImmediate(function () {\n    if (body) {\n      try {\n        if (typeof body.pipe === 'function') {\n          return body.pipe(req);\n        } else {\n          req.write(body);\n        }\n      } catch (err) {\n        finished = true;\n        err.type = 'FETCH';\n        err.sourceUrl = url;\n        fetchRes.emit('error', err);\n        return;\n      }\n    }\n    req.end();\n  });\n  return fetchRes;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/json-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/json-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nvar JSONTransport = /*#__PURE__*/function () {\n  function JSONTransport(options) {\n    _classCallCheck(this, JSONTransport);\n    options = options || {};\n    this.options = options || {};\n    this.name = 'JSONTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'json-transport'\n    });\n  }\n\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  return _createClass(JSONTransport, [{\n    key: \"send\",\n    value: function send(mail, done) {\n      var _this = this;\n      // Sendmail strips this header line by itself\n      mail.message.keepBcc = true;\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));\n      setImmediate(function () {\n        mail.normalize(function (err, data) {\n          if (err) {\n            _this.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed building JSON structure for %s. %s', messageId, err.message);\n            return done(err);\n          }\n          delete data.envelope;\n          delete data.normalizedHeaders;\n          return done(null, {\n            envelope: envelope,\n            messageId: messageId,\n            message: _this.options.skipEncoding ? data : JSON.stringify(data)\n          });\n        });\n      });\n    }\n  }]);\n}();\nmodule.exports = JSONTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mail-composer/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0 */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nvar mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nvar parseDataURI = (__webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\").parseDataURI);\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nvar MailComposer = /*#__PURE__*/function () {\n  function MailComposer(mail) {\n    _classCallCheck(this, MailComposer);\n    this.mail = mail || {};\n    this.message = false;\n  }\n\n  /**\n   * Builds MimeNode instance\n   */\n  return _createClass(MailComposer, [{\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n      this._alternatives = this.getAlternatives();\n      this._htmlNode = this._alternatives.filter(function (alternative) {\n        return /^text\\/html\\b/i.test(alternative.contentType);\n      }).pop();\n      this._attachments = this.getAttachments(!!this._htmlNode);\n      this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n      this._useAlternative = this._alternatives.length > 1;\n      this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;\n\n      // Compose MIME tree\n      if (this.mail.raw) {\n        this.message = new MimeNode('message/rfc822', {\n          newline: this.mail.newline\n        }).setRaw(this.mail.raw);\n      } else if (this._useMixed) {\n        this.message = this._createMixed();\n      } else if (this._useAlternative) {\n        this.message = this._createAlternative();\n      } else if (this._useRelated) {\n        this.message = this._createRelated();\n      } else {\n        this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n          contentType: 'text/plain',\n          content: ''\n        });\n      }\n\n      // Add custom headers\n      if (this.mail.headers) {\n        this.message.addHeader(this.mail.headers);\n      }\n\n      // Add headers to the root node, always overrides custom headers\n      ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(function (header) {\n        var key = header.replace(/-(\\w)/g, function (o, c) {\n          return c.toUpperCase();\n        });\n        if (_this.mail[key]) {\n          _this.message.setHeader(header, _this.mail[key]);\n        }\n      });\n\n      // Sets custom envelope\n      if (this.mail.envelope) {\n        this.message.setEnvelope(this.mail.envelope);\n      }\n\n      // ensure Message-Id value\n      this.message.messageId();\n      return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments(findRelated) {\n      var _this2 = this;\n      var icalEvent, eventObject;\n      var attachments = [].concat(this.mail.attachments || []).map(function (attachment, i) {\n        var data;\n        var isMessageNode = /^message\\//i.test(attachment.contentType);\n        if (/^data:/i.test(attachment.path || attachment.href)) {\n          attachment = _this2._processDataUrl(attachment);\n        }\n        var contentType = attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n        var isImage = /^image\\//i.test(contentType);\n        var contentDisposition = attachment.contentDisposition || (isMessageNode || isImage && attachment.cid ? 'inline' : 'attachment');\n        data = {\n          contentType: contentType,\n          contentDisposition: contentDisposition,\n          contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n        };\n        if (attachment.filename) {\n          data.filename = attachment.filename;\n        } else if (!isMessageNode && attachment.filename !== false) {\n          data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n          if (data.filename.indexOf('.') < 0) {\n            data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n          }\n        }\n        if (/^https?:\\/\\//i.test(attachment.path)) {\n          attachment.href = attachment.path;\n          attachment.path = undefined;\n        }\n        if (attachment.cid) {\n          data.cid = attachment.cid;\n        }\n        if (attachment.raw) {\n          data.raw = attachment.raw;\n        } else if (attachment.path) {\n          data.content = {\n            path: attachment.path\n          };\n        } else if (attachment.href) {\n          data.content = {\n            href: attachment.href,\n            httpHeaders: attachment.httpHeaders\n          };\n        } else {\n          data.content = attachment.content || '';\n        }\n        if (attachment.encoding) {\n          data.encoding = attachment.encoding;\n        }\n        if (attachment.headers) {\n          data.headers = attachment.headers;\n        }\n        return data;\n      });\n      if (this.mail.icalEvent) {\n        if (_typeof(this.mail.icalEvent) === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n          icalEvent = this.mail.icalEvent;\n        } else {\n          icalEvent = {\n            content: this.mail.icalEvent\n          };\n        }\n        eventObject = {};\n        Object.keys(icalEvent).forEach(function (key) {\n          eventObject[key] = icalEvent[key];\n        });\n        eventObject.contentType = 'application/ics';\n        if (!eventObject.headers) {\n          eventObject.headers = {};\n        }\n        eventObject.filename = eventObject.filename || 'invite.ics';\n        eventObject.headers['Content-Disposition'] = 'attachment';\n        eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n      }\n      if (!findRelated) {\n        return {\n          attached: attachments.concat(eventObject || []),\n          related: []\n        };\n      } else {\n        return {\n          attached: attachments.filter(function (attachment) {\n            return !attachment.cid;\n          }).concat(eventObject || []),\n          related: attachments.filter(function (attachment) {\n            return !!attachment.cid;\n          })\n        };\n      }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n  }, {\n    key: \"getAlternatives\",\n    value: function getAlternatives() {\n      var _this3 = this;\n      var alternatives = [],\n        text,\n        html,\n        watchHtml,\n        amp,\n        icalEvent,\n        eventObject;\n      if (this.mail.text) {\n        if (_typeof(this.mail.text) === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n          text = this.mail.text;\n        } else {\n          text = {\n            content: this.mail.text\n          };\n        }\n        text.contentType = 'text/plain; charset=utf-8';\n      }\n      if (this.mail.watchHtml) {\n        if (_typeof(this.mail.watchHtml) === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n          watchHtml = this.mail.watchHtml;\n        } else {\n          watchHtml = {\n            content: this.mail.watchHtml\n          };\n        }\n        watchHtml.contentType = 'text/watch-html; charset=utf-8';\n      }\n      if (this.mail.amp) {\n        if (_typeof(this.mail.amp) === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n          amp = this.mail.amp;\n        } else {\n          amp = {\n            content: this.mail.amp\n          };\n        }\n        amp.contentType = 'text/x-amp-html; charset=utf-8';\n      }\n\n      // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n      if (this.mail.icalEvent) {\n        if (_typeof(this.mail.icalEvent) === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n          icalEvent = this.mail.icalEvent;\n        } else {\n          icalEvent = {\n            content: this.mail.icalEvent\n          };\n        }\n        eventObject = {};\n        Object.keys(icalEvent).forEach(function (key) {\n          eventObject[key] = icalEvent[key];\n        });\n        if (eventObject.content && _typeof(eventObject.content) === 'object') {\n          // we are going to have the same attachment twice, so mark this to be\n          // resolved just once\n          eventObject.content._resolve = true;\n        }\n        eventObject.filename = false;\n        eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n        if (!eventObject.headers) {\n          eventObject.headers = {};\n        }\n      }\n      if (this.mail.html) {\n        if (_typeof(this.mail.html) === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n          html = this.mail.html;\n        } else {\n          html = {\n            content: this.mail.html\n          };\n        }\n        html.contentType = 'text/html; charset=utf-8';\n      }\n      [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(function (alternative) {\n        var data;\n        if (/^data:/i.test(alternative.path || alternative.href)) {\n          alternative = _this3._processDataUrl(alternative);\n        }\n        data = {\n          contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n          contentTransferEncoding: alternative.contentTransferEncoding\n        };\n        if (alternative.filename) {\n          data.filename = alternative.filename;\n        }\n        if (/^https?:\\/\\//i.test(alternative.path)) {\n          alternative.href = alternative.path;\n          alternative.path = undefined;\n        }\n        if (alternative.raw) {\n          data.raw = alternative.raw;\n        } else if (alternative.path) {\n          data.content = {\n            path: alternative.path\n          };\n        } else if (alternative.href) {\n          data.content = {\n            href: alternative.href\n          };\n        } else {\n          data.content = alternative.content || '';\n        }\n        if (alternative.encoding) {\n          data.encoding = alternative.encoding;\n        }\n        if (alternative.headers) {\n          data.headers = alternative.headers;\n        }\n        alternatives.push(data);\n      });\n      return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createMixed\",\n    value: function _createMixed(parentNode) {\n      var _this4 = this;\n      var node;\n      if (!parentNode) {\n        node = new MimeNode('multipart/mixed', {\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild('multipart/mixed', {\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n      if (this._useAlternative) {\n        this._createAlternative(node);\n      } else if (this._useRelated) {\n        this._createRelated(node);\n      }\n      [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(function (element) {\n        // if the element is a html node from related subpart then ignore it\n        if (!_this4._useRelated || element !== _this4._htmlNode) {\n          _this4._createContentNode(node, element);\n        }\n      });\n      return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createAlternative\",\n    value: function _createAlternative(parentNode) {\n      var _this5 = this;\n      var node;\n      if (!parentNode) {\n        node = new MimeNode('multipart/alternative', {\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild('multipart/alternative', {\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n      this._alternatives.forEach(function (alternative) {\n        if (_this5._useRelated && _this5._htmlNode === alternative) {\n          _this5._createRelated(node);\n        } else {\n          _this5._createContentNode(node, alternative);\n        }\n      });\n      return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createRelated\",\n    value: function _createRelated(parentNode) {\n      var _this6 = this;\n      var node;\n      if (!parentNode) {\n        node = new MimeNode('multipart/related; type=\"text/html\"', {\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n      this._createContentNode(node, this._htmlNode);\n      this._attachments.related.forEach(function (alternative) {\n        return _this6._createContentNode(node, alternative);\n      });\n      return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n  }, {\n    key: \"_createContentNode\",\n    value: function _createContentNode(parentNode, element) {\n      element = element || {};\n      element.content = element.content || '';\n      var node;\n      var encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n      if (!parentNode) {\n        node = new MimeNode(element.contentType, {\n          filename: element.filename,\n          baseBoundary: this.mail.baseBoundary,\n          textEncoding: this.mail.textEncoding,\n          boundaryPrefix: this.mail.boundaryPrefix,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      } else {\n        node = parentNode.createChild(element.contentType, {\n          filename: element.filename,\n          textEncoding: this.mail.textEncoding,\n          disableUrlAccess: this.mail.disableUrlAccess,\n          disableFileAccess: this.mail.disableFileAccess,\n          normalizeHeaderKey: this.mail.normalizeHeaderKey,\n          newline: this.mail.newline\n        });\n      }\n\n      // add custom headers\n      if (element.headers) {\n        node.addHeader(element.headers);\n      }\n      if (element.cid) {\n        node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n      }\n      if (element.contentTransferEncoding) {\n        node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n      } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n        node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n      }\n      if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n        node.setHeader('Content-Disposition', element.contentDisposition || (element.cid && /^image\\//i.test(element.contentType) ? 'inline' : 'attachment'));\n      }\n      if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n        element.content = Buffer.from(element.content, encoding);\n      }\n\n      // prefer pregenerated raw content\n      if (element.raw) {\n        node.setRaw(element.raw);\n      } else {\n        node.setContent(element.content);\n      }\n      return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n  }, {\n    key: \"_processDataUrl\",\n    value: function _processDataUrl(element) {\n      var parsedDataUri;\n      if ((element.path || element.href).match(/^data:/)) {\n        parsedDataUri = parseDataURI(element.path || element.href);\n      }\n      if (!parsedDataUri) {\n        return element;\n      }\n      element.content = parsedDataUri.data;\n      element.contentType = element.contentType || parsedDataUri.contentType;\n      if ('path' in element) {\n        element.path = false;\n      }\n      if ('href' in element) {\n        element.href = false;\n      }\n      return element;\n    }\n  }]);\n}();\nmodule.exports = MailComposer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWFpbC1jb21wb3Nlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFYTs7QUFBQSxTQUFBQSxRQUFBQyxDQUFBLHNDQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxrQkFBQUEsQ0FBQSxnQkFBQUEsQ0FBQSxXQUFBQSxDQUFBLHlCQUFBQyxNQUFBLElBQUFELENBQUEsQ0FBQUcsV0FBQSxLQUFBRixNQUFBLElBQUFELENBQUEsS0FBQUMsTUFBQSxDQUFBRyxTQUFBLHFCQUFBSixDQUFBLEtBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUFBLFNBQUFLLGdCQUFBQyxRQUFBLEVBQUFDLFdBQUEsVUFBQUQsUUFBQSxZQUFBQyxXQUFBLGVBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQUMsTUFBQSxFQUFBQyxLQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxLQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxVQUFBLEdBQUFILEtBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxVQUFBLENBQUFDLFVBQUEsR0FBQUQsVUFBQSxDQUFBQyxVQUFBLFdBQUFELFVBQUEsQ0FBQUUsWUFBQSx3QkFBQUYsVUFBQSxFQUFBQSxVQUFBLENBQUFHLFFBQUEsU0FBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFULE1BQUEsRUFBQVUsY0FBQSxDQUFBTixVQUFBLENBQUFPLEdBQUEsR0FBQVAsVUFBQTtBQUFBLFNBQUFRLGFBQUFmLFdBQUEsRUFBQWdCLFVBQUEsRUFBQUMsV0FBQSxRQUFBRCxVQUFBLEVBQUFkLGlCQUFBLENBQUFGLFdBQUEsQ0FBQUgsU0FBQSxFQUFBbUIsVUFBQSxPQUFBQyxXQUFBLEVBQUFmLGlCQUFBLENBQUFGLFdBQUEsRUFBQWlCLFdBQUEsR0FBQU4sTUFBQSxDQUFBQyxjQUFBLENBQUFaLFdBQUEsaUJBQUFVLFFBQUEsbUJBQUFWLFdB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LEdBQUcsQ0FBQztNQUM1QixDQUFDLE1BQU07UUFDSDBELElBQUksQ0FBQ2UsVUFBVSxDQUFDUCxPQUFPLENBQUN6RCxPQUFPLENBQUM7TUFDcEM7TUFFQSxPQUFPaUQsSUFBSTtJQUNmOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxJO0lBQUFsRyxHQUFBO0lBQUFzQixLQUFBLEVBTUEsU0FBQWtELGdCQUFnQmtDLE9BQU8sRUFBRTtNQUNyQixJQUFJUSxhQUFhO01BQ2pCLElBQUksQ0FBQ1IsT0FBTyxDQUFDcEMsSUFBSSxJQUFJb0MsT0FBTyxDQUFDbkMsSUFBSSxFQUFFNEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ2hERCxhQUFhLEdBQUdoRyxZQUFZLENBQUN3RixPQUFPLENBQUNwQyxJQUFJLElBQUlvQyxPQUFPLENBQUNuQyxJQUFJLENBQUM7TUFDOUQ7TUFFQSxJQUFJLENBQUMyQyxhQUFhLEVBQUU7UUFDaEIsT0FBT1IsT0FBTztNQUNsQjtNQUVBQSxPQUFPLENBQUN6RCxPQUFPLEdBQUdpRSxhQUFhLENBQUM5QyxJQUFJO01BQ3BDc0MsT0FBTyxDQUFDM0UsV0FBVyxHQUFHMkUsT0FBTyxDQUFDM0UsV0FBVyxJQUFJbUYsYUFBYSxDQUFDbkYsV0FBVztNQUV0RSxJQUFJLE1BQU0sSUFBSTJFLE9BQU8sRUFBRTtRQUNuQkEsT0FBTyxDQUFDcEMsSUFBSSxHQUFHLEtBQUs7TUFDeEI7TUFFQSxJQUFJLE1BQU0sSUFBSW9DLE9BQU8sRUFBRTtRQUNuQkEsT0FBTyxDQUFDbkMsSUFBSSxHQUFHLEtBQUs7TUFDeEI7TUFFQSxPQUFPbUMsT0FBTztJQUNsQjtFQUFDO0FBQUE7QUFHTFUsTUFBTSxDQUFDQyxPQUFPLEdBQUdsRyxZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlkdmlkLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWFpbC1jb21wb3Nlci9pbmRleC5qcz8zMDU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby11bmRlZmluZWQ6IDAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNaW1lTm9kZSA9IHJlcXVpcmUoJy4uL21pbWUtbm9kZScpO1xuY29uc3QgbWltZUZ1bmNzID0gcmVxdWlyZSgnLi4vbWltZS1mdW5jcycpO1xuY29uc3QgcGFyc2VEYXRhVVJJID0gcmVxdWlyZSgnLi4vc2hhcmVkJykucGFyc2VEYXRhVVJJO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIG9iamVjdCBmb3IgY29tcG9zaW5nIGEgTWltZU5vZGUgaW5zdGFuY2Ugb3V0IGZyb20gdGhlIG1haWwgb3B0aW9uc1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG1haWwgTWFpbCBvcHRpb25zXG4gKi9cbmNsYXNzIE1haWxDb21wb3NlciB7XG4gICAgY29uc3RydWN0b3IobWFpbCkge1xuICAgICAgICB0aGlzLm1haWwgPSBtYWlsIHx8IHt9O1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgTWltZU5vZGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjb21waWxlKCkge1xuICAgICAgICB0aGlzLl9hbHRlcm5hdGl2ZXMgPSB0aGlzLmdldEFsdGVybmF0aXZlcygpO1xuICAgICAgICB0aGlzLl9odG1sTm9kZSA9IHRoaXMuX2FsdGVybmF0aXZlcy5maWx0ZXIoYWx0ZXJuYXRpdmUgPT4gL150ZXh0XFwvaHRtbFxcYi9pLnRlc3QoYWx0ZXJuYXRpdmUuY29udGVudFR5cGUpKS5wb3AoKTtcbiAgICAgICAgdGhpcy5fYXR0YWNobWVudHMgPSB0aGlzLmdldEF0dGFjaG1lbnRzKCEhdGhpcy5faHRtbE5vZGUpO1xuXG4gICAgICAgIHRoaXMuX3VzZVJlbGF0ZWQgPSAhISh0aGlzLl9odG1sTm9kZSAmJiB0aGlzLl9hdHRhY2htZW50cy5yZWxhdGVkLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX3VzZUFsdGVybmF0aXZlID0gdGhpcy5fYWx0ZXJuYXRpdmVzLmxlbmd0aCA+IDE7XG4gICAgICAgIHRoaXMuX3VzZU1peGVkID0gdGhpcy5fYXR0YWNobWVudHMuYXR0YWNoZWQubGVuZ3RoID4gMSB8fCAodGhpcy5fYWx0ZXJuYXRpdmVzLmxlbmd0aCAmJiB0aGlzLl9hdHRhY2htZW50cy5hdHRhY2hlZC5sZW5ndGggPT09IDEpO1xuXG4gICAgICAgIC8vIENvbXBvc2UgTUlNRSB0cmVlXG4gICAgICAgIGlmICh0aGlzLm1haWwucmF3KSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBuZXcgTWltZU5vZGUoJ21lc3NhZ2UvcmZjODIyJywgeyBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZSB9KS5zZXRSYXcodGhpcy5tYWlsLnJhdyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdXNlTWl4ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuX2NyZWF0ZU1peGVkKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdXNlQWx0ZXJuYXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuX2NyZWF0ZUFsdGVybmF0aXZlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdXNlUmVsYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5fY3JlYXRlUmVsYXRlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5fY3JlYXRlQ29udGVudE5vZGUoXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCh0aGlzLl9hbHRlcm5hdGl2ZXMgfHwgW10pXG4gICAgICAgICAgICAgICAgICAgIC5jb25jYXQodGhpcy5fYXR0YWNobWVudHMuYXR0YWNoZWQgfHwgW10pXG4gICAgICAgICAgICAgICAgICAgIC5zaGlmdCgpIHx8IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICd0ZXh0L3BsYWluJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGN1c3RvbSBoZWFkZXJzXG4gICAgICAgIGlmICh0aGlzLm1haWwuaGVhZGVycykge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlLmFkZEhlYWRlcih0aGlzLm1haWwuaGVhZGVycyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcm9vdCBub2RlLCBhbHdheXMgb3ZlcnJpZGVzIGN1c3RvbSBoZWFkZXJzXG4gICAgICAgIFsnZnJvbScsICdzZW5kZXInLCAndG8nLCAnY2MnLCAnYmNjJywgJ3JlcGx5LXRvJywgJ2luLXJlcGx5LXRvJywgJ3JlZmVyZW5jZXMnLCAnc3ViamVjdCcsICdtZXNzYWdlLWlkJywgJ2RhdGUnXS5mb3JFYWNoKGhlYWRlciA9PiB7XG4gICAgICAgICAgICBsZXQga2V5ID0gaGVhZGVyLnJlcGxhY2UoLy0oXFx3KS9nLCAobywgYykgPT4gYy50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1haWxba2V5XSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS5zZXRIZWFkZXIoaGVhZGVyLCB0aGlzLm1haWxba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNldHMgY3VzdG9tIGVudmVsb3BlXG4gICAgICAgIGlmICh0aGlzLm1haWwuZW52ZWxvcGUpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZS5zZXRFbnZlbG9wZSh0aGlzLm1haWwuZW52ZWxvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5zdXJlIE1lc3NhZ2UtSWQgdmFsdWVcbiAgICAgICAgdGhpcy5tZXNzYWdlLm1lc3NhZ2VJZCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCBhbGwgYXR0YWNobWVudHMuIFJlc3VsdGluZyBhdHRhY2htZW50IG9iamVjdHMgY2FuIGJlIHVzZWQgYXMgaW5wdXQgZm9yIE1pbWVOb2RlIG5vZGVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpbmRSZWxhdGVkIElmIHRydWUgc2VwYXJhdGUgcmVsYXRlZCBhdHRhY2htZW50cyBmcm9tIGF0dGFjaGVkIG9uZXNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3Qgb2YgYXJyYXlzIChgcmVsYXRlZGAgYW5kIGBhdHRhY2hlZGApXG4gICAgICovXG4gICAgZ2V0QXR0YWNobWVudHMoZmluZFJlbGF0ZWQpIHtcbiAgICAgICAgbGV0IGljYWxFdmVudCwgZXZlbnRPYmplY3Q7XG4gICAgICAgIGxldCBhdHRhY2htZW50cyA9IFtdLmNvbmNhdCh0aGlzLm1haWwuYXR0YWNobWVudHMgfHwgW10pLm1hcCgoYXR0YWNobWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICBsZXQgaXNNZXNzYWdlTm9kZSA9IC9ebWVzc2FnZVxcLy9pLnRlc3QoYXR0YWNobWVudC5jb250ZW50VHlwZSk7XG5cbiAgICAgICAgICAgIGlmICgvXmRhdGE6L2kudGVzdChhdHRhY2htZW50LnBhdGggfHwgYXR0YWNobWVudC5ocmVmKSkge1xuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQgPSB0aGlzLl9wcm9jZXNzRGF0YVVybChhdHRhY2htZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNvbnRlbnRUeXBlID0gYXR0YWNobWVudC5jb250ZW50VHlwZSB8fCBtaW1lRnVuY3MuZGV0ZWN0TWltZVR5cGUoYXR0YWNobWVudC5maWxlbmFtZSB8fCBhdHRhY2htZW50LnBhdGggfHwgYXR0YWNobWVudC5ocmVmIHx8ICdiaW4nKTtcbiAgICAgICAgICAgIGxldCBpc0ltYWdlID0gL15pbWFnZVxcLy9pLnRlc3QoY29udGVudFR5cGUpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnREaXNwb3NpdGlvbiA9IGF0dGFjaG1lbnQuY29udGVudERpc3Bvc2l0aW9uIHx8IChpc01lc3NhZ2VOb2RlIHx8IChpc0ltYWdlICYmIGF0dGFjaG1lbnQuY2lkKSA/ICdpbmxpbmUnIDogJ2F0dGFjaG1lbnQnKTtcblxuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgY29udGVudFRyYW5zZmVyRW5jb2Rpbmc6ICdjb250ZW50VHJhbnNmZXJFbmNvZGluZycgaW4gYXR0YWNobWVudCA/IGF0dGFjaG1lbnQuY29udGVudFRyYW5zZmVyRW5jb2RpbmcgOiAnYmFzZTY0J1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnQuZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmZpbGVuYW1lID0gYXR0YWNobWVudC5maWxlbmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTWVzc2FnZU5vZGUgJiYgYXR0YWNobWVudC5maWxlbmFtZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmZpbGVuYW1lID0gKGF0dGFjaG1lbnQucGF0aCB8fCBhdHRhY2htZW50LmhyZWYgfHwgJycpLnNwbGl0KCcvJykucG9wKCkuc3BsaXQoJz8nKS5zaGlmdCgpIHx8ICdhdHRhY2htZW50LScgKyAoaSArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmZpbGVuYW1lLmluZGV4T2YoJy4nKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5maWxlbmFtZSArPSAnLicgKyBtaW1lRnVuY3MuZGV0ZWN0RXh0ZW5zaW9uKGRhdGEuY29udGVudFR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QoYXR0YWNobWVudC5wYXRoKSkge1xuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQuaHJlZiA9IGF0dGFjaG1lbnQucGF0aDtcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50LnBhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhdHRhY2htZW50LmNpZCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY2lkID0gYXR0YWNobWVudC5jaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhdHRhY2htZW50LnJhdykge1xuICAgICAgICAgICAgICAgIGRhdGEucmF3ID0gYXR0YWNobWVudC5yYXc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGFjaG1lbnQucGF0aCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXR0YWNobWVudC5wYXRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudC5ocmVmKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBocmVmOiBhdHRhY2htZW50LmhyZWYsXG4gICAgICAgICAgICAgICAgICAgIGh0dHBIZWFkZXJzOiBhdHRhY2htZW50Lmh0dHBIZWFkZXJzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0gYXR0YWNobWVudC5jb250ZW50IHx8ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXR0YWNobWVudC5lbmNvZGluZykge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5jb2RpbmcgPSBhdHRhY2htZW50LmVuY29kaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXR0YWNobWVudC5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5oZWFkZXJzID0gYXR0YWNobWVudC5oZWFkZXJzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMubWFpbC5pY2FsRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5tYWlsLmljYWxFdmVudCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5tYWlsLmljYWxFdmVudC5jb250ZW50IHx8IHRoaXMubWFpbC5pY2FsRXZlbnQucGF0aCB8fCB0aGlzLm1haWwuaWNhbEV2ZW50LmhyZWYgfHwgdGhpcy5tYWlsLmljYWxFdmVudC5yYXcpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpY2FsRXZlbnQgPSB0aGlzLm1haWwuaWNhbEV2ZW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpY2FsRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMubWFpbC5pY2FsRXZlbnRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoaWNhbEV2ZW50KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnRPYmplY3Rba2V5XSA9IGljYWxFdmVudFtrZXldO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2ljcyc7XG4gICAgICAgICAgICBpZiAoIWV2ZW50T2JqZWN0LmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBldmVudE9iamVjdC5oZWFkZXJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudE9iamVjdC5maWxlbmFtZSA9IGV2ZW50T2JqZWN0LmZpbGVuYW1lIHx8ICdpbnZpdGUuaWNzJztcbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmhlYWRlcnNbJ0NvbnRlbnQtRGlzcG9zaXRpb24nXSA9ICdhdHRhY2htZW50JztcbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmhlYWRlcnNbJ0NvbnRlbnQtVHJhbnNmZXItRW5jb2RpbmcnXSA9ICdiYXNlNjQnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmaW5kUmVsYXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhdHRhY2hlZDogYXR0YWNobWVudHMuY29uY2F0KGV2ZW50T2JqZWN0IHx8IFtdKSxcbiAgICAgICAgICAgICAgICByZWxhdGVkOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXR0YWNoZWQ6IGF0dGFjaG1lbnRzLmZpbHRlcihhdHRhY2htZW50ID0+ICFhdHRhY2htZW50LmNpZCkuY29uY2F0KGV2ZW50T2JqZWN0IHx8IFtdKSxcbiAgICAgICAgICAgICAgICByZWxhdGVkOiBhdHRhY2htZW50cy5maWx0ZXIoYXR0YWNobWVudCA9PiAhIWF0dGFjaG1lbnQuY2lkKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgYWx0ZXJuYXRpdmVzLiBSZXN1bHRpbmcgb2JqZWN0cyBjYW4gYmUgdXNlZCBhcyBpbnB1dCBmb3IgTWltZU5vZGUgbm9kZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgYWx0ZXJuYXRpdmUgZWxlbWVudHMuIEluY2x1ZGVzIHRoZSBgdGV4dGAgYW5kIGBodG1sYCB2YWx1ZXMgYXMgd2VsbFxuICAgICAqL1xuICAgIGdldEFsdGVybmF0aXZlcygpIHtcbiAgICAgICAgbGV0IGFsdGVybmF0aXZlcyA9IFtdLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICB3YXRjaEh0bWwsXG4gICAgICAgICAgICBhbXAsXG4gICAgICAgICAgICBpY2FsRXZlbnQsXG4gICAgICAgICAgICBldmVudE9iamVjdDtcblxuICAgICAgICBpZiAodGhpcy5tYWlsLnRleHQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5tYWlsLnRleHQgPT09ICdvYmplY3QnICYmICh0aGlzLm1haWwudGV4dC5jb250ZW50IHx8IHRoaXMubWFpbC50ZXh0LnBhdGggfHwgdGhpcy5tYWlsLnRleHQuaHJlZiB8fCB0aGlzLm1haWwudGV4dC5yYXcpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubWFpbC50ZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLm1haWwudGV4dFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0LmNvbnRlbnRUeXBlID0gJ3RleHQvcGxhaW47IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFpbC53YXRjaEh0bWwpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5tYWlsLndhdGNoSHRtbCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5tYWlsLndhdGNoSHRtbC5jb250ZW50IHx8IHRoaXMubWFpbC53YXRjaEh0bWwucGF0aCB8fCB0aGlzLm1haWwud2F0Y2hIdG1sLmhyZWYgfHwgdGhpcy5tYWlsLndhdGNoSHRtbC5yYXcpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB3YXRjaEh0bWwgPSB0aGlzLm1haWwud2F0Y2hIdG1sO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3YXRjaEh0bWwgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMubWFpbC53YXRjaEh0bWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2F0Y2hIdG1sLmNvbnRlbnRUeXBlID0gJ3RleHQvd2F0Y2gtaHRtbDsgY2hhcnNldD11dGYtOCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYWlsLmFtcCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1haWwuYW1wID09PSAnb2JqZWN0JyAmJiAodGhpcy5tYWlsLmFtcC5jb250ZW50IHx8IHRoaXMubWFpbC5hbXAucGF0aCB8fCB0aGlzLm1haWwuYW1wLmhyZWYgfHwgdGhpcy5tYWlsLmFtcC5yYXcpKSB7XG4gICAgICAgICAgICAgICAgYW1wID0gdGhpcy5tYWlsLmFtcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW1wID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLm1haWwuYW1wXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFtcC5jb250ZW50VHlwZSA9ICd0ZXh0L3gtYW1wLWh0bWw7IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTkIhIHdoZW4gaW5jbHVkaW5nIGF0dGFjaG1lbnRzIHdpdGggYSBjYWxlbmRhciBhbHRlcm5hdGl2ZSB5b3UgbWlnaHQgZW5kIHVwIGluIGEgYmxhbmsgc2NyZWVuIG9uIHNvbWUgY2xpZW50c1xuICAgICAgICBpZiAodGhpcy5tYWlsLmljYWxFdmVudCkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLm1haWwuaWNhbEV2ZW50ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm1haWwuaWNhbEV2ZW50LmNvbnRlbnQgfHwgdGhpcy5tYWlsLmljYWxFdmVudC5wYXRoIHx8IHRoaXMubWFpbC5pY2FsRXZlbnQuaHJlZiB8fCB0aGlzLm1haWwuaWNhbEV2ZW50LnJhdylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGljYWxFdmVudCA9IHRoaXMubWFpbC5pY2FsRXZlbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGljYWxFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGhpcy5tYWlsLmljYWxFdmVudFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0ID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhpY2FsRXZlbnQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBldmVudE9iamVjdFtrZXldID0gaWNhbEV2ZW50W2tleV07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50T2JqZWN0LmNvbnRlbnQgJiYgdHlwZW9mIGV2ZW50T2JqZWN0LmNvbnRlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIGdvaW5nIHRvIGhhdmUgdGhlIHNhbWUgYXR0YWNobWVudCB0d2ljZSwgc28gbWFyayB0aGlzIHRvIGJlXG4gICAgICAgICAgICAgICAgLy8gcmVzb2x2ZWQganVzdCBvbmNlXG4gICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuY29udGVudC5fcmVzb2x2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmZpbGVuYW1lID0gZmFsc2U7XG4gICAgICAgICAgICBldmVudE9iamVjdC5jb250ZW50VHlwZSA9ICd0ZXh0L2NhbGVuZGFyOyBjaGFyc2V0PXV0Zi04OyBtZXRob2Q9JyArIChldmVudE9iamVjdC5tZXRob2QgfHwgJ1BVQkxJU0gnKS50b1N0cmluZygpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKCFldmVudE9iamVjdC5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFpbC5odG1sKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubWFpbC5odG1sID09PSAnb2JqZWN0JyAmJiAodGhpcy5tYWlsLmh0bWwuY29udGVudCB8fCB0aGlzLm1haWwuaHRtbC5wYXRoIHx8IHRoaXMubWFpbC5odG1sLmhyZWYgfHwgdGhpcy5tYWlsLmh0bWwucmF3KSkge1xuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLm1haWwuaHRtbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaHRtbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGhpcy5tYWlsLmh0bWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbC5jb250ZW50VHlwZSA9ICd0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgICB9XG5cbiAgICAgICAgW11cbiAgICAgICAgICAgIC5jb25jYXQodGV4dCB8fCBbXSlcbiAgICAgICAgICAgIC5jb25jYXQod2F0Y2hIdG1sIHx8IFtdKVxuICAgICAgICAgICAgLmNvbmNhdChhbXAgfHwgW10pXG4gICAgICAgICAgICAuY29uY2F0KGh0bWwgfHwgW10pXG4gICAgICAgICAgICAuY29uY2F0KGV2ZW50T2JqZWN0IHx8IFtdKVxuICAgICAgICAgICAgLmNvbmNhdCh0aGlzLm1haWwuYWx0ZXJuYXRpdmVzIHx8IFtdKVxuICAgICAgICAgICAgLmZvckVhY2goYWx0ZXJuYXRpdmUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuXG4gICAgICAgICAgICAgICAgaWYgKC9eZGF0YTovaS50ZXN0KGFsdGVybmF0aXZlLnBhdGggfHwgYWx0ZXJuYXRpdmUuaHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmUgPSB0aGlzLl9wcm9jZXNzRGF0YVVybChhbHRlcm5hdGl2ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGFsdGVybmF0aXZlLmNvbnRlbnRUeXBlIHx8IG1pbWVGdW5jcy5kZXRlY3RNaW1lVHlwZShhbHRlcm5hdGl2ZS5maWxlbmFtZSB8fCBhbHRlcm5hdGl2ZS5wYXRoIHx8IGFsdGVybmF0aXZlLmhyZWYgfHwgJ3R4dCcpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHJhbnNmZXJFbmNvZGluZzogYWx0ZXJuYXRpdmUuY29udGVudFRyYW5zZmVyRW5jb2RpbmdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0aXZlLmZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsZW5hbWUgPSBhbHRlcm5hdGl2ZS5maWxlbmFtZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoL15odHRwcz86XFwvXFwvL2kudGVzdChhbHRlcm5hdGl2ZS5wYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZS5ocmVmID0gYWx0ZXJuYXRpdmUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmUucGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRpdmUucmF3KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmF3ID0gYWx0ZXJuYXRpdmUucmF3O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRpdmUucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBhbHRlcm5hdGl2ZS5wYXRoXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHRlcm5hdGl2ZS5ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IGFsdGVybmF0aXZlLmhyZWZcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSBhbHRlcm5hdGl2ZS5jb250ZW50IHx8ICcnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhbHRlcm5hdGl2ZS5lbmNvZGluZykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmVuY29kaW5nID0gYWx0ZXJuYXRpdmUuZW5jb2Rpbmc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0aXZlLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5oZWFkZXJzID0gYWx0ZXJuYXRpdmUuaGVhZGVycztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZXMucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhbHRlcm5hdGl2ZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIG11bHRpcGFydC9taXhlZCBub2RlLiBJdCBzaG91bGQgYWx3YXlzIGNvbnRhaW4gZGlmZmVyZW50IHR5cGUgb2YgZWxlbWVudHMgb24gdGhlIHNhbWUgbGV2ZWxcbiAgICAgKiBlZy4gdGV4dCArIGF0dGFjaG1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50Tm9kZSBQYXJlbnQgZm9yIHRoaXMgbm90ZS4gSWYgaXQgZG9lcyBub3QgZXhpc3QsIGEgcm9vdCBub2RlIGlzIGNyZWF0ZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBNaW1lTm9kZSBub2RlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfY3JlYXRlTWl4ZWQocGFyZW50Tm9kZSkge1xuICAgICAgICBsZXQgbm9kZTtcblxuICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgTWltZU5vZGUoJ211bHRpcGFydC9taXhlZCcsIHtcbiAgICAgICAgICAgICAgICBiYXNlQm91bmRhcnk6IHRoaXMubWFpbC5iYXNlQm91bmRhcnksXG4gICAgICAgICAgICAgICAgdGV4dEVuY29kaW5nOiB0aGlzLm1haWwudGV4dEVuY29kaW5nLFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5UHJlZml4OiB0aGlzLm1haWwuYm91bmRhcnlQcmVmaXgsXG4gICAgICAgICAgICAgICAgZGlzYWJsZVVybEFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVVcmxBY2Nlc3MsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUZpbGVBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlRmlsZUFjY2VzcyxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIZWFkZXJLZXk6IHRoaXMubWFpbC5ub3JtYWxpemVIZWFkZXJLZXksXG4gICAgICAgICAgICAgICAgbmV3bGluZTogdGhpcy5tYWlsLm5ld2xpbmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IHBhcmVudE5vZGUuY3JlYXRlQ2hpbGQoJ211bHRpcGFydC9taXhlZCcsIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fdXNlQWx0ZXJuYXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUFsdGVybmF0aXZlKG5vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3VzZVJlbGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVJlbGF0ZWQobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBbXVxuICAgICAgICAgICAgLmNvbmNhdCgoIXRoaXMuX3VzZUFsdGVybmF0aXZlICYmIHRoaXMuX2FsdGVybmF0aXZlcykgfHwgW10pXG4gICAgICAgICAgICAuY29uY2F0KHRoaXMuX2F0dGFjaG1lbnRzLmF0dGFjaGVkIHx8IFtdKVxuICAgICAgICAgICAgLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgYSBodG1sIG5vZGUgZnJvbSByZWxhdGVkIHN1YnBhcnQgdGhlbiBpZ25vcmUgaXRcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3VzZVJlbGF0ZWQgfHwgZWxlbWVudCAhPT0gdGhpcy5faHRtbE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29udGVudE5vZGUobm9kZSwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIG11bHRpcGFydC9hbHRlcm5hdGl2ZSBub2RlLiBJdCBzaG91bGQgYWx3YXlzIGNvbnRhaW4gc2FtZSB0eXBlIG9mIGVsZW1lbnRzIG9uIHRoZSBzYW1lIGxldmVsXG4gICAgICogZWcuIHRleHQgKyBodG1sIHZpZXcgb2YgdGhlIHNhbWUgZGF0YVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudE5vZGUgUGFyZW50IGZvciB0aGlzIG5vdGUuIElmIGl0IGRvZXMgbm90IGV4aXN0LCBhIHJvb3Qgbm9kZSBpcyBjcmVhdGVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gTWltZU5vZGUgbm9kZSBlbGVtZW50XG4gICAgICovXG4gICAgX2NyZWF0ZUFsdGVybmF0aXZlKHBhcmVudE5vZGUpIHtcbiAgICAgICAgbGV0IG5vZGU7XG5cbiAgICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBub2RlID0gbmV3IE1pbWVOb2RlKCdtdWx0aXBhcnQvYWx0ZXJuYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgYmFzZUJvdW5kYXJ5OiB0aGlzLm1haWwuYmFzZUJvdW5kYXJ5LFxuICAgICAgICAgICAgICAgIHRleHRFbmNvZGluZzogdGhpcy5tYWlsLnRleHRFbmNvZGluZyxcbiAgICAgICAgICAgICAgICBib3VuZGFyeVByZWZpeDogdGhpcy5tYWlsLmJvdW5kYXJ5UHJlZml4LFxuICAgICAgICAgICAgICAgIGRpc2FibGVVcmxBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlVXJsQWNjZXNzLFxuICAgICAgICAgICAgICAgIGRpc2FibGVGaWxlQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZUZpbGVBY2Nlc3MsXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplSGVhZGVyS2V5OiB0aGlzLm1haWwubm9ybWFsaXplSGVhZGVyS2V5LFxuICAgICAgICAgICAgICAgIG5ld2xpbmU6IHRoaXMubWFpbC5uZXdsaW5lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSBwYXJlbnROb2RlLmNyZWF0ZUNoaWxkKCdtdWx0aXBhcnQvYWx0ZXJuYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgZGlzYWJsZVVybEFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVVcmxBY2Nlc3MsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUZpbGVBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlRmlsZUFjY2VzcyxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIZWFkZXJLZXk6IHRoaXMubWFpbC5ub3JtYWxpemVIZWFkZXJLZXksXG4gICAgICAgICAgICAgICAgbmV3bGluZTogdGhpcy5tYWlsLm5ld2xpbmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWx0ZXJuYXRpdmVzLmZvckVhY2goYWx0ZXJuYXRpdmUgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3VzZVJlbGF0ZWQgJiYgdGhpcy5faHRtbE5vZGUgPT09IGFsdGVybmF0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUmVsYXRlZChub2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29udGVudE5vZGUobm9kZSwgYWx0ZXJuYXRpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgbXVsdGlwYXJ0L3JlbGF0ZWQgbm9kZS4gSXQgc2hvdWxkIGFsd2F5cyBjb250YWluIGh0bWwgbm9kZSB3aXRoIHJlbGF0ZWQgYXR0YWNobWVudHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJlbnROb2RlIFBhcmVudCBmb3IgdGhpcyBub3RlLiBJZiBpdCBkb2VzIG5vdCBleGlzdCwgYSByb290IG5vZGUgaXMgY3JlYXRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IE1pbWVOb2RlIG5vZGUgZWxlbWVudFxuICAgICAqL1xuICAgIF9jcmVhdGVSZWxhdGVkKHBhcmVudE5vZGUpIHtcbiAgICAgICAgbGV0IG5vZGU7XG5cbiAgICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBub2RlID0gbmV3IE1pbWVOb2RlKCdtdWx0aXBhcnQvcmVsYXRlZDsgdHlwZT1cInRleHQvaHRtbFwiJywge1xuICAgICAgICAgICAgICAgIGJhc2VCb3VuZGFyeTogdGhpcy5tYWlsLmJhc2VCb3VuZGFyeSxcbiAgICAgICAgICAgICAgICB0ZXh0RW5jb2Rpbmc6IHRoaXMubWFpbC50ZXh0RW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlQcmVmaXg6IHRoaXMubWFpbC5ib3VuZGFyeVByZWZpeCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZS5jcmVhdGVDaGlsZCgnbXVsdGlwYXJ0L3JlbGF0ZWQ7IHR5cGU9XCJ0ZXh0L2h0bWxcIicsIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jcmVhdGVDb250ZW50Tm9kZShub2RlLCB0aGlzLl9odG1sTm9kZSk7XG5cbiAgICAgICAgdGhpcy5fYXR0YWNobWVudHMucmVsYXRlZC5mb3JFYWNoKGFsdGVybmF0aXZlID0+IHRoaXMuX2NyZWF0ZUNvbnRlbnROb2RlKG5vZGUsIGFsdGVybmF0aXZlKSk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlZ3VsYXIgbm9kZSB3aXRoIGNvbnRlbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50Tm9kZSBQYXJlbnQgZm9yIHRoaXMgbm90ZS4gSWYgaXQgZG9lcyBub3QgZXhpc3QsIGEgcm9vdCBub2RlIGlzIGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCBOb2RlIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBNaW1lTm9kZSBub2RlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfY3JlYXRlQ29udGVudE5vZGUocGFyZW50Tm9kZSwgZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCB7fTtcbiAgICAgICAgZWxlbWVudC5jb250ZW50ID0gZWxlbWVudC5jb250ZW50IHx8ICcnO1xuXG4gICAgICAgIGxldCBub2RlO1xuICAgICAgICBsZXQgZW5jb2RpbmcgPSAoZWxlbWVudC5lbmNvZGluZyB8fCAndXRmOCcpXG4gICAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bLV9cXHNdL2csICcnKTtcblxuICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgTWltZU5vZGUoZWxlbWVudC5jb250ZW50VHlwZSwge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBlbGVtZW50LmZpbGVuYW1lLFxuICAgICAgICAgICAgICAgIGJhc2VCb3VuZGFyeTogdGhpcy5tYWlsLmJhc2VCb3VuZGFyeSxcbiAgICAgICAgICAgICAgICB0ZXh0RW5jb2Rpbmc6IHRoaXMubWFpbC50ZXh0RW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlQcmVmaXg6IHRoaXMubWFpbC5ib3VuZGFyeVByZWZpeCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZS5jcmVhdGVDaGlsZChlbGVtZW50LmNvbnRlbnRUeXBlLCB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGVsZW1lbnQuZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgdGV4dEVuY29kaW5nOiB0aGlzLm1haWwudGV4dEVuY29kaW5nLFxuICAgICAgICAgICAgICAgIGRpc2FibGVVcmxBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlVXJsQWNjZXNzLFxuICAgICAgICAgICAgICAgIGRpc2FibGVGaWxlQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZUZpbGVBY2Nlc3MsXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplSGVhZGVyS2V5OiB0aGlzLm1haWwubm9ybWFsaXplSGVhZGVyS2V5LFxuICAgICAgICAgICAgICAgIG5ld2xpbmU6IHRoaXMubWFpbC5uZXdsaW5lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBjdXN0b20gaGVhZGVyc1xuICAgICAgICBpZiAoZWxlbWVudC5oZWFkZXJzKSB7XG4gICAgICAgICAgICBub2RlLmFkZEhlYWRlcihlbGVtZW50LmhlYWRlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2lkKSB7XG4gICAgICAgICAgICBub2RlLnNldEhlYWRlcignQ29udGVudC1JZCcsICc8JyArIGVsZW1lbnQuY2lkLnJlcGxhY2UoL1s8Pl0vZywgJycpICsgJz4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50LmNvbnRlbnRUcmFuc2ZlckVuY29kaW5nKSB7XG4gICAgICAgICAgICBub2RlLnNldEhlYWRlcignQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZycsIGVsZW1lbnQuY29udGVudFRyYW5zZmVyRW5jb2RpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWFpbC5lbmNvZGluZyAmJiAvXnRleHRcXC8vaS50ZXN0KGVsZW1lbnQuY29udGVudFR5cGUpKSB7XG4gICAgICAgICAgICBub2RlLnNldEhlYWRlcignQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZycsIHRoaXMubWFpbC5lbmNvZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIS9edGV4dFxcLy9pLnRlc3QoZWxlbWVudC5jb250ZW50VHlwZSkgfHwgZWxlbWVudC5jb250ZW50RGlzcG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5vZGUuc2V0SGVhZGVyKFxuICAgICAgICAgICAgICAgICdDb250ZW50LURpc3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNvbnRlbnREaXNwb3NpdGlvbiB8fCAoZWxlbWVudC5jaWQgJiYgL15pbWFnZVxcLy9pLnRlc3QoZWxlbWVudC5jb250ZW50VHlwZSkgPyAnaW5saW5lJyA6ICdhdHRhY2htZW50JylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuY29udGVudCA9PT0gJ3N0cmluZycgJiYgIVsndXRmOCcsICd1c2FzY2lpJywgJ2FzY2lpJ10uaW5jbHVkZXMoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNvbnRlbnQgPSBCdWZmZXIuZnJvbShlbGVtZW50LmNvbnRlbnQsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByZWZlciBwcmVnZW5lcmF0ZWQgcmF3IGNvbnRlbnRcbiAgICAgICAgaWYgKGVsZW1lbnQucmF3KSB7XG4gICAgICAgICAgICBub2RlLnNldFJhdyhlbGVtZW50LnJhdyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLnNldENvbnRlbnQoZWxlbWVudC5jb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBkYXRhIHVyaSBhbmQgY29udmVydHMgaXQgdG8gYSBCdWZmZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IENvbnRlbnQgZWxlbWVudFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gUGFyc2VkIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfcHJvY2Vzc0RhdGFVcmwoZWxlbWVudCkge1xuICAgICAgICBsZXQgcGFyc2VkRGF0YVVyaTtcbiAgICAgICAgaWYgKChlbGVtZW50LnBhdGggfHwgZWxlbWVudC5ocmVmKS5tYXRjaCgvXmRhdGE6LykpIHtcbiAgICAgICAgICAgIHBhcnNlZERhdGFVcmkgPSBwYXJzZURhdGFVUkkoZWxlbWVudC5wYXRoIHx8IGVsZW1lbnQuaHJlZik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcnNlZERhdGFVcmkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5jb250ZW50ID0gcGFyc2VkRGF0YVVyaS5kYXRhO1xuICAgICAgICBlbGVtZW50LmNvbnRlbnRUeXBlID0gZWxlbWVudC5jb250ZW50VHlwZSB8fCBwYXJzZWREYXRhVXJpLmNvbnRlbnRUeXBlO1xuXG4gICAgICAgIGlmICgncGF0aCcgaW4gZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5wYXRoID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2hyZWYnIGluIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuaHJlZiA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1haWxDb21wb3NlcjtcbiJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJOdW1iZXIiLCJNaW1lTm9kZSIsInJlcXVpcmUiLCJtaW1lRnVuY3MiLCJwYXJzZURhdGFVUkkiLCJNYWlsQ29tcG9zZXIiLCJtYWlsIiwibWVzc2FnZSIsInZhbHVlIiwiY29tcGlsZSIsIl90aGlzIiwiX2FsdGVybmF0aXZlcyIsImdldEFsdGVybmF0aXZlcyIsIl9odG1sTm9kZSIsImZpbHRlciIsImFsdGVybmF0aXZlIiwidGVzdCIsImNvbnRlbnRUeXBlIiwicG9wIiwiX2F0dGFjaG1lbnRzIiwiZ2V0QXR0YWNobWVudHMiLCJfdXNlUmVsYXRlZCIsInJlbGF0ZWQiLCJfdXNlQWx0ZXJuYXRpdmUiLCJfdXNlTWl4ZWQiLCJhdHRhY2hlZCIsInJhdyIsIm5ld2xpbmUiLCJzZXRSYXciLCJfY3JlYXRlTWl4ZWQiLCJfY3JlYXRlQWx0ZXJuYXRpdmUiLCJfY3JlYXRlUmVsYXRlZCIsIl9jcmVhdGVDb250ZW50Tm9kZSIsImNvbmNhdCIsInNoaWZ0IiwiY29udGVudCIsImhlYWRlcnMiLCJhZGRIZWFkZXIiLCJmb3JFYWNoIiwiaGVhZGVyIiwicmVwbGFjZSIsImMiLCJ0b1VwcGVyQ2FzZSIsInNldEhlYWRlciIsImVudmVsb3BlIiwic2V0RW52ZWxvcGUiLCJtZXNzYWdlSWQiLCJmaW5kUmVsYXRlZCIsIl90aGlzMiIsImljYWxFdmVudCIsImV2ZW50T2JqZWN0IiwiYXR0YWNobWVudHMiLCJtYXAiLCJhdHRhY2htZW50IiwiZGF0YSIsImlzTWVzc2FnZU5vZGUiLCJwYXRoIiwiaHJlZiIsIl9wcm9jZXNzRGF0YVVybCIsImRldGVjdE1pbWVUeXBlIiwiZmlsZW5hbWUiLCJpc0ltYWdlIiwiY29udGVudERpc3Bvc2l0aW9uIiwiY2lkIiwiY29udGVudFRyYW5zZmVyRW5jb2RpbmciLCJzcGxpdCIsImluZGV4T2YiLCJkZXRlY3RFeHRlbnNpb24iLCJodHRwSGVhZGVycyIsImVuY29kaW5nIiwia2V5cyIsIl90aGlzMyIsImFsdGVybmF0aXZlcyIsInRleHQiLCJodG1sIiwid2F0Y2hIdG1sIiwiYW1wIiwiX3Jlc29sdmUiLCJtZXRob2QiLCJ0b1N0cmluZyIsInRyaW0iLCJwdXNoIiwicGFyZW50Tm9kZSIsIl90aGlzNCIsIm5vZGUiLCJiYXNlQm91bmRhcnkiLCJ0ZXh0RW5jb2RpbmciLCJib3VuZGFyeVByZWZpeCIsImRpc2FibGVVcmxBY2Nlc3MiLCJkaXNhYmxlRmlsZUFjY2VzcyIsIm5vcm1hbGl6ZUhlYWRlcktleSIsImNyZWF0ZUNoaWxkIiwiZWxlbWVudCIsIl90aGlzNSIsIl90aGlzNiIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJCdWZmZXIiLCJmcm9tIiwic2V0Q29udGVudCIsInBhcnNlZERhdGFVcmkiLCJtYXRjaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar mimeTypes = __webpack_require__(/*! ../mime-funcs/mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nvar MailComposer = __webpack_require__(/*! ../mail-composer */ \"(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\");\nvar DKIM = __webpack_require__(/*! ../dkim */ \"(rsc)/./node_modules/nodemailer/lib/dkim/index.js\");\nvar httpProxyClient = __webpack_require__(/*! ../smtp-connection/http-proxy-client */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar urllib = __webpack_require__(/*! url */ \"url\");\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar MailMessage = __webpack_require__(/*! ./mail-message */ \"(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\");\nvar net = __webpack_require__(/*! net */ \"net\");\nvar dns = __webpack_require__(/*! dns */ \"dns\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */\nvar Mail = /*#__PURE__*/function (_EventEmitter) {\n  function Mail(transporter, options, defaults) {\n    var _this2;\n    _classCallCheck(this, Mail);\n    _this2 = _callSuper(this, Mail);\n    _this2.options = options || {};\n    _this2._defaults = defaults || {};\n    _this2._defaultPlugins = {\n      compile: [function () {\n        var _this3;\n        return (_this3 = _this2)._convertDataImages.apply(_this3, arguments);\n      }],\n      stream: []\n    };\n    _this2._userPlugins = {\n      compile: [],\n      stream: []\n    };\n    _this2.meta = new Map();\n    _this2.dkim = _this2.options.dkim ? new DKIM(_this2.options.dkim) : false;\n    _this2.transporter = transporter;\n    _this2.transporter.mailer = _this2;\n    _this2.logger = shared.getLogger(_this2.options, {\n      component: _this2.options.component || 'mail'\n    });\n    _this2.logger.debug({\n      tnx: 'create'\n    }, 'Creating transport: %s', _this2.getVersionString());\n\n    // setup emit handlers for the transporter\n    if (typeof _this2.transporter.on === 'function') {\n      // deprecated log interface\n      _this2.transporter.on('log', function (log) {\n        _this2.logger.debug({\n          tnx: 'transport'\n        }, '%s: %s', log.type, log.message);\n      });\n\n      // transporter errors\n      _this2.transporter.on('error', function (err) {\n        _this2.logger.error({\n          err: err,\n          tnx: 'transport'\n        }, 'Transport Error: %s', err.message);\n        _this2.emit('error', err);\n      });\n\n      // indicates if the sender has became idle\n      _this2.transporter.on('idle', function () {\n        var _this4;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        (_this4 = _this2).emit.apply(_this4, ['idle'].concat(args));\n      });\n    }\n\n    /**\n     * Optional methods passed to the underlying transport object\n     */\n    ['close', 'isIdle', 'verify'].forEach(function (method) {\n      _this2[method] = function () {\n        if (typeof _this2.transporter[method] === 'function') {\n          var _this2$transporter;\n          if (method === 'verify' && typeof _this2.getSocket === 'function') {\n            _this2.transporter.getSocket = _this2.getSocket;\n            _this2.getSocket = false;\n          }\n          return (_this2$transporter = _this2.transporter)[method].apply(_this2$transporter, arguments);\n        } else {\n          _this2.logger.warn({\n            tnx: 'transport',\n            methodName: method\n          }, 'Non existing method %s called for transport', method);\n          return false;\n        }\n      };\n    });\n\n    // setup proxy handling\n    if (_this2.options.proxy && typeof _this2.options.proxy === 'string') {\n      _this2.setupProxy(_this2.options.proxy);\n    }\n    return _this2;\n  }\n  _inherits(Mail, _EventEmitter);\n  return _createClass(Mail, [{\n    key: \"use\",\n    value: function use(step, plugin) {\n      step = (step || '').toString();\n      if (!this._userPlugins.hasOwnProperty(step)) {\n        this._userPlugins[step] = [plugin];\n      } else {\n        this._userPlugins[step].push(plugin);\n      }\n      return this;\n    }\n\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */\n  }, {\n    key: \"sendMail\",\n    value: function sendMail(data) {\n      var _this5 = this;\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var promise;\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      if (typeof this.getSocket === 'function') {\n        this.transporter.getSocket = this.getSocket;\n        this.getSocket = false;\n      }\n      var mail = new MailMessage(this, data);\n      this.logger.debug({\n        tnx: 'transport',\n        name: this.transporter.name,\n        version: this.transporter.version,\n        action: 'send'\n      }, 'Sending mail using %s/%s', this.transporter.name, this.transporter.version);\n      this._processPlugins('compile', mail, function (err) {\n        if (err) {\n          _this5.logger.error({\n            err: err,\n            tnx: 'plugin',\n            action: 'compile'\n          }, 'PluginCompile Error: %s', err.message);\n          return callback(err);\n        }\n        mail.message = new MailComposer(mail.data).compile();\n        mail.setMailerHeader();\n        mail.setPriorityHeaders();\n        mail.setListHeaders();\n        _this5._processPlugins('stream', mail, function (err) {\n          if (err) {\n            _this5.logger.error({\n              err: err,\n              tnx: 'plugin',\n              action: 'stream'\n            }, 'PluginStream Error: %s', err.message);\n            return callback(err);\n          }\n          if (mail.data.dkim || _this5.dkim) {\n            mail.message.processFunc(function (input) {\n              var dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : _this5.dkim;\n              _this5.logger.debug({\n                tnx: 'DKIM',\n                messageId: mail.message.messageId(),\n                dkimDomains: dkim.keys.map(function (key) {\n                  return key.keySelector + '.' + key.domainName;\n                }).join(', ')\n              }, 'Signing outgoing message with %s keys', dkim.keys.length);\n              return dkim.sign(input, mail.data._dkim);\n            });\n          }\n          _this5.transporter.send(mail, function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            if (args[0]) {\n              _this5.logger.error({\n                err: args[0],\n                tnx: 'transport',\n                action: 'send'\n              }, 'Send Error: %s', args[0].message);\n            }\n            callback.apply(void 0, args);\n          });\n        });\n      });\n      return promise;\n    }\n  }, {\n    key: \"getVersionString\",\n    value: function getVersionString() {\n      return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n  }, {\n    key: \"_processPlugins\",\n    value: function _processPlugins(step, mail, callback) {\n      step = (step || '').toString();\n      if (!this._userPlugins.hasOwnProperty(step)) {\n        return callback();\n      }\n      var userPlugins = this._userPlugins[step] || [];\n      var defaultPlugins = this._defaultPlugins[step] || [];\n      if (userPlugins.length) {\n        this.logger.debug({\n          tnx: 'transaction',\n          pluginCount: userPlugins.length,\n          step: step\n        }, 'Using %s plugins for %s', userPlugins.length, step);\n      }\n      if (userPlugins.length + defaultPlugins.length === 0) {\n        return callback();\n      }\n      var pos = 0;\n      var block = 'default';\n      var processPlugins = function processPlugins() {\n        var curplugins = block === 'default' ? defaultPlugins : userPlugins;\n        if (pos >= curplugins.length) {\n          if (block === 'default' && userPlugins.length) {\n            block = 'user';\n            pos = 0;\n            curplugins = userPlugins;\n          } else {\n            return callback();\n          }\n        }\n        var plugin = curplugins[pos++];\n        plugin(mail, function (err) {\n          if (err) {\n            return callback(err);\n          }\n          processPlugins();\n        });\n      };\n      processPlugins();\n    }\n\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */\n  }, {\n    key: \"setupProxy\",\n    value: function setupProxy(proxyUrl) {\n      var _this6 = this;\n      var proxy = urllib.parse(proxyUrl);\n\n      // setup socket handler for the mailer object\n      this.getSocket = function (options, callback) {\n        var protocol = proxy.protocol.replace(/:$/, '').toLowerCase();\n        if (_this6.meta.has('proxy_handler_' + protocol)) {\n          return _this6.meta.get('proxy_handler_' + protocol)(proxy, options, callback);\n        }\n        switch (protocol) {\n          // Connect using a HTTP CONNECT method\n          case 'http':\n          case 'https':\n            httpProxyClient(proxy.href, options.port, options.host, function (err, socket) {\n              if (err) {\n                return callback(err);\n              }\n              return callback(null, {\n                connection: socket\n              });\n            });\n            return;\n          case 'socks':\n          case 'socks5':\n          case 'socks4':\n          case 'socks4a':\n            {\n              if (!_this6.meta.has('proxy_socks_module')) {\n                return callback(new Error('Socks module not loaded'));\n              }\n              var connect = function connect(ipaddress) {\n                var proxyV2 = !!_this6.meta.get('proxy_socks_module').SocksClient;\n                var socksClient = proxyV2 ? _this6.meta.get('proxy_socks_module').SocksClient : _this6.meta.get('proxy_socks_module');\n                var proxyType = Number(proxy.protocol.replace(/\\D/g, '')) || 5;\n                var connectionOpts = _defineProperty(_defineProperty({\n                  proxy: {\n                    ipaddress: ipaddress,\n                    port: Number(proxy.port),\n                    type: proxyType\n                  }\n                }, proxyV2 ? 'destination' : 'target', {\n                  host: options.host,\n                  port: options.port\n                }), \"command\", 'connect');\n                if (proxy.auth) {\n                  var username = decodeURIComponent(proxy.auth.split(':').shift());\n                  var password = decodeURIComponent(proxy.auth.split(':').pop());\n                  if (proxyV2) {\n                    connectionOpts.proxy.userId = username;\n                    connectionOpts.proxy.password = password;\n                  } else if (proxyType === 4) {\n                    connectionOpts.userid = username;\n                  } else {\n                    connectionOpts.authentication = {\n                      username: username,\n                      password: password\n                    };\n                  }\n                }\n                socksClient.createConnection(connectionOpts, function (err, info) {\n                  if (err) {\n                    return callback(err);\n                  }\n                  return callback(null, {\n                    connection: info.socket || info\n                  });\n                });\n              };\n              if (net.isIP(proxy.hostname)) {\n                return connect(proxy.hostname);\n              }\n              return dns.resolve(proxy.hostname, function (err, address) {\n                if (err) {\n                  return callback(err);\n                }\n                connect(Array.isArray(address) ? address[0] : address);\n              });\n            }\n        }\n        callback(new Error('Unknown proxy configuration'));\n      };\n    }\n  }, {\n    key: \"_convertDataImages\",\n    value: function _convertDataImages(mail, callback) {\n      if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {\n        return callback();\n      }\n      mail.resolveContent(mail.data, 'html', function (err, html) {\n        if (err) {\n          return callback(err);\n        }\n        var cidCounter = 0;\n        html = (html || '').toString().replace(/(<img\\b[^<>]{0,1024} src\\s{0,20}=[\\s\"']{0,20})(data:([^;]+);[^\"'>\\s]+)/gi, function (match, prefix, dataUri, mimeType) {\n          var cid = crypto.randomBytes(10).toString('hex') + '@localhost';\n          if (!mail.data.attachments) {\n            mail.data.attachments = [];\n          }\n          if (!Array.isArray(mail.data.attachments)) {\n            mail.data.attachments = [].concat(mail.data.attachments || []);\n          }\n          mail.data.attachments.push({\n            path: dataUri,\n            cid: cid,\n            filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)\n          });\n          return prefix + 'cid:' + cid;\n        });\n        mail.data.html = html;\n        callback();\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      return this.meta.set(key, value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.meta.get(key);\n    }\n  }]);\n}(EventEmitter);\nmodule.exports = Mail;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/mail-message.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nvar mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nvar MailMessage = /*#__PURE__*/function () {\n  function MailMessage(mailer, data) {\n    var _this = this;\n    _classCallCheck(this, MailMessage);\n    this.mailer = mailer;\n    this.data = {};\n    this.message = null;\n    data = data || {};\n    var options = mailer.options || {};\n    var defaults = mailer._defaults || {};\n    Object.keys(data).forEach(function (key) {\n      _this.data[key] = data[key];\n    });\n    this.data.headers = this.data.headers || {};\n\n    // apply defaults\n    Object.keys(defaults).forEach(function (key) {\n      if (!(key in _this.data)) {\n        _this.data[key] = defaults[key];\n      } else if (key === 'headers') {\n        // headers is a special case. Allow setting individual default headers\n        Object.keys(defaults.headers).forEach(function (key) {\n          if (!(key in _this.data.headers)) {\n            _this.data.headers[key] = defaults.headers[key];\n          }\n        });\n      }\n    });\n\n    // force specific keys from transporter options\n    ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(function (key) {\n      if (key in options) {\n        _this.data[key] = options[key];\n      }\n    });\n  }\n  return _createClass(MailMessage, [{\n    key: \"resolveContent\",\n    value: function resolveContent() {\n      return shared.resolveContent.apply(shared, arguments);\n    }\n  }, {\n    key: \"resolveAll\",\n    value: function resolveAll(callback) {\n      var _this2 = this;\n      var keys = [[this.data, 'html'], [this.data, 'text'], [this.data, 'watchHtml'], [this.data, 'amp'], [this.data, 'icalEvent']];\n      if (this.data.alternatives && this.data.alternatives.length) {\n        this.data.alternatives.forEach(function (alternative, i) {\n          keys.push([_this2.data.alternatives, i]);\n        });\n      }\n      if (this.data.attachments && this.data.attachments.length) {\n        this.data.attachments.forEach(function (attachment, i) {\n          if (!attachment.filename) {\n            attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n            if (attachment.filename.indexOf('.') < 0) {\n              attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);\n            }\n          }\n          if (!attachment.contentType) {\n            attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n          }\n          keys.push([_this2.data.attachments, i]);\n        });\n      }\n      var mimeNode = new MimeNode();\n      var addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];\n      addressKeys.forEach(function (address) {\n        var value;\n        if (_this2.message) {\n          value = [].concat(mimeNode._parseAddresses(_this2.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);\n        } else if (_this2.data[address]) {\n          value = [].concat(mimeNode._parseAddresses(_this2.data[address]) || []);\n        }\n        if (value && value.length) {\n          _this2.data[address] = value;\n        } else if (address in _this2.data) {\n          _this2.data[address] = null;\n        }\n      });\n      var singleKeys = ['from', 'sender'];\n      singleKeys.forEach(function (address) {\n        if (_this2.data[address]) {\n          _this2.data[address] = _this2.data[address].shift();\n        }\n      });\n      var pos = 0;\n      var resolveNext = function resolveNext() {\n        if (pos >= keys.length) {\n          return callback(null, _this2.data);\n        }\n        var args = keys[pos++];\n        if (!args[0] || !args[0][args[1]]) {\n          return resolveNext();\n        }\n        shared.resolveContent.apply(shared, _toConsumableArray(args).concat([function (err, value) {\n          if (err) {\n            return callback(err);\n          }\n          var node = {\n            content: value\n          };\n          if (args[0][args[1]] && _typeof(args[0][args[1]]) === 'object' && !Buffer.isBuffer(args[0][args[1]])) {\n            Object.keys(args[0][args[1]]).forEach(function (key) {\n              if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {\n                node[key] = args[0][args[1]][key];\n              }\n            });\n          }\n          args[0][args[1]] = node;\n          resolveNext();\n        }]));\n      };\n      setImmediate(function () {\n        return resolveNext();\n      });\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(callback) {\n      var _this3 = this;\n      var envelope = this.data.envelope || this.message.getEnvelope();\n      var messageId = this.message.messageId();\n      this.resolveAll(function (err, data) {\n        if (err) {\n          return callback(err);\n        }\n        data.envelope = envelope;\n        data.messageId = messageId;\n        ['html', 'text', 'watchHtml', 'amp'].forEach(function (key) {\n          if (data[key] && data[key].content) {\n            if (typeof data[key].content === 'string') {\n              data[key] = data[key].content;\n            } else if (Buffer.isBuffer(data[key].content)) {\n              data[key] = data[key].content.toString();\n            }\n          }\n        });\n        if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n          data.icalEvent.content = data.icalEvent.content.toString('base64');\n          data.icalEvent.encoding = 'base64';\n        }\n        if (data.alternatives && data.alternatives.length) {\n          data.alternatives.forEach(function (alternative) {\n            if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n              alternative.content = alternative.content.toString('base64');\n              alternative.encoding = 'base64';\n            }\n          });\n        }\n        if (data.attachments && data.attachments.length) {\n          data.attachments.forEach(function (attachment) {\n            if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n              attachment.content = attachment.content.toString('base64');\n              attachment.encoding = 'base64';\n            }\n          });\n        }\n        data.normalizedHeaders = {};\n        Object.keys(data.headers || {}).forEach(function (key) {\n          var value = [].concat(data.headers[key] || []).shift();\n          value = value && value.value || value;\n          if (value) {\n            if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {\n              value = _this3.message._encodeHeaderValue(key, value);\n            }\n            data.normalizedHeaders[key] = value;\n          }\n        });\n        if (data.list && _typeof(data.list) === 'object') {\n          var listHeaders = _this3._getListHeaders(data.list);\n          listHeaders.forEach(function (entry) {\n            data.normalizedHeaders[entry.key] = entry.value.map(function (val) {\n              return val && val.value || val;\n            }).join(', ');\n          });\n        }\n        if (data.references) {\n          data.normalizedHeaders.references = _this3.message._encodeHeaderValue('references', data.references);\n        }\n        if (data.inReplyTo) {\n          data.normalizedHeaders['in-reply-to'] = _this3.message._encodeHeaderValue('in-reply-to', data.inReplyTo);\n        }\n        return callback(null, data);\n      });\n    }\n  }, {\n    key: \"setMailerHeader\",\n    value: function setMailerHeader() {\n      if (!this.message || !this.data.xMailer) {\n        return;\n      }\n      this.message.setHeader('X-Mailer', this.data.xMailer);\n    }\n  }, {\n    key: \"setPriorityHeaders\",\n    value: function setPriorityHeaders() {\n      if (!this.message || !this.data.priority) {\n        return;\n      }\n      switch ((this.data.priority || '').toString().toLowerCase()) {\n        case 'high':\n          this.message.setHeader('X-Priority', '1 (Highest)');\n          this.message.setHeader('X-MSMail-Priority', 'High');\n          this.message.setHeader('Importance', 'High');\n          break;\n        case 'low':\n          this.message.setHeader('X-Priority', '5 (Lowest)');\n          this.message.setHeader('X-MSMail-Priority', 'Low');\n          this.message.setHeader('Importance', 'Low');\n          break;\n        default:\n        // do not add anything, since all messages are 'Normal' by default\n      }\n    }\n  }, {\n    key: \"setListHeaders\",\n    value: function setListHeaders() {\n      var _this4 = this;\n      if (!this.message || !this.data.list || _typeof(this.data.list) !== 'object') {\n        return;\n      }\n      // add optional List-* headers\n      if (this.data.list && _typeof(this.data.list) === 'object') {\n        this._getListHeaders(this.data.list).forEach(function (listHeader) {\n          listHeader.value.forEach(function (value) {\n            _this4.message.addHeader(listHeader.key, value);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_getListHeaders\",\n    value: function _getListHeaders(listData) {\n      var _this5 = this;\n      // make sure an url looks like <protocol:url>\n      return Object.keys(listData).map(function (key) {\n        return {\n          key: 'list-' + key.toLowerCase().trim(),\n          value: [].concat(listData[key] || []).map(function (value) {\n            return {\n              prepared: true,\n              foldLines: true,\n              value: [].concat(value || []).map(function (value) {\n                if (typeof value === 'string') {\n                  value = {\n                    url: value\n                  };\n                }\n                if (value && value.url) {\n                  if (key.toLowerCase().trim() === 'id') {\n                    // List-ID: \"comment\" <domain>\n                    var _comment = value.comment || '';\n                    if (mimeFuncs.isPlainText(_comment)) {\n                      _comment = '\"' + _comment + '\"';\n                    } else {\n                      _comment = mimeFuncs.encodeWord(_comment);\n                    }\n                    return (value.comment ? _comment + ' ' : '') + _this5._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, '');\n                  }\n\n                  // List-*: <http://domain> (comment)\n                  var comment = value.comment || '';\n                  if (!mimeFuncs.isPlainText(comment)) {\n                    comment = mimeFuncs.encodeWord(comment);\n                  }\n                  return _this5._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');\n                }\n                return '';\n              }).filter(function (value) {\n                return value;\n              }).join(', ')\n            };\n          })\n        };\n      });\n    }\n  }, {\n    key: \"_formatListUrl\",\n    value: function _formatListUrl(url) {\n      url = url.replace(/[\\s<]+|[\\s>]+/g, '');\n      if (/^(https?|mailto|ftp):/.test(url)) {\n        return '<' + url + '>';\n      }\n      if (/^[^@]+@[^@]+$/.test(url)) {\n        return '<mailto:' + url + '>';\n      }\n      return '<http://' + url + '>';\n    }\n  }]);\n}();\nmodule.exports = MailMessage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-control-regex:0 */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nvar qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nvar mimeTypes = __webpack_require__(/*! ./mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nmodule.exports = {\n  /**\n   * Checks if a value is plaintext string (uses only printable 7bit chars)\n   *\n   * @param {String} value String to be tested\n   * @returns {Boolean} true if it is a plaintext string\n   */\n  isPlainText: function isPlainText(value, isParam) {\n    var re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n    if (typeof value !== 'string' || re.test(value)) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n  /**\n   * Checks if a multi line string containes lines longer than the selected value.\n   *\n   * Useful when detecting if a mail message needs any processing at all –\n   * if only plaintext characters are used and lines are short, then there is\n   * no need to encode the values in any way. If the value is plaintext but has\n   * longer lines then allowed, then use format=flowed\n   *\n   * @param {Number} lineLength Max line length to check for\n   * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n   */\n  hasLongerLines: function hasLongerLines(str, lineLength) {\n    if (str.length > 128 * 1024) {\n      // do not test strings longer than 128kB\n      return true;\n    }\n    return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n  },\n  /**\n   * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n   *\n   * @param {String|Buffer} data String to be encoded\n   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n   * @return {String} Single or several mime words joined together\n   */\n  encodeWord: function encodeWord(data, mimeWordEncoding, maxLength) {\n    mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n    maxLength = maxLength || 0;\n    var encodedStr;\n    var toCharset = 'UTF-8';\n    if (maxLength && maxLength > 7 + toCharset.length) {\n      maxLength -= 7 + toCharset.length;\n    }\n    if (mimeWordEncoding === 'Q') {\n      // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n      encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, function (chr) {\n        var ord = chr.charCodeAt(0).toString(16).toUpperCase();\n        if (chr === ' ') {\n          return '_';\n        } else {\n          return '=' + (ord.length === 1 ? '0' + ord : ord);\n        }\n      });\n    } else if (mimeWordEncoding === 'B') {\n      encodedStr = typeof data === 'string' ? data : base64.encode(data);\n      maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;\n    }\n    if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {\n      if (mimeWordEncoding === 'Q') {\n        encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n      } else {\n        // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n        var parts = [];\n        var lpart = '';\n        for (var i = 0, len = encodedStr.length; i < len; i++) {\n          var chr = encodedStr.charAt(i);\n          if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n            // composite emoji byte, so add the next byte as well\n            chr += encodedStr.charAt(++i);\n          }\n\n          // check if we can add this character to the existing string\n          // without breaking byte length limit\n          if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n            lpart += chr;\n          } else {\n            // we hit the length limit, so push the existing string and start over\n            parts.push(base64.encode(lpart));\n            lpart = chr;\n          }\n        }\n        if (lpart) {\n          parts.push(base64.encode(lpart));\n        }\n        if (parts.length > 1) {\n          encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n        } else {\n          encodedStr = parts.join('');\n        }\n      }\n    } else if (mimeWordEncoding === 'B') {\n      encodedStr = base64.encode(data);\n    }\n    return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n  },\n  /**\n   * Finds word sequences with non ascii text and converts these to mime words\n   *\n   * @param {String} value String to be encoded\n   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n   * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n   * @return {String} String with possible mime words\n   */\n  encodeWords: function encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {\n    maxLength = maxLength || 0;\n    var encodedValue;\n\n    // find first word with a non-printable ascii or special symbol in it\n    var firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n    if (!firstMatch) {\n      return value;\n    }\n    if (encodeAll) {\n      // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n\n      return this.encodeWord(value, mimeWordEncoding, maxLength);\n    }\n\n    // find the last word with a non-printable ascii in it\n    var lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n    if (!lastMatch) {\n      // should not happen\n      return value;\n    }\n    var startIndex = firstMatch.index + (firstMatch[0].match(/[^\\s]/) || {\n      index: 0\n    }).index;\n    var endIndex = lastMatch.index + (lastMatch[1] || '').length;\n    encodedValue = (startIndex ? value.substr(0, startIndex) : '') + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) + (endIndex < value.length ? value.substr(endIndex) : '');\n    return encodedValue;\n  },\n  /**\n   * Joins parsed header value together as 'value; param1=value1; param2=value2'\n   * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n   *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n   * @param {Object} structured Parsed header value\n   * @return {String} joined header value\n   */\n  buildHeaderValue: function buildHeaderValue(structured) {\n    var _this = this;\n    var paramsArray = [];\n    Object.keys(structured.params || {}).forEach(function (param) {\n      // filename might include unicode characters so it is a special case\n      // other values probably do not\n      var value = structured.params[param];\n      if (!_this.isPlainText(value, true) || value.length >= 75) {\n        _this.buildHeaderParam(param, value, 50).forEach(function (encodedParam) {\n          if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n            paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n          } else {\n            paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n          }\n        });\n      } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n        paramsArray.push(param + '=' + JSON.stringify(value));\n      } else {\n        paramsArray.push(param + '=' + value);\n      }\n    });\n    return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n  },\n  /**\n   * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n   * Useful for splitting long parameter values.\n   *\n   * For example\n   *      title=\"unicode string\"\n   * becomes\n   *     title*0*=utf-8''unicode\n   *     title*1*=%20string\n   *\n   * @param {String|Buffer} data String to be encoded\n   * @param {Number} [maxLength=50] Max length for generated chunks\n   * @param {String} [fromCharset='UTF-8'] Source sharacter set\n   * @return {Array} A list of encoded keys and headers\n   */\n  buildHeaderParam: function buildHeaderParam(key, data, maxLength) {\n    var list = [];\n    var encodedStr = typeof data === 'string' ? data : (data || '').toString();\n    var encodedStrArr;\n    var chr, ord;\n    var line;\n    var startPos = 0;\n    var i, len;\n    maxLength = maxLength || 50;\n\n    // process ascii only text\n    if (this.isPlainText(data, true)) {\n      // check if conversion is even needed\n      if (encodedStr.length <= maxLength) {\n        return [{\n          key: key,\n          value: encodedStr\n        }];\n      }\n      encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), function (str) {\n        list.push({\n          line: str\n        });\n        return '';\n      });\n      if (encodedStr) {\n        list.push({\n          line: encodedStr\n        });\n      }\n    } else {\n      if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n        // string containts surrogate pairs, so normalize it to an array of bytes\n        encodedStrArr = [];\n        for (i = 0, len = encodedStr.length; i < len; i++) {\n          chr = encodedStr.charAt(i);\n          ord = chr.charCodeAt(0);\n          if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n            chr += encodedStr.charAt(i + 1);\n            encodedStrArr.push(chr);\n            i++;\n          } else {\n            encodedStrArr.push(chr);\n          }\n        }\n        encodedStr = encodedStrArr;\n      }\n\n      // first line includes the charset and language info and needs to be encoded\n      // even if it does not contain any unicode characters\n      line = 'utf-8\\x27\\x27';\n      var encoded = true;\n      startPos = 0;\n\n      // process text with unicode or special chars\n      for (i = 0, len = encodedStr.length; i < len; i++) {\n        chr = encodedStr[i];\n        if (encoded) {\n          chr = this.safeEncodeURIComponent(chr);\n        } else {\n          // try to urlencode current char\n          chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr);\n          // By default it is not required to encode a line, the need\n          // only appears when the string contains unicode or special chars\n          // in this case we start processing the line over and encode all chars\n          if (chr !== encodedStr[i]) {\n            // Check if it is even possible to add the encoded char to the line\n            // If not, there is no reason to use this line, just push it to the list\n            // and start a new line with the char that needs encoding\n            if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n              list.push({\n                line: line,\n                encoded: encoded\n              });\n              line = '';\n              startPos = i - 1;\n            } else {\n              encoded = true;\n              i = startPos;\n              line = '';\n              continue;\n            }\n          }\n        }\n\n        // if the line is already too long, push it to the list and start a new one\n        if ((line + chr).length >= maxLength) {\n          list.push({\n            line: line,\n            encoded: encoded\n          });\n          line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n          if (chr === encodedStr[i]) {\n            encoded = false;\n            startPos = i - 1;\n          } else {\n            encoded = true;\n          }\n        } else {\n          line += chr;\n        }\n      }\n      if (line) {\n        list.push({\n          line: line,\n          encoded: encoded\n        });\n      }\n    }\n    return list.map(function (item, i) {\n      return {\n        // encoded lines: {name}*{part}*\n        // unencoded lines: {name}*{part}\n        // if any line needs to be encoded then the first line (part==0) is always encoded\n        key: key + '*' + i + (item.encoded ? '*' : ''),\n        value: item.line\n      };\n    });\n  },\n  /**\n   * Parses a header value with key=value arguments into a structured\n   * object.\n   *\n   *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n   *   {\n   *     'value': 'text/plain',\n   *     'params': {\n   *       'charset': 'UTF-8'\n   *     }\n   *   }\n   *\n   * @param {String} str Header value\n   * @return {Object} Header value as a parsed structure\n   */\n  parseHeaderValue: function parseHeaderValue(str) {\n    var response = {\n      value: false,\n      params: {}\n    };\n    var key = false;\n    var value = '';\n    var type = 'value';\n    var quote = false;\n    var escaped = false;\n    var chr;\n    for (var i = 0, len = str.length; i < len; i++) {\n      chr = str.charAt(i);\n      if (type === 'key') {\n        if (chr === '=') {\n          key = value.trim().toLowerCase();\n          type = 'value';\n          value = '';\n          continue;\n        }\n        value += chr;\n      } else {\n        if (escaped) {\n          value += chr;\n        } else if (chr === '\\\\') {\n          escaped = true;\n          continue;\n        } else if (quote && chr === quote) {\n          quote = false;\n        } else if (!quote && chr === '\"') {\n          quote = chr;\n        } else if (!quote && chr === ';') {\n          if (key === false) {\n            response.value = value.trim();\n          } else {\n            response.params[key] = value.trim();\n          }\n          type = 'key';\n          value = '';\n        } else {\n          value += chr;\n        }\n        escaped = false;\n      }\n    }\n    if (type === 'value') {\n      if (key === false) {\n        response.value = value.trim();\n      } else {\n        response.params[key] = value.trim();\n      }\n    } else if (value.trim()) {\n      response.params[value.trim().toLowerCase()] = '';\n    }\n\n    // handle parameter value continuations\n    // https://tools.ietf.org/html/rfc2231#section-3\n\n    // preprocess values\n    Object.keys(response.params).forEach(function (key) {\n      var actualKey, nr, match, value;\n      if (match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/)) {\n        actualKey = key.substr(0, match.index);\n        nr = Number(match[2] || match[3]) || 0;\n        if (!response.params[actualKey] || _typeof(response.params[actualKey]) !== 'object') {\n          response.params[actualKey] = {\n            charset: false,\n            values: []\n          };\n        }\n        value = response.params[key];\n        if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n          response.params[actualKey].charset = match[1] || 'iso-8859-1';\n          value = match[2];\n        }\n        response.params[actualKey].values[nr] = value;\n\n        // remove the old reference\n        delete response.params[key];\n      }\n    });\n\n    // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n    Object.keys(response.params).forEach(function (key) {\n      var value;\n      if (response.params[key] && Array.isArray(response.params[key].values)) {\n        value = response.params[key].values.map(function (val) {\n          return val || '';\n        }).join('');\n        if (response.params[key].charset) {\n          // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n          response.params[key] = '=?' + response.params[key].charset + '?Q?' + value\n          // fix invalidly encoded chars\n          .replace(/[=?_\\s]/g, function (s) {\n            var c = s.charCodeAt(0).toString(16);\n            if (s === ' ') {\n              return '_';\n            } else {\n              return '%' + (c.length < 2 ? '0' : '') + c;\n            }\n          })\n          // change from urlencoding to percent encoding\n          .replace(/%/g, '=') + '?=';\n        } else {\n          response.params[key] = value;\n        }\n      }\n    });\n    return response;\n  },\n  /**\n   * Returns file extension for a content type string. If no suitable extensions\n   * are found, 'bin' is used as the default extension\n   *\n   * @param {String} mimeType Content type to be checked for\n   * @return {String} File extension\n   */\n  detectExtension: function detectExtension(mimeType) {\n    return mimeTypes.detectExtension(mimeType);\n  },\n  /**\n   * Returns content type for a file extension. If no suitable content types\n   * are found, 'application/octet-stream' is used as the default content type\n   *\n   * @param {String} extension Extension to be checked for\n   * @return {String} File extension\n   */\n  detectMimeType: function detectMimeType(extension) {\n    return mimeTypes.detectMimeType(extension);\n  },\n  /**\n   * Folds long lines, useful for folding header lines (afterSpace=false) and\n   * flowed text (afterSpace=true)\n   *\n   * @param {String} str String to be folded\n   * @param {Number} [lineLength=76] Maximum length of a line\n   * @param {Boolean} afterSpace If true, leave a space in th end of a line\n   * @return {String} String with folded lines\n   */\n  foldLines: function foldLines(str, lineLength, afterSpace) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n    var pos = 0,\n      len = str.length,\n      result = '',\n      line,\n      match;\n    while (pos < len) {\n      line = str.substr(pos, lineLength);\n      if (line.length < lineLength) {\n        result += line;\n        break;\n      }\n      if (match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/)) {\n        line = match[0];\n        result += line;\n        pos += line.length;\n        continue;\n      } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n        line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n      } else if (match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/)) {\n        line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n      }\n      result += line;\n      pos += line.length;\n      if (pos < len) {\n        result += '\\r\\n';\n      }\n    }\n    return result;\n  },\n  /**\n   * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n   *\n   * @param {String} str Mime encoded string to be split up\n   * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n   * @return {Array} Split string\n   */\n  splitMimeEncodedString: function splitMimeEncodedString(str, maxlen) {\n    var curLine,\n      match,\n      chr,\n      done,\n      lines = [];\n\n    // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n    maxlen = Math.max(maxlen || 0, 12);\n    while (str.length) {\n      curLine = str.substr(0, maxlen);\n\n      // move incomplete escaped char back to main\n      if (match = curLine.match(/[=][0-9A-F]?$/i)) {\n        curLine = curLine.substr(0, match.index);\n      }\n      done = false;\n      while (!done) {\n        done = true;\n        // check if not middle of a unicode char sequence\n        if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {\n          chr = parseInt(match[1], 16);\n          // invalid sequence, move one char back anc recheck\n          if (chr < 0xc2 && chr > 0x7f) {\n            curLine = curLine.substr(0, curLine.length - 3);\n            done = false;\n          }\n        }\n      }\n      if (curLine.length) {\n        lines.push(curLine);\n      }\n      str = str.substr(curLine.length);\n    }\n    return lines;\n  },\n  encodeURICharComponent: function encodeURICharComponent(chr) {\n    var res = '';\n    var ord = chr.charCodeAt(0).toString(16).toUpperCase();\n    if (ord.length % 2) {\n      ord = '0' + ord;\n    }\n    if (ord.length > 2) {\n      for (var i = 0, len = ord.length / 2; i < len; i++) {\n        res += '%' + ord.substr(i, 2);\n      }\n    } else {\n      res += '%' + ord;\n    }\n    return res;\n  },\n  safeEncodeURIComponent: function safeEncodeURIComponent(str) {\n    var _this2 = this;\n    str = (str || '').toString();\n    try {\n      // might throw if we try to encode invalid sequences, eg. partial emoji\n      str = encodeURIComponent(str);\n    } catch (E) {\n      // should never run\n      return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n    }\n\n    // ensure chars that are not handled by encodeURICompent are converted as well\n    return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, function (chr) {\n      return _this2.encodeURICharComponent(chr);\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/mime-types.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint quote-props: 0 */\n\n\n\nvar path = __webpack_require__(/*! path */ \"path\");\nvar defaultMimeType = 'application/octet-stream';\nvar defaultExtension = 'bin';\nvar mimeTypes = new Map([['application/acad', 'dwg'], ['application/applixware', 'aw'], ['application/arj', 'arj'], ['application/atom+xml', 'xml'], ['application/atomcat+xml', 'atomcat'], ['application/atomsvc+xml', 'atomsvc'], ['application/base64', ['mm', 'mme']], ['application/binhex', 'hqx'], ['application/binhex4', 'hqx'], ['application/book', ['book', 'boo']], ['application/ccxml+xml,', 'ccxml'], ['application/cdf', 'cdf'], ['application/cdmi-capability', 'cdmia'], ['application/cdmi-container', 'cdmic'], ['application/cdmi-domain', 'cdmid'], ['application/cdmi-object', 'cdmio'], ['application/cdmi-queue', 'cdmiq'], ['application/clariscad', 'ccad'], ['application/commonground', 'dp'], ['application/cu-seeme', 'cu'], ['application/davmount+xml', 'davmount'], ['application/drafting', 'drw'], ['application/dsptype', 'tsp'], ['application/dssc+der', 'dssc'], ['application/dssc+xml', 'xdssc'], ['application/dxf', 'dxf'], ['application/ecmascript', ['js', 'es']], ['application/emma+xml', 'emma'], ['application/envoy', 'evy'], ['application/epub+zip', 'epub'], ['application/excel', ['xls', 'xl', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']], ['application/exi', 'exi'], ['application/font-tdpfr', 'pfr'], ['application/fractals', 'fif'], ['application/freeloader', 'frl'], ['application/futuresplash', 'spl'], ['application/gnutar', 'tgz'], ['application/groupwise', 'vew'], ['application/hlp', 'hlp'], ['application/hta', 'hta'], ['application/hyperstudio', 'stk'], ['application/i-deas', 'unv'], ['application/iges', ['iges', 'igs']], ['application/inf', 'inf'], ['application/internet-property-stream', 'acx'], ['application/ipfix', 'ipfix'], ['application/java', 'class'], ['application/java-archive', 'jar'], ['application/java-byte-code', 'class'], ['application/java-serialized-object', 'ser'], ['application/java-vm', 'class'], ['application/javascript', 'js'], ['application/json', 'json'], ['application/lha', 'lha'], ['application/lzx', 'lzx'], ['application/mac-binary', 'bin'], ['application/mac-binhex', 'hqx'], ['application/mac-binhex40', 'hqx'], ['application/mac-compactpro', 'cpt'], ['application/macbinary', 'bin'], ['application/mads+xml', 'mads'], ['application/marc', 'mrc'], ['application/marcxml+xml', 'mrcx'], ['application/mathematica', 'ma'], ['application/mathml+xml', 'mathml'], ['application/mbedlet', 'mbd'], ['application/mbox', 'mbox'], ['application/mcad', 'mcd'], ['application/mediaservercontrol+xml', 'mscml'], ['application/metalink4+xml', 'meta4'], ['application/mets+xml', 'mets'], ['application/mime', 'aps'], ['application/mods+xml', 'mods'], ['application/mp21', 'm21'], ['application/mp4', 'mp4'], ['application/mspowerpoint', ['ppt', 'pot', 'pps', 'ppz']], ['application/msword', ['doc', 'dot', 'w6w', 'wiz', 'word']], ['application/mswrite', 'wri'], ['application/mxf', 'mxf'], ['application/netmc', 'mcp'], ['application/octet-stream', ['*']], ['application/oda', 'oda'], ['application/oebps-package+xml', 'opf'], ['application/ogg', 'ogx'], ['application/olescript', 'axs'], ['application/onenote', 'onetoc'], ['application/patch-ops-error+xml', 'xer'], ['application/pdf', 'pdf'], ['application/pgp-encrypted', 'asc'], ['application/pgp-signature', 'pgp'], ['application/pics-rules', 'prf'], ['application/pkcs-12', 'p12'], ['application/pkcs-crl', 'crl'], ['application/pkcs10', 'p10'], ['application/pkcs7-mime', ['p7c', 'p7m']], ['application/pkcs7-signature', 'p7s'], ['application/pkcs8', 'p8'], ['application/pkix-attr-cert', 'ac'], ['application/pkix-cert', ['cer', 'crt']], ['application/pkix-crl', 'crl'], ['application/pkix-pkipath', 'pkipath'], ['application/pkixcmp', 'pki'], ['application/plain', 'text'], ['application/pls+xml', 'pls'], ['application/postscript', ['ps', 'ai', 'eps']], ['application/powerpoint', 'ppt'], ['application/pro_eng', ['part', 'prt']], ['application/prs.cww', 'cww'], ['application/pskc+xml', 'pskcxml'], ['application/rdf+xml', 'rdf'], ['application/reginfo+xml', 'rif'], ['application/relax-ng-compact-syntax', 'rnc'], ['application/resource-lists+xml', 'rl'], ['application/resource-lists-diff+xml', 'rld'], ['application/ringing-tones', 'rng'], ['application/rls-services+xml', 'rs'], ['application/rsd+xml', 'rsd'], ['application/rss+xml', 'xml'], ['application/rtf', ['rtf', 'rtx']], ['application/sbml+xml', 'sbml'], ['application/scvp-cv-request', 'scq'], ['application/scvp-cv-response', 'scs'], ['application/scvp-vp-request', 'spq'], ['application/scvp-vp-response', 'spp'], ['application/sdp', 'sdp'], ['application/sea', 'sea'], ['application/set', 'set'], ['application/set-payment-initiation', 'setpay'], ['application/set-registration-initiation', 'setreg'], ['application/shf+xml', 'shf'], ['application/sla', 'stl'], ['application/smil', ['smi', 'smil']], ['application/smil+xml', 'smi'], ['application/solids', 'sol'], ['application/sounder', 'sdr'], ['application/sparql-query', 'rq'], ['application/sparql-results+xml', 'srx'], ['application/srgs', 'gram'], ['application/srgs+xml', 'grxml'], ['application/sru+xml', 'sru'], ['application/ssml+xml', 'ssml'], ['application/step', ['step', 'stp']], ['application/streamingmedia', 'ssm'], ['application/tei+xml', 'tei'], ['application/thraud+xml', 'tfi'], ['application/timestamped-data', 'tsd'], ['application/toolbook', 'tbk'], ['application/vda', 'vda'], ['application/vnd.3gpp.pic-bw-large', 'plb'], ['application/vnd.3gpp.pic-bw-small', 'psb'], ['application/vnd.3gpp.pic-bw-var', 'pvb'], ['application/vnd.3gpp2.tcap', 'tcap'], ['application/vnd.3m.post-it-notes', 'pwn'], ['application/vnd.accpac.simply.aso', 'aso'], ['application/vnd.accpac.simply.imp', 'imp'], ['application/vnd.acucobol', 'acu'], ['application/vnd.acucorp', 'atc'], ['application/vnd.adobe.air-application-installer-package+zip', 'air'], ['application/vnd.adobe.fxp', 'fxp'], ['application/vnd.adobe.xdp+xml', 'xdp'], ['application/vnd.adobe.xfdf', 'xfdf'], ['application/vnd.ahead.space', 'ahead'], ['application/vnd.airzip.filesecure.azf', 'azf'], ['application/vnd.airzip.filesecure.azs', 'azs'], ['application/vnd.amazon.ebook', 'azw'], ['application/vnd.americandynamics.acc', 'acc'], ['application/vnd.amiga.ami', 'ami'], ['application/vnd.android.package-archive', 'apk'], ['application/vnd.anser-web-certificate-issue-initiation', 'cii'], ['application/vnd.anser-web-funds-transfer-initiation', 'fti'], ['application/vnd.antix.game-component', 'atx'], ['application/vnd.apple.installer+xml', 'mpkg'], ['application/vnd.apple.mpegurl', 'm3u8'], ['application/vnd.aristanetworks.swi', 'swi'], ['application/vnd.audiograph', 'aep'], ['application/vnd.blueice.multipass', 'mpm'], ['application/vnd.bmi', 'bmi'], ['application/vnd.businessobjects', 'rep'], ['application/vnd.chemdraw+xml', 'cdxml'], ['application/vnd.chipnuts.karaoke-mmd', 'mmd'], ['application/vnd.cinderella', 'cdy'], ['application/vnd.claymore', 'cla'], ['application/vnd.cloanto.rp9', 'rp9'], ['application/vnd.clonk.c4group', 'c4g'], ['application/vnd.cluetrust.cartomobile-config', 'c11amc'], ['application/vnd.cluetrust.cartomobile-config-pkg', 'c11amz'], ['application/vnd.commonspace', 'csp'], ['application/vnd.contact.cmsg', 'cdbcmsg'], ['application/vnd.cosmocaller', 'cmc'], ['application/vnd.crick.clicker', 'clkx'], ['application/vnd.crick.clicker.keyboard', 'clkk'], ['application/vnd.crick.clicker.palette', 'clkp'], ['application/vnd.crick.clicker.template', 'clkt'], ['application/vnd.crick.clicker.wordbank', 'clkw'], ['application/vnd.criticaltools.wbs+xml', 'wbs'], ['application/vnd.ctc-posml', 'pml'], ['application/vnd.cups-ppd', 'ppd'], ['application/vnd.curl.car', 'car'], ['application/vnd.curl.pcurl', 'pcurl'], ['application/vnd.data-vision.rdz', 'rdz'], ['application/vnd.denovo.fcselayout-link', 'fe_launch'], ['application/vnd.dna', 'dna'], ['application/vnd.dolby.mlp', 'mlp'], ['application/vnd.dpgraph', 'dpg'], ['application/vnd.dreamfactory', 'dfac'], ['application/vnd.dvb.ait', 'ait'], ['application/vnd.dvb.service', 'svc'], ['application/vnd.dynageo', 'geo'], ['application/vnd.ecowin.chart', 'mag'], ['application/vnd.enliven', 'nml'], ['application/vnd.epson.esf', 'esf'], ['application/vnd.epson.msf', 'msf'], ['application/vnd.epson.quickanime', 'qam'], ['application/vnd.epson.salt', 'slt'], ['application/vnd.epson.ssf', 'ssf'], ['application/vnd.eszigno3+xml', 'es3'], ['application/vnd.ezpix-album', 'ez2'], ['application/vnd.ezpix-package', 'ez3'], ['application/vnd.fdf', 'fdf'], ['application/vnd.fdsn.seed', 'seed'], ['application/vnd.flographit', 'gph'], ['application/vnd.fluxtime.clip', 'ftc'], ['application/vnd.framemaker', 'fm'], ['application/vnd.frogans.fnc', 'fnc'], ['application/vnd.frogans.ltf', 'ltf'], ['application/vnd.fsc.weblaunch', 'fsc'], ['application/vnd.fujitsu.oasys', 'oas'], ['application/vnd.fujitsu.oasys2', 'oa2'], ['application/vnd.fujitsu.oasys3', 'oa3'], ['application/vnd.fujitsu.oasysgp', 'fg5'], ['application/vnd.fujitsu.oasysprs', 'bh2'], ['application/vnd.fujixerox.ddd', 'ddd'], ['application/vnd.fujixerox.docuworks', 'xdw'], ['application/vnd.fujixerox.docuworks.binder', 'xbd'], ['application/vnd.fuzzysheet', 'fzs'], ['application/vnd.genomatix.tuxedo', 'txd'], ['application/vnd.geogebra.file', 'ggb'], ['application/vnd.geogebra.tool', 'ggt'], ['application/vnd.geometry-explorer', 'gex'], ['application/vnd.geonext', 'gxt'], ['application/vnd.geoplan', 'g2w'], ['application/vnd.geospace', 'g3w'], ['application/vnd.gmx', 'gmx'], ['application/vnd.google-earth.kml+xml', 'kml'], ['application/vnd.google-earth.kmz', 'kmz'], ['application/vnd.grafeq', 'gqf'], ['application/vnd.groove-account', 'gac'], ['application/vnd.groove-help', 'ghf'], ['application/vnd.groove-identity-message', 'gim'], ['application/vnd.groove-injector', 'grv'], ['application/vnd.groove-tool-message', 'gtm'], ['application/vnd.groove-tool-template', 'tpl'], ['application/vnd.groove-vcard', 'vcg'], ['application/vnd.hal+xml', 'hal'], ['application/vnd.handheld-entertainment+xml', 'zmm'], ['application/vnd.hbci', 'hbci'], ['application/vnd.hhe.lesson-player', 'les'], ['application/vnd.hp-hpgl', ['hgl', 'hpg', 'hpgl']], ['application/vnd.hp-hpid', 'hpid'], ['application/vnd.hp-hps', 'hps'], ['application/vnd.hp-jlyt', 'jlt'], ['application/vnd.hp-pcl', 'pcl'], ['application/vnd.hp-pclxl', 'pclxl'], ['application/vnd.hydrostatix.sof-data', 'sfd-hdstx'], ['application/vnd.hzn-3d-crossword', 'x3d'], ['application/vnd.ibm.minipay', 'mpy'], ['application/vnd.ibm.modcap', 'afp'], ['application/vnd.ibm.rights-management', 'irm'], ['application/vnd.ibm.secure-container', 'sc'], ['application/vnd.iccprofile', 'icc'], ['application/vnd.igloader', 'igl'], ['application/vnd.immervision-ivp', 'ivp'], ['application/vnd.immervision-ivu', 'ivu'], ['application/vnd.insors.igm', 'igm'], ['application/vnd.intercon.formnet', 'xpw'], ['application/vnd.intergeo', 'i2g'], ['application/vnd.intu.qbo', 'qbo'], ['application/vnd.intu.qfx', 'qfx'], ['application/vnd.ipunplugged.rcprofile', 'rcprofile'], ['application/vnd.irepository.package+xml', 'irp'], ['application/vnd.is-xpr', 'xpr'], ['application/vnd.isac.fcs', 'fcs'], ['application/vnd.jam', 'jam'], ['application/vnd.jcp.javame.midlet-rms', 'rms'], ['application/vnd.jisp', 'jisp'], ['application/vnd.joost.joda-archive', 'joda'], ['application/vnd.kahootz', 'ktz'], ['application/vnd.kde.karbon', 'karbon'], ['application/vnd.kde.kchart', 'chrt'], ['application/vnd.kde.kformula', 'kfo'], ['application/vnd.kde.kivio', 'flw'], ['application/vnd.kde.kontour', 'kon'], ['application/vnd.kde.kpresenter', 'kpr'], ['application/vnd.kde.kspread', 'ksp'], ['application/vnd.kde.kword', 'kwd'], ['application/vnd.kenameaapp', 'htke'], ['application/vnd.kidspiration', 'kia'], ['application/vnd.kinar', 'kne'], ['application/vnd.koan', 'skp'], ['application/vnd.kodak-descriptor', 'sse'], ['application/vnd.las.las+xml', 'lasxml'], ['application/vnd.llamagraphics.life-balance.desktop', 'lbd'], ['application/vnd.llamagraphics.life-balance.exchange+xml', 'lbe'], ['application/vnd.lotus-1-2-3', '123'], ['application/vnd.lotus-approach', 'apr'], ['application/vnd.lotus-freelance', 'pre'], ['application/vnd.lotus-notes', 'nsf'], ['application/vnd.lotus-organizer', 'org'], ['application/vnd.lotus-screencam', 'scm'], ['application/vnd.lotus-wordpro', 'lwp'], ['application/vnd.macports.portpkg', 'portpkg'], ['application/vnd.mcd', 'mcd'], ['application/vnd.medcalcdata', 'mc1'], ['application/vnd.mediastation.cdkey', 'cdkey'], ['application/vnd.mfer', 'mwf'], ['application/vnd.mfmp', 'mfm'], ['application/vnd.micrografx.flo', 'flo'], ['application/vnd.micrografx.igx', 'igx'], ['application/vnd.mif', 'mif'], ['application/vnd.mobius.daf', 'daf'], ['application/vnd.mobius.dis', 'dis'], ['application/vnd.mobius.mbk', 'mbk'], ['application/vnd.mobius.mqy', 'mqy'], ['application/vnd.mobius.msl', 'msl'], ['application/vnd.mobius.plc', 'plc'], ['application/vnd.mobius.txf', 'txf'], ['application/vnd.mophun.application', 'mpn'], ['application/vnd.mophun.certificate', 'mpc'], ['application/vnd.mozilla.xul+xml', 'xul'], ['application/vnd.ms-artgalry', 'cil'], ['application/vnd.ms-cab-compressed', 'cab'], ['application/vnd.ms-excel', ['xls', 'xla', 'xlc', 'xlm', 'xlt', 'xlw', 'xlb', 'xll']], ['application/vnd.ms-excel.addin.macroenabled.12', 'xlam'], ['application/vnd.ms-excel.sheet.binary.macroenabled.12', 'xlsb'], ['application/vnd.ms-excel.sheet.macroenabled.12', 'xlsm'], ['application/vnd.ms-excel.template.macroenabled.12', 'xltm'], ['application/vnd.ms-fontobject', 'eot'], ['application/vnd.ms-htmlhelp', 'chm'], ['application/vnd.ms-ims', 'ims'], ['application/vnd.ms-lrm', 'lrm'], ['application/vnd.ms-officetheme', 'thmx'], ['application/vnd.ms-outlook', 'msg'], ['application/vnd.ms-pki.certstore', 'sst'], ['application/vnd.ms-pki.pko', 'pko'], ['application/vnd.ms-pki.seccat', 'cat'], ['application/vnd.ms-pki.stl', 'stl'], ['application/vnd.ms-pkicertstore', 'sst'], ['application/vnd.ms-pkiseccat', 'cat'], ['application/vnd.ms-pkistl', 'stl'], ['application/vnd.ms-powerpoint', ['ppt', 'pot', 'pps', 'ppa', 'pwz']], ['application/vnd.ms-powerpoint.addin.macroenabled.12', 'ppam'], ['application/vnd.ms-powerpoint.presentation.macroenabled.12', 'pptm'], ['application/vnd.ms-powerpoint.slide.macroenabled.12', 'sldm'], ['application/vnd.ms-powerpoint.slideshow.macroenabled.12', 'ppsm'], ['application/vnd.ms-powerpoint.template.macroenabled.12', 'potm'], ['application/vnd.ms-project', 'mpp'], ['application/vnd.ms-word.document.macroenabled.12', 'docm'], ['application/vnd.ms-word.template.macroenabled.12', 'dotm'], ['application/vnd.ms-works', ['wks', 'wcm', 'wdb', 'wps']], ['application/vnd.ms-wpl', 'wpl'], ['application/vnd.ms-xpsdocument', 'xps'], ['application/vnd.mseq', 'mseq'], ['application/vnd.musician', 'mus'], ['application/vnd.muvee.style', 'msty'], ['application/vnd.neurolanguage.nlu', 'nlu'], ['application/vnd.noblenet-directory', 'nnd'], ['application/vnd.noblenet-sealer', 'nns'], ['application/vnd.noblenet-web', 'nnw'], ['application/vnd.nokia.configuration-message', 'ncm'], ['application/vnd.nokia.n-gage.data', 'ngdat'], ['application/vnd.nokia.n-gage.symbian.install', 'n-gage'], ['application/vnd.nokia.radio-preset', 'rpst'], ['application/vnd.nokia.radio-presets', 'rpss'], ['application/vnd.nokia.ringing-tone', 'rng'], ['application/vnd.novadigm.edm', 'edm'], ['application/vnd.novadigm.edx', 'edx'], ['application/vnd.novadigm.ext', 'ext'], ['application/vnd.oasis.opendocument.chart', 'odc'], ['application/vnd.oasis.opendocument.chart-template', 'otc'], ['application/vnd.oasis.opendocument.database', 'odb'], ['application/vnd.oasis.opendocument.formula', 'odf'], ['application/vnd.oasis.opendocument.formula-template', 'odft'], ['application/vnd.oasis.opendocument.graphics', 'odg'], ['application/vnd.oasis.opendocument.graphics-template', 'otg'], ['application/vnd.oasis.opendocument.image', 'odi'], ['application/vnd.oasis.opendocument.image-template', 'oti'], ['application/vnd.oasis.opendocument.presentation', 'odp'], ['application/vnd.oasis.opendocument.presentation-template', 'otp'], ['application/vnd.oasis.opendocument.spreadsheet', 'ods'], ['application/vnd.oasis.opendocument.spreadsheet-template', 'ots'], ['application/vnd.oasis.opendocument.text', 'odt'], ['application/vnd.oasis.opendocument.text-master', 'odm'], ['application/vnd.oasis.opendocument.text-template', 'ott'], ['application/vnd.oasis.opendocument.text-web', 'oth'], ['application/vnd.olpc-sugar', 'xo'], ['application/vnd.oma.dd2+xml', 'dd2'], ['application/vnd.openofficeorg.extension', 'oxt'], ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'pptx'], ['application/vnd.openxmlformats-officedocument.presentationml.slide', 'sldx'], ['application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'ppsx'], ['application/vnd.openxmlformats-officedocument.presentationml.template', 'potx'], ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlsx'], ['application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'xltx'], ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'docx'], ['application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'dotx'], ['application/vnd.osgeo.mapguide.package', 'mgp'], ['application/vnd.osgi.dp', 'dp'], ['application/vnd.palm', 'pdb'], ['application/vnd.pawaafile', 'paw'], ['application/vnd.pg.format', 'str'], ['application/vnd.pg.osasli', 'ei6'], ['application/vnd.picsel', 'efif'], ['application/vnd.pmi.widget', 'wg'], ['application/vnd.pocketlearn', 'plf'], ['application/vnd.powerbuilder6', 'pbd'], ['application/vnd.previewsystems.box', 'box'], ['application/vnd.proteus.magazine', 'mgz'], ['application/vnd.publishare-delta-tree', 'qps'], ['application/vnd.pvi.ptid1', 'ptid'], ['application/vnd.quark.quarkxpress', 'qxd'], ['application/vnd.realvnc.bed', 'bed'], ['application/vnd.recordare.musicxml', 'mxl'], ['application/vnd.recordare.musicxml+xml', 'musicxml'], ['application/vnd.rig.cryptonote', 'cryptonote'], ['application/vnd.rim.cod', 'cod'], ['application/vnd.rn-realmedia', 'rm'], ['application/vnd.rn-realplayer', 'rnx'], ['application/vnd.route66.link66+xml', 'link66'], ['application/vnd.sailingtracker.track', 'st'], ['application/vnd.seemail', 'see'], ['application/vnd.sema', 'sema'], ['application/vnd.semd', 'semd'], ['application/vnd.semf', 'semf'], ['application/vnd.shana.informed.formdata', 'ifm'], ['application/vnd.shana.informed.formtemplate', 'itp'], ['application/vnd.shana.informed.interchange', 'iif'], ['application/vnd.shana.informed.package', 'ipk'], ['application/vnd.simtech-mindmapper', 'twd'], ['application/vnd.smaf', 'mmf'], ['application/vnd.smart.teacher', 'teacher'], ['application/vnd.solent.sdkm+xml', 'sdkm'], ['application/vnd.spotfire.dxp', 'dxp'], ['application/vnd.spotfire.sfs', 'sfs'], ['application/vnd.stardivision.calc', 'sdc'], ['application/vnd.stardivision.draw', 'sda'], ['application/vnd.stardivision.impress', 'sdd'], ['application/vnd.stardivision.math', 'smf'], ['application/vnd.stardivision.writer', 'sdw'], ['application/vnd.stardivision.writer-global', 'sgl'], ['application/vnd.stepmania.stepchart', 'sm'], ['application/vnd.sun.xml.calc', 'sxc'], ['application/vnd.sun.xml.calc.template', 'stc'], ['application/vnd.sun.xml.draw', 'sxd'], ['application/vnd.sun.xml.draw.template', 'std'], ['application/vnd.sun.xml.impress', 'sxi'], ['application/vnd.sun.xml.impress.template', 'sti'], ['application/vnd.sun.xml.math', 'sxm'], ['application/vnd.sun.xml.writer', 'sxw'], ['application/vnd.sun.xml.writer.global', 'sxg'], ['application/vnd.sun.xml.writer.template', 'stw'], ['application/vnd.sus-calendar', 'sus'], ['application/vnd.svd', 'svd'], ['application/vnd.symbian.install', 'sis'], ['application/vnd.syncml+xml', 'xsm'], ['application/vnd.syncml.dm+wbxml', 'bdm'], ['application/vnd.syncml.dm+xml', 'xdm'], ['application/vnd.tao.intent-module-archive', 'tao'], ['application/vnd.tmobile-livetv', 'tmo'], ['application/vnd.trid.tpt', 'tpt'], ['application/vnd.triscape.mxs', 'mxs'], ['application/vnd.trueapp', 'tra'], ['application/vnd.ufdl', 'ufd'], ['application/vnd.uiq.theme', 'utz'], ['application/vnd.umajin', 'umj'], ['application/vnd.unity', 'unityweb'], ['application/vnd.uoml+xml', 'uoml'], ['application/vnd.vcx', 'vcx'], ['application/vnd.visio', 'vsd'], ['application/vnd.visionary', 'vis'], ['application/vnd.vsf', 'vsf'], ['application/vnd.wap.wbxml', 'wbxml'], ['application/vnd.wap.wmlc', 'wmlc'], ['application/vnd.wap.wmlscriptc', 'wmlsc'], ['application/vnd.webturbo', 'wtb'], ['application/vnd.wolfram.player', 'nbp'], ['application/vnd.wordperfect', 'wpd'], ['application/vnd.wqd', 'wqd'], ['application/vnd.wt.stf', 'stf'], ['application/vnd.xara', ['web', 'xar']], ['application/vnd.xfdl', 'xfdl'], ['application/vnd.yamaha.hv-dic', 'hvd'], ['application/vnd.yamaha.hv-script', 'hvs'], ['application/vnd.yamaha.hv-voice', 'hvp'], ['application/vnd.yamaha.openscoreformat', 'osf'], ['application/vnd.yamaha.openscoreformat.osfpvg+xml', 'osfpvg'], ['application/vnd.yamaha.smaf-audio', 'saf'], ['application/vnd.yamaha.smaf-phrase', 'spf'], ['application/vnd.yellowriver-custom-menu', 'cmp'], ['application/vnd.zul', 'zir'], ['application/vnd.zzazz.deck+xml', 'zaz'], ['application/vocaltec-media-desc', 'vmd'], ['application/vocaltec-media-file', 'vmf'], ['application/voicexml+xml', 'vxml'], ['application/widget', 'wgt'], ['application/winhlp', 'hlp'], ['application/wordperfect', ['wp', 'wp5', 'wp6', 'wpd']], ['application/wordperfect6.0', ['w60', 'wp5']], ['application/wordperfect6.1', 'w61'], ['application/wsdl+xml', 'wsdl'], ['application/wspolicy+xml', 'wspolicy'], ['application/x-123', 'wk1'], ['application/x-7z-compressed', '7z'], ['application/x-abiword', 'abw'], ['application/x-ace-compressed', 'ace'], ['application/x-aim', 'aim'], ['application/x-authorware-bin', 'aab'], ['application/x-authorware-map', 'aam'], ['application/x-authorware-seg', 'aas'], ['application/x-bcpio', 'bcpio'], ['application/x-binary', 'bin'], ['application/x-binhex40', 'hqx'], ['application/x-bittorrent', 'torrent'], ['application/x-bsh', ['bsh', 'sh', 'shar']], ['application/x-bytecode.elisp', 'elc'], ['application/x-bytecode.python', 'pyc'], ['application/x-bzip', 'bz'], ['application/x-bzip2', ['boz', 'bz2']], ['application/x-cdf', 'cdf'], ['application/x-cdlink', 'vcd'], ['application/x-chat', ['cha', 'chat']], ['application/x-chess-pgn', 'pgn'], ['application/x-cmu-raster', 'ras'], ['application/x-cocoa', 'cco'], ['application/x-compactpro', 'cpt'], ['application/x-compress', 'z'], ['application/x-compressed', ['tgz', 'gz', 'z', 'zip']], ['application/x-conference', 'nsc'], ['application/x-cpio', 'cpio'], ['application/x-cpt', 'cpt'], ['application/x-csh', 'csh'], ['application/x-debian-package', 'deb'], ['application/x-deepv', 'deepv'], ['application/x-director', ['dir', 'dcr', 'dxr']], ['application/x-doom', 'wad'], ['application/x-dtbncx+xml', 'ncx'], ['application/x-dtbook+xml', 'dtb'], ['application/x-dtbresource+xml', 'res'], ['application/x-dvi', 'dvi'], ['application/x-elc', 'elc'], ['application/x-envoy', ['env', 'evy']], ['application/x-esrehber', 'es'], ['application/x-excel', ['xls', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']], ['application/x-font-bdf', 'bdf'], ['application/x-font-ghostscript', 'gsf'], ['application/x-font-linux-psf', 'psf'], ['application/x-font-otf', 'otf'], ['application/x-font-pcf', 'pcf'], ['application/x-font-snf', 'snf'], ['application/x-font-ttf', 'ttf'], ['application/x-font-type1', 'pfa'], ['application/x-font-woff', 'woff'], ['application/x-frame', 'mif'], ['application/x-freelance', 'pre'], ['application/x-futuresplash', 'spl'], ['application/x-gnumeric', 'gnumeric'], ['application/x-gsp', 'gsp'], ['application/x-gss', 'gss'], ['application/x-gtar', 'gtar'], ['application/x-gzip', ['gz', 'gzip']], ['application/x-hdf', 'hdf'], ['application/x-helpfile', ['help', 'hlp']], ['application/x-httpd-imap', 'imap'], ['application/x-ima', 'ima'], ['application/x-internet-signup', ['ins', 'isp']], ['application/x-internett-signup', 'ins'], ['application/x-inventor', 'iv'], ['application/x-ip2', 'ip'], ['application/x-iphone', 'iii'], ['application/x-java-class', 'class'], ['application/x-java-commerce', 'jcm'], ['application/x-java-jnlp-file', 'jnlp'], ['application/x-javascript', 'js'], ['application/x-koan', ['skd', 'skm', 'skp', 'skt']], ['application/x-ksh', 'ksh'], ['application/x-latex', ['latex', 'ltx']], ['application/x-lha', 'lha'], ['application/x-lisp', 'lsp'], ['application/x-livescreen', 'ivy'], ['application/x-lotus', 'wq1'], ['application/x-lotusscreencam', 'scm'], ['application/x-lzh', 'lzh'], ['application/x-lzx', 'lzx'], ['application/x-mac-binhex40', 'hqx'], ['application/x-macbinary', 'bin'], ['application/x-magic-cap-package-1.0', 'mc$'], ['application/x-mathcad', 'mcd'], ['application/x-meme', 'mm'], ['application/x-midi', ['mid', 'midi']], ['application/x-mif', 'mif'], ['application/x-mix-transfer', 'nix'], ['application/x-mobipocket-ebook', 'prc'], ['application/x-mplayer2', 'asx'], ['application/x-ms-application', 'application'], ['application/x-ms-wmd', 'wmd'], ['application/x-ms-wmz', 'wmz'], ['application/x-ms-xbap', 'xbap'], ['application/x-msaccess', 'mdb'], ['application/x-msbinder', 'obd'], ['application/x-mscardfile', 'crd'], ['application/x-msclip', 'clp'], ['application/x-msdownload', ['exe', 'dll']], ['application/x-msexcel', ['xls', 'xla', 'xlw']], ['application/x-msmediaview', ['mvb', 'm13', 'm14']], ['application/x-msmetafile', 'wmf'], ['application/x-msmoney', 'mny'], ['application/x-mspowerpoint', 'ppt'], ['application/x-mspublisher', 'pub'], ['application/x-msschedule', 'scd'], ['application/x-msterminal', 'trm'], ['application/x-mswrite', 'wri'], ['application/x-navi-animation', 'ani'], ['application/x-navidoc', 'nvd'], ['application/x-navimap', 'map'], ['application/x-navistyle', 'stl'], ['application/x-netcdf', ['cdf', 'nc']], ['application/x-newton-compatible-pkg', 'pkg'], ['application/x-nokia-9000-communicator-add-on-software', 'aos'], ['application/x-omc', 'omc'], ['application/x-omcdatamaker', 'omcd'], ['application/x-omcregerator', 'omcr'], ['application/x-pagemaker', ['pm4', 'pm5']], ['application/x-pcl', 'pcl'], ['application/x-perfmon', ['pma', 'pmc', 'pml', 'pmr', 'pmw']], ['application/x-pixclscript', 'plx'], ['application/x-pkcs10', 'p10'], ['application/x-pkcs12', ['p12', 'pfx']], ['application/x-pkcs7-certificates', ['p7b', 'spc']], ['application/x-pkcs7-certreqresp', 'p7r'], ['application/x-pkcs7-mime', ['p7m', 'p7c']], ['application/x-pkcs7-signature', ['p7s', 'p7a']], ['application/x-pointplus', 'css'], ['application/x-portable-anymap', 'pnm'], ['application/x-project', ['mpc', 'mpt', 'mpv', 'mpx']], ['application/x-qpro', 'wb1'], ['application/x-rar-compressed', 'rar'], ['application/x-rtf', 'rtf'], ['application/x-sdp', 'sdp'], ['application/x-sea', 'sea'], ['application/x-seelogo', 'sl'], ['application/x-sh', 'sh'], ['application/x-shar', ['shar', 'sh']], ['application/x-shockwave-flash', 'swf'], ['application/x-silverlight-app', 'xap'], ['application/x-sit', 'sit'], ['application/x-sprite', ['spr', 'sprite']], ['application/x-stuffit', 'sit'], ['application/x-stuffitx', 'sitx'], ['application/x-sv4cpio', 'sv4cpio'], ['application/x-sv4crc', 'sv4crc'], ['application/x-tar', 'tar'], ['application/x-tbook', ['sbk', 'tbk']], ['application/x-tcl', 'tcl'], ['application/x-tex', 'tex'], ['application/x-tex-tfm', 'tfm'], ['application/x-texinfo', ['texi', 'texinfo']], ['application/x-troff', ['roff', 't', 'tr']], ['application/x-troff-man', 'man'], ['application/x-troff-me', 'me'], ['application/x-troff-ms', 'ms'], ['application/x-troff-msvideo', 'avi'], ['application/x-ustar', 'ustar'], ['application/x-visio', ['vsd', 'vst', 'vsw']], ['application/x-vnd.audioexplosion.mzz', 'mzz'], ['application/x-vnd.ls-xpix', 'xpix'], ['application/x-vrml', 'vrml'], ['application/x-wais-source', ['src', 'wsrc']], ['application/x-winhelp', 'hlp'], ['application/x-wintalk', 'wtk'], ['application/x-world', ['wrl', 'svr']], ['application/x-wpwin', 'wpd'], ['application/x-wri', 'wri'], ['application/x-x509-ca-cert', ['cer', 'crt', 'der']], ['application/x-x509-user-cert', 'crt'], ['application/x-xfig', 'fig'], ['application/x-xpinstall', 'xpi'], ['application/x-zip-compressed', 'zip'], ['application/xcap-diff+xml', 'xdf'], ['application/xenc+xml', 'xenc'], ['application/xhtml+xml', 'xhtml'], ['application/xml', 'xml'], ['application/xml-dtd', 'dtd'], ['application/xop+xml', 'xop'], ['application/xslt+xml', 'xslt'], ['application/xspf+xml', 'xspf'], ['application/xv+xml', 'mxml'], ['application/yang', 'yang'], ['application/yin+xml', 'yin'], ['application/ynd.ms-pkipko', 'pko'], ['application/zip', 'zip'], ['audio/adpcm', 'adp'], ['audio/aiff', ['aiff', 'aif', 'aifc']], ['audio/basic', ['snd', 'au']], ['audio/it', 'it'], ['audio/make', ['funk', 'my', 'pfunk']], ['audio/make.my.funk', 'pfunk'], ['audio/mid', ['mid', 'rmi']], ['audio/midi', ['midi', 'kar', 'mid']], ['audio/mod', 'mod'], ['audio/mp4', 'mp4a'], ['audio/mpeg', ['mpga', 'mp3', 'm2a', 'mp2', 'mpa', 'mpg']], ['audio/mpeg3', 'mp3'], ['audio/nspaudio', ['la', 'lma']], ['audio/ogg', 'oga'], ['audio/s3m', 's3m'], ['audio/tsp-audio', 'tsi'], ['audio/tsplayer', 'tsp'], ['audio/vnd.dece.audio', 'uva'], ['audio/vnd.digital-winds', 'eol'], ['audio/vnd.dra', 'dra'], ['audio/vnd.dts', 'dts'], ['audio/vnd.dts.hd', 'dtshd'], ['audio/vnd.lucent.voice', 'lvp'], ['audio/vnd.ms-playready.media.pya', 'pya'], ['audio/vnd.nuera.ecelp4800', 'ecelp4800'], ['audio/vnd.nuera.ecelp7470', 'ecelp7470'], ['audio/vnd.nuera.ecelp9600', 'ecelp9600'], ['audio/vnd.qcelp', 'qcp'], ['audio/vnd.rip', 'rip'], ['audio/voc', 'voc'], ['audio/voxware', 'vox'], ['audio/wav', 'wav'], ['audio/webm', 'weba'], ['audio/x-aac', 'aac'], ['audio/x-adpcm', 'snd'], ['audio/x-aiff', ['aiff', 'aif', 'aifc']], ['audio/x-au', 'au'], ['audio/x-gsm', ['gsd', 'gsm']], ['audio/x-jam', 'jam'], ['audio/x-liveaudio', 'lam'], ['audio/x-mid', ['mid', 'midi']], ['audio/x-midi', ['midi', 'mid']], ['audio/x-mod', 'mod'], ['audio/x-mpeg', 'mp2'], ['audio/x-mpeg-3', 'mp3'], ['audio/x-mpegurl', 'm3u'], ['audio/x-mpequrl', 'm3u'], ['audio/x-ms-wax', 'wax'], ['audio/x-ms-wma', 'wma'], ['audio/x-nspaudio', ['la', 'lma']], ['audio/x-pn-realaudio', ['ra', 'ram', 'rm', 'rmm', 'rmp']], ['audio/x-pn-realaudio-plugin', ['ra', 'rmp', 'rpm']], ['audio/x-psid', 'sid'], ['audio/x-realaudio', 'ra'], ['audio/x-twinvq', 'vqf'], ['audio/x-twinvq-plugin', ['vqe', 'vql']], ['audio/x-vnd.audioexplosion.mjuicemediafile', 'mjf'], ['audio/x-voc', 'voc'], ['audio/x-wav', 'wav'], ['audio/xm', 'xm'], ['chemical/x-cdx', 'cdx'], ['chemical/x-cif', 'cif'], ['chemical/x-cmdf', 'cmdf'], ['chemical/x-cml', 'cml'], ['chemical/x-csml', 'csml'], ['chemical/x-pdb', ['pdb', 'xyz']], ['chemical/x-xyz', 'xyz'], ['drawing/x-dwf', 'dwf'], ['i-world/i-vrml', 'ivr'], ['image/bmp', ['bmp', 'bm']], ['image/cgm', 'cgm'], ['image/cis-cod', 'cod'], ['image/cmu-raster', ['ras', 'rast']], ['image/fif', 'fif'], ['image/florian', ['flo', 'turbot']], ['image/g3fax', 'g3'], ['image/gif', 'gif'], ['image/ief', ['ief', 'iefs']], ['image/jpeg', ['jpeg', 'jpe', 'jpg', 'jfif', 'jfif-tbnl']], ['image/jutvision', 'jut'], ['image/ktx', 'ktx'], ['image/naplps', ['nap', 'naplps']], ['image/pict', ['pic', 'pict']], ['image/pipeg', 'jfif'], ['image/pjpeg', ['jfif', 'jpe', 'jpeg', 'jpg']], ['image/png', ['png', 'x-png']], ['image/prs.btif', 'btif'], ['image/svg+xml', 'svg'], ['image/tiff', ['tif', 'tiff']], ['image/vasa', 'mcf'], ['image/vnd.adobe.photoshop', 'psd'], ['image/vnd.dece.graphic', 'uvi'], ['image/vnd.djvu', 'djvu'], ['image/vnd.dvb.subtitle', 'sub'], ['image/vnd.dwg', ['dwg', 'dxf', 'svf']], ['image/vnd.dxf', 'dxf'], ['image/vnd.fastbidsheet', 'fbs'], ['image/vnd.fpx', 'fpx'], ['image/vnd.fst', 'fst'], ['image/vnd.fujixerox.edmics-mmr', 'mmr'], ['image/vnd.fujixerox.edmics-rlc', 'rlc'], ['image/vnd.ms-modi', 'mdi'], ['image/vnd.net-fpx', ['fpx', 'npx']], ['image/vnd.rn-realflash', 'rf'], ['image/vnd.rn-realpix', 'rp'], ['image/vnd.wap.wbmp', 'wbmp'], ['image/vnd.xiff', 'xif'], ['image/webp', 'webp'], ['image/x-cmu-raster', 'ras'], ['image/x-cmx', 'cmx'], ['image/x-dwg', ['dwg', 'dxf', 'svf']], ['image/x-freehand', 'fh'], ['image/x-icon', 'ico'], ['image/x-jg', 'art'], ['image/x-jps', 'jps'], ['image/x-niff', ['niff', 'nif']], ['image/x-pcx', 'pcx'], ['image/x-pict', ['pct', 'pic']], ['image/x-portable-anymap', 'pnm'], ['image/x-portable-bitmap', 'pbm'], ['image/x-portable-graymap', 'pgm'], ['image/x-portable-greymap', 'pgm'], ['image/x-portable-pixmap', 'ppm'], ['image/x-quicktime', ['qif', 'qti', 'qtif']], ['image/x-rgb', 'rgb'], ['image/x-tiff', ['tif', 'tiff']], ['image/x-windows-bmp', 'bmp'], ['image/x-xbitmap', 'xbm'], ['image/x-xbm', 'xbm'], ['image/x-xpixmap', ['xpm', 'pm']], ['image/x-xwd', 'xwd'], ['image/x-xwindowdump', 'xwd'], ['image/xbm', 'xbm'], ['image/xpm', 'xpm'], ['message/rfc822', ['eml', 'mht', 'mhtml', 'nws', 'mime']], ['model/iges', ['iges', 'igs']], ['model/mesh', 'msh'], ['model/vnd.collada+xml', 'dae'], ['model/vnd.dwf', 'dwf'], ['model/vnd.gdl', 'gdl'], ['model/vnd.gtw', 'gtw'], ['model/vnd.mts', 'mts'], ['model/vnd.vtu', 'vtu'], ['model/vrml', ['vrml', 'wrl', 'wrz']], ['model/x-pov', 'pov'], ['multipart/x-gzip', 'gzip'], ['multipart/x-ustar', 'ustar'], ['multipart/x-zip', 'zip'], ['music/crescendo', ['mid', 'midi']], ['music/x-karaoke', 'kar'], ['paleovu/x-pv', 'pvu'], ['text/asp', 'asp'], ['text/calendar', 'ics'], ['text/css', 'css'], ['text/csv', 'csv'], ['text/ecmascript', 'js'], ['text/h323', '323'], ['text/html', ['html', 'htm', 'stm', 'acgi', 'htmls', 'htx', 'shtml']], ['text/iuls', 'uls'], ['text/javascript', 'js'], ['text/mcf', 'mcf'], ['text/n3', 'n3'], ['text/pascal', 'pas'], ['text/plain', ['txt', 'bas', 'c', 'h', 'c++', 'cc', 'com', 'conf', 'cxx', 'def', 'f', 'f90', 'for', 'g', 'hh', 'idc', 'jav', 'java', 'list', 'log', 'lst', 'm', 'mar', 'pl', 'sdml', 'text']], ['text/plain-bas', 'par'], ['text/prs.lines.tag', 'dsc'], ['text/richtext', ['rtx', 'rt', 'rtf']], ['text/scriplet', 'wsc'], ['text/scriptlet', 'sct'], ['text/sgml', ['sgm', 'sgml']], ['text/tab-separated-values', 'tsv'], ['text/troff', 't'], ['text/turtle', 'ttl'], ['text/uri-list', ['uni', 'unis', 'uri', 'uris']], ['text/vnd.abc', 'abc'], ['text/vnd.curl', 'curl'], ['text/vnd.curl.dcurl', 'dcurl'], ['text/vnd.curl.mcurl', 'mcurl'], ['text/vnd.curl.scurl', 'scurl'], ['text/vnd.fly', 'fly'], ['text/vnd.fmi.flexstor', 'flx'], ['text/vnd.graphviz', 'gv'], ['text/vnd.in3d.3dml', '3dml'], ['text/vnd.in3d.spot', 'spot'], ['text/vnd.rn-realtext', 'rt'], ['text/vnd.sun.j2me.app-descriptor', 'jad'], ['text/vnd.wap.wml', 'wml'], ['text/vnd.wap.wmlscript', 'wmls'], ['text/webviewhtml', 'htt'], ['text/x-asm', ['asm', 's']], ['text/x-audiosoft-intra', 'aip'], ['text/x-c', ['c', 'cc', 'cpp']], ['text/x-component', 'htc'], ['text/x-fortran', ['for', 'f', 'f77', 'f90']], ['text/x-h', ['h', 'hh']], ['text/x-java-source', ['java', 'jav']], ['text/x-java-source,java', 'java'], ['text/x-la-asf', 'lsx'], ['text/x-m', 'm'], ['text/x-pascal', 'p'], ['text/x-script', 'hlb'], ['text/x-script.csh', 'csh'], ['text/x-script.elisp', 'el'], ['text/x-script.guile', 'scm'], ['text/x-script.ksh', 'ksh'], ['text/x-script.lisp', 'lsp'], ['text/x-script.perl', 'pl'], ['text/x-script.perl-module', 'pm'], ['text/x-script.phyton', 'py'], ['text/x-script.rexx', 'rexx'], ['text/x-script.scheme', 'scm'], ['text/x-script.sh', 'sh'], ['text/x-script.tcl', 'tcl'], ['text/x-script.tcsh', 'tcsh'], ['text/x-script.zsh', 'zsh'], ['text/x-server-parsed-html', ['shtml', 'ssi']], ['text/x-setext', 'etx'], ['text/x-sgml', ['sgm', 'sgml']], ['text/x-speech', ['spc', 'talk']], ['text/x-uil', 'uil'], ['text/x-uuencode', ['uu', 'uue']], ['text/x-vcalendar', 'vcs'], ['text/x-vcard', 'vcf'], ['text/xml', 'xml'], ['video/3gpp', '3gp'], ['video/3gpp2', '3g2'], ['video/animaflex', 'afl'], ['video/avi', 'avi'], ['video/avs-video', 'avs'], ['video/dl', 'dl'], ['video/fli', 'fli'], ['video/gl', 'gl'], ['video/h261', 'h261'], ['video/h263', 'h263'], ['video/h264', 'h264'], ['video/jpeg', 'jpgv'], ['video/jpm', 'jpm'], ['video/mj2', 'mj2'], ['video/mp4', 'mp4'], ['video/mpeg', ['mpeg', 'mp2', 'mpa', 'mpe', 'mpg', 'mpv2', 'm1v', 'm2v', 'mp3']], ['video/msvideo', 'avi'], ['video/ogg', 'ogv'], ['video/quicktime', ['mov', 'qt', 'moov']], ['video/vdo', 'vdo'], ['video/vivo', ['viv', 'vivo']], ['video/vnd.dece.hd', 'uvh'], ['video/vnd.dece.mobile', 'uvm'], ['video/vnd.dece.pd', 'uvp'], ['video/vnd.dece.sd', 'uvs'], ['video/vnd.dece.video', 'uvv'], ['video/vnd.fvt', 'fvt'], ['video/vnd.mpegurl', 'mxu'], ['video/vnd.ms-playready.media.pyv', 'pyv'], ['video/vnd.rn-realvideo', 'rv'], ['video/vnd.uvvu.mp4', 'uvu'], ['video/vnd.vivo', ['viv', 'vivo']], ['video/vosaic', 'vos'], ['video/webm', 'webm'], ['video/x-amt-demorun', 'xdr'], ['video/x-amt-showrun', 'xsr'], ['video/x-atomic3d-feature', 'fmf'], ['video/x-dl', 'dl'], ['video/x-dv', ['dif', 'dv']], ['video/x-f4v', 'f4v'], ['video/x-fli', 'fli'], ['video/x-flv', 'flv'], ['video/x-gl', 'gl'], ['video/x-isvideo', 'isu'], ['video/x-la-asf', ['lsf', 'lsx']], ['video/x-m4v', 'm4v'], ['video/x-motion-jpeg', 'mjpg'], ['video/x-mpeg', ['mp3', 'mp2']], ['video/x-mpeq2a', 'mp2'], ['video/x-ms-asf', ['asf', 'asr', 'asx']], ['video/x-ms-asf-plugin', 'asx'], ['video/x-ms-wm', 'wm'], ['video/x-ms-wmv', 'wmv'], ['video/x-ms-wmx', 'wmx'], ['video/x-ms-wvx', 'wvx'], ['video/x-msvideo', 'avi'], ['video/x-qtc', 'qtc'], ['video/x-scm', 'scm'], ['video/x-sgi-movie', ['movie', 'mv']], ['windows/metafile', 'wmf'], ['www/mime', 'mime'], ['x-conference/x-cooltalk', 'ice'], ['x-music/x-midi', ['mid', 'midi']], ['x-world/x-3dmf', ['3dm', '3dmf', 'qd3', 'qd3d']], ['x-world/x-svr', 'svr'], ['x-world/x-vrml', ['flr', 'vrml', 'wrl', 'wrz', 'xaf', 'xof']], ['x-world/x-vrt', 'vrt'], ['xgl/drawing', 'xgz'], ['xgl/movie', 'xmz']]);\nvar extensions = new Map([['123', 'application/vnd.lotus-1-2-3'], ['323', 'text/h323'], ['*', 'application/octet-stream'], ['3dm', 'x-world/x-3dmf'], ['3dmf', 'x-world/x-3dmf'], ['3dml', 'text/vnd.in3d.3dml'], ['3g2', 'video/3gpp2'], ['3gp', 'video/3gpp'], ['7z', 'application/x-7z-compressed'], ['a', 'application/octet-stream'], ['aab', 'application/x-authorware-bin'], ['aac', 'audio/x-aac'], ['aam', 'application/x-authorware-map'], ['aas', 'application/x-authorware-seg'], ['abc', 'text/vnd.abc'], ['abw', 'application/x-abiword'], ['ac', 'application/pkix-attr-cert'], ['acc', 'application/vnd.americandynamics.acc'], ['ace', 'application/x-ace-compressed'], ['acgi', 'text/html'], ['acu', 'application/vnd.acucobol'], ['acx', 'application/internet-property-stream'], ['adp', 'audio/adpcm'], ['aep', 'application/vnd.audiograph'], ['afl', 'video/animaflex'], ['afp', 'application/vnd.ibm.modcap'], ['ahead', 'application/vnd.ahead.space'], ['ai', 'application/postscript'], ['aif', ['audio/aiff', 'audio/x-aiff']], ['aifc', ['audio/aiff', 'audio/x-aiff']], ['aiff', ['audio/aiff', 'audio/x-aiff']], ['aim', 'application/x-aim'], ['aip', 'text/x-audiosoft-intra'], ['air', 'application/vnd.adobe.air-application-installer-package+zip'], ['ait', 'application/vnd.dvb.ait'], ['ami', 'application/vnd.amiga.ami'], ['ani', 'application/x-navi-animation'], ['aos', 'application/x-nokia-9000-communicator-add-on-software'], ['apk', 'application/vnd.android.package-archive'], ['application', 'application/x-ms-application'], ['apr', 'application/vnd.lotus-approach'], ['aps', 'application/mime'], ['arc', 'application/octet-stream'], ['arj', ['application/arj', 'application/octet-stream']], ['art', 'image/x-jg'], ['asf', 'video/x-ms-asf'], ['asm', 'text/x-asm'], ['aso', 'application/vnd.accpac.simply.aso'], ['asp', 'text/asp'], ['asr', 'video/x-ms-asf'], ['asx', ['video/x-ms-asf', 'application/x-mplayer2', 'video/x-ms-asf-plugin']], ['atc', 'application/vnd.acucorp'], ['atomcat', 'application/atomcat+xml'], ['atomsvc', 'application/atomsvc+xml'], ['atx', 'application/vnd.antix.game-component'], ['au', ['audio/basic', 'audio/x-au']], ['avi', ['video/avi', 'video/msvideo', 'application/x-troff-msvideo', 'video/x-msvideo']], ['avs', 'video/avs-video'], ['aw', 'application/applixware'], ['axs', 'application/olescript'], ['azf', 'application/vnd.airzip.filesecure.azf'], ['azs', 'application/vnd.airzip.filesecure.azs'], ['azw', 'application/vnd.amazon.ebook'], ['bas', 'text/plain'], ['bcpio', 'application/x-bcpio'], ['bdf', 'application/x-font-bdf'], ['bdm', 'application/vnd.syncml.dm+wbxml'], ['bed', 'application/vnd.realvnc.bed'], ['bh2', 'application/vnd.fujitsu.oasysprs'], ['bin', ['application/octet-stream', 'application/mac-binary', 'application/macbinary', 'application/x-macbinary', 'application/x-binary']], ['bm', 'image/bmp'], ['bmi', 'application/vnd.bmi'], ['bmp', ['image/bmp', 'image/x-windows-bmp']], ['boo', 'application/book'], ['book', 'application/book'], ['box', 'application/vnd.previewsystems.box'], ['boz', 'application/x-bzip2'], ['bsh', 'application/x-bsh'], ['btif', 'image/prs.btif'], ['bz', 'application/x-bzip'], ['bz2', 'application/x-bzip2'], ['c', ['text/plain', 'text/x-c']], ['c++', 'text/plain'], ['c11amc', 'application/vnd.cluetrust.cartomobile-config'], ['c11amz', 'application/vnd.cluetrust.cartomobile-config-pkg'], ['c4g', 'application/vnd.clonk.c4group'], ['cab', 'application/vnd.ms-cab-compressed'], ['car', 'application/vnd.curl.car'], ['cat', ['application/vnd.ms-pkiseccat', 'application/vnd.ms-pki.seccat']], ['cc', ['text/plain', 'text/x-c']], ['ccad', 'application/clariscad'], ['cco', 'application/x-cocoa'], ['ccxml', 'application/ccxml+xml,'], ['cdbcmsg', 'application/vnd.contact.cmsg'], ['cdf', ['application/cdf', 'application/x-cdf', 'application/x-netcdf']], ['cdkey', 'application/vnd.mediastation.cdkey'], ['cdmia', 'application/cdmi-capability'], ['cdmic', 'application/cdmi-container'], ['cdmid', 'application/cdmi-domain'], ['cdmio', 'application/cdmi-object'], ['cdmiq', 'application/cdmi-queue'], ['cdx', 'chemical/x-cdx'], ['cdxml', 'application/vnd.chemdraw+xml'], ['cdy', 'application/vnd.cinderella'], ['cer', ['application/pkix-cert', 'application/x-x509-ca-cert']], ['cgm', 'image/cgm'], ['cha', 'application/x-chat'], ['chat', 'application/x-chat'], ['chm', 'application/vnd.ms-htmlhelp'], ['chrt', 'application/vnd.kde.kchart'], ['cif', 'chemical/x-cif'], ['cii', 'application/vnd.anser-web-certificate-issue-initiation'], ['cil', 'application/vnd.ms-artgalry'], ['cla', 'application/vnd.claymore'], ['class', ['application/octet-stream', 'application/java', 'application/java-byte-code', 'application/java-vm', 'application/x-java-class']], ['clkk', 'application/vnd.crick.clicker.keyboard'], ['clkp', 'application/vnd.crick.clicker.palette'], ['clkt', 'application/vnd.crick.clicker.template'], ['clkw', 'application/vnd.crick.clicker.wordbank'], ['clkx', 'application/vnd.crick.clicker'], ['clp', 'application/x-msclip'], ['cmc', 'application/vnd.cosmocaller'], ['cmdf', 'chemical/x-cmdf'], ['cml', 'chemical/x-cml'], ['cmp', 'application/vnd.yellowriver-custom-menu'], ['cmx', 'image/x-cmx'], ['cod', ['image/cis-cod', 'application/vnd.rim.cod']], ['com', ['application/octet-stream', 'text/plain']], ['conf', 'text/plain'], ['cpio', 'application/x-cpio'], ['cpp', 'text/x-c'], ['cpt', ['application/mac-compactpro', 'application/x-compactpro', 'application/x-cpt']], ['crd', 'application/x-mscardfile'], ['crl', ['application/pkix-crl', 'application/pkcs-crl']], ['crt', ['application/pkix-cert', 'application/x-x509-user-cert', 'application/x-x509-ca-cert']], ['cryptonote', 'application/vnd.rig.cryptonote'], ['csh', ['text/x-script.csh', 'application/x-csh']], ['csml', 'chemical/x-csml'], ['csp', 'application/vnd.commonspace'], ['css', ['text/css', 'application/x-pointplus']], ['csv', 'text/csv'], ['cu', 'application/cu-seeme'], ['curl', 'text/vnd.curl'], ['cww', 'application/prs.cww'], ['cxx', 'text/plain'], ['dae', 'model/vnd.collada+xml'], ['daf', 'application/vnd.mobius.daf'], ['davmount', 'application/davmount+xml'], ['dcr', 'application/x-director'], ['dcurl', 'text/vnd.curl.dcurl'], ['dd2', 'application/vnd.oma.dd2+xml'], ['ddd', 'application/vnd.fujixerox.ddd'], ['deb', 'application/x-debian-package'], ['deepv', 'application/x-deepv'], ['def', 'text/plain'], ['der', 'application/x-x509-ca-cert'], ['dfac', 'application/vnd.dreamfactory'], ['dif', 'video/x-dv'], ['dir', 'application/x-director'], ['dis', 'application/vnd.mobius.dis'], ['djvu', 'image/vnd.djvu'], ['dl', ['video/dl', 'video/x-dl']], ['dll', 'application/x-msdownload'], ['dms', 'application/octet-stream'], ['dna', 'application/vnd.dna'], ['doc', 'application/msword'], ['docm', 'application/vnd.ms-word.document.macroenabled.12'], ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'], ['dot', 'application/msword'], ['dotm', 'application/vnd.ms-word.template.macroenabled.12'], ['dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template'], ['dp', ['application/commonground', 'application/vnd.osgi.dp']], ['dpg', 'application/vnd.dpgraph'], ['dra', 'audio/vnd.dra'], ['drw', 'application/drafting'], ['dsc', 'text/prs.lines.tag'], ['dssc', 'application/dssc+der'], ['dtb', 'application/x-dtbook+xml'], ['dtd', 'application/xml-dtd'], ['dts', 'audio/vnd.dts'], ['dtshd', 'audio/vnd.dts.hd'], ['dump', 'application/octet-stream'], ['dv', 'video/x-dv'], ['dvi', 'application/x-dvi'], ['dwf', ['model/vnd.dwf', 'drawing/x-dwf']], ['dwg', ['application/acad', 'image/vnd.dwg', 'image/x-dwg']], ['dxf', ['application/dxf', 'image/vnd.dwg', 'image/vnd.dxf', 'image/x-dwg']], ['dxp', 'application/vnd.spotfire.dxp'], ['dxr', 'application/x-director'], ['ecelp4800', 'audio/vnd.nuera.ecelp4800'], ['ecelp7470', 'audio/vnd.nuera.ecelp7470'], ['ecelp9600', 'audio/vnd.nuera.ecelp9600'], ['edm', 'application/vnd.novadigm.edm'], ['edx', 'application/vnd.novadigm.edx'], ['efif', 'application/vnd.picsel'], ['ei6', 'application/vnd.pg.osasli'], ['el', 'text/x-script.elisp'], ['elc', ['application/x-elc', 'application/x-bytecode.elisp']], ['eml', 'message/rfc822'], ['emma', 'application/emma+xml'], ['env', 'application/x-envoy'], ['eol', 'audio/vnd.digital-winds'], ['eot', 'application/vnd.ms-fontobject'], ['eps', 'application/postscript'], ['epub', 'application/epub+zip'], ['es', ['application/ecmascript', 'application/x-esrehber']], ['es3', 'application/vnd.eszigno3+xml'], ['esf', 'application/vnd.epson.esf'], ['etx', 'text/x-setext'], ['evy', ['application/envoy', 'application/x-envoy']], ['exe', ['application/octet-stream', 'application/x-msdownload']], ['exi', 'application/exi'], ['ext', 'application/vnd.novadigm.ext'], ['ez2', 'application/vnd.ezpix-album'], ['ez3', 'application/vnd.ezpix-package'], ['f', ['text/plain', 'text/x-fortran']], ['f4v', 'video/x-f4v'], ['f77', 'text/x-fortran'], ['f90', ['text/plain', 'text/x-fortran']], ['fbs', 'image/vnd.fastbidsheet'], ['fcs', 'application/vnd.isac.fcs'], ['fdf', 'application/vnd.fdf'], ['fe_launch', 'application/vnd.denovo.fcselayout-link'], ['fg5', 'application/vnd.fujitsu.oasysgp'], ['fh', 'image/x-freehand'], ['fif', ['application/fractals', 'image/fif']], ['fig', 'application/x-xfig'], ['fli', ['video/fli', 'video/x-fli']], ['flo', ['image/florian', 'application/vnd.micrografx.flo']], ['flr', 'x-world/x-vrml'], ['flv', 'video/x-flv'], ['flw', 'application/vnd.kde.kivio'], ['flx', 'text/vnd.fmi.flexstor'], ['fly', 'text/vnd.fly'], ['fm', 'application/vnd.framemaker'], ['fmf', 'video/x-atomic3d-feature'], ['fnc', 'application/vnd.frogans.fnc'], ['for', ['text/plain', 'text/x-fortran']], ['fpx', ['image/vnd.fpx', 'image/vnd.net-fpx']], ['frl', 'application/freeloader'], ['fsc', 'application/vnd.fsc.weblaunch'], ['fst', 'image/vnd.fst'], ['ftc', 'application/vnd.fluxtime.clip'], ['fti', 'application/vnd.anser-web-funds-transfer-initiation'], ['funk', 'audio/make'], ['fvt', 'video/vnd.fvt'], ['fxp', 'application/vnd.adobe.fxp'], ['fzs', 'application/vnd.fuzzysheet'], ['g', 'text/plain'], ['g2w', 'application/vnd.geoplan'], ['g3', 'image/g3fax'], ['g3w', 'application/vnd.geospace'], ['gac', 'application/vnd.groove-account'], ['gdl', 'model/vnd.gdl'], ['geo', 'application/vnd.dynageo'], ['gex', 'application/vnd.geometry-explorer'], ['ggb', 'application/vnd.geogebra.file'], ['ggt', 'application/vnd.geogebra.tool'], ['ghf', 'application/vnd.groove-help'], ['gif', 'image/gif'], ['gim', 'application/vnd.groove-identity-message'], ['gl', ['video/gl', 'video/x-gl']], ['gmx', 'application/vnd.gmx'], ['gnumeric', 'application/x-gnumeric'], ['gph', 'application/vnd.flographit'], ['gqf', 'application/vnd.grafeq'], ['gram', 'application/srgs'], ['grv', 'application/vnd.groove-injector'], ['grxml', 'application/srgs+xml'], ['gsd', 'audio/x-gsm'], ['gsf', 'application/x-font-ghostscript'], ['gsm', 'audio/x-gsm'], ['gsp', 'application/x-gsp'], ['gss', 'application/x-gss'], ['gtar', 'application/x-gtar'], ['gtm', 'application/vnd.groove-tool-message'], ['gtw', 'model/vnd.gtw'], ['gv', 'text/vnd.graphviz'], ['gxt', 'application/vnd.geonext'], ['gz', ['application/x-gzip', 'application/x-compressed']], ['gzip', ['multipart/x-gzip', 'application/x-gzip']], ['h', ['text/plain', 'text/x-h']], ['h261', 'video/h261'], ['h263', 'video/h263'], ['h264', 'video/h264'], ['hal', 'application/vnd.hal+xml'], ['hbci', 'application/vnd.hbci'], ['hdf', 'application/x-hdf'], ['help', 'application/x-helpfile'], ['hgl', 'application/vnd.hp-hpgl'], ['hh', ['text/plain', 'text/x-h']], ['hlb', 'text/x-script'], ['hlp', ['application/winhlp', 'application/hlp', 'application/x-helpfile', 'application/x-winhelp']], ['hpg', 'application/vnd.hp-hpgl'], ['hpgl', 'application/vnd.hp-hpgl'], ['hpid', 'application/vnd.hp-hpid'], ['hps', 'application/vnd.hp-hps'], ['hqx', ['application/mac-binhex40', 'application/binhex', 'application/binhex4', 'application/mac-binhex', 'application/x-binhex40', 'application/x-mac-binhex40']], ['hta', 'application/hta'], ['htc', 'text/x-component'], ['htke', 'application/vnd.kenameaapp'], ['htm', 'text/html'], ['html', 'text/html'], ['htmls', 'text/html'], ['htt', 'text/webviewhtml'], ['htx', 'text/html'], ['hvd', 'application/vnd.yamaha.hv-dic'], ['hvp', 'application/vnd.yamaha.hv-voice'], ['hvs', 'application/vnd.yamaha.hv-script'], ['i2g', 'application/vnd.intergeo'], ['icc', 'application/vnd.iccprofile'], ['ice', 'x-conference/x-cooltalk'], ['ico', 'image/x-icon'], ['ics', 'text/calendar'], ['idc', 'text/plain'], ['ief', 'image/ief'], ['iefs', 'image/ief'], ['ifm', 'application/vnd.shana.informed.formdata'], ['iges', ['application/iges', 'model/iges']], ['igl', 'application/vnd.igloader'], ['igm', 'application/vnd.insors.igm'], ['igs', ['application/iges', 'model/iges']], ['igx', 'application/vnd.micrografx.igx'], ['iif', 'application/vnd.shana.informed.interchange'], ['iii', 'application/x-iphone'], ['ima', 'application/x-ima'], ['imap', 'application/x-httpd-imap'], ['imp', 'application/vnd.accpac.simply.imp'], ['ims', 'application/vnd.ms-ims'], ['inf', 'application/inf'], ['ins', ['application/x-internet-signup', 'application/x-internett-signup']], ['ip', 'application/x-ip2'], ['ipfix', 'application/ipfix'], ['ipk', 'application/vnd.shana.informed.package'], ['irm', 'application/vnd.ibm.rights-management'], ['irp', 'application/vnd.irepository.package+xml'], ['isp', 'application/x-internet-signup'], ['isu', 'video/x-isvideo'], ['it', 'audio/it'], ['itp', 'application/vnd.shana.informed.formtemplate'], ['iv', 'application/x-inventor'], ['ivp', 'application/vnd.immervision-ivp'], ['ivr', 'i-world/i-vrml'], ['ivu', 'application/vnd.immervision-ivu'], ['ivy', 'application/x-livescreen'], ['jad', 'text/vnd.sun.j2me.app-descriptor'], ['jam', ['application/vnd.jam', 'audio/x-jam']], ['jar', 'application/java-archive'], ['jav', ['text/plain', 'text/x-java-source']], ['java', ['text/plain', 'text/x-java-source,java', 'text/x-java-source']], ['jcm', 'application/x-java-commerce'], ['jfif', ['image/pipeg', 'image/jpeg', 'image/pjpeg']], ['jfif-tbnl', 'image/jpeg'], ['jisp', 'application/vnd.jisp'], ['jlt', 'application/vnd.hp-jlyt'], ['jnlp', 'application/x-java-jnlp-file'], ['joda', 'application/vnd.joost.joda-archive'], ['jpe', ['image/jpeg', 'image/pjpeg']], ['jpeg', ['image/jpeg', 'image/pjpeg']], ['jpg', ['image/jpeg', 'image/pjpeg']], ['jpgv', 'video/jpeg'], ['jpm', 'video/jpm'], ['jps', 'image/x-jps'], ['js', ['application/javascript', 'application/ecmascript', 'text/javascript', 'text/ecmascript', 'application/x-javascript']], ['json', 'application/json'], ['jut', 'image/jutvision'], ['kar', ['audio/midi', 'music/x-karaoke']], ['karbon', 'application/vnd.kde.karbon'], ['kfo', 'application/vnd.kde.kformula'], ['kia', 'application/vnd.kidspiration'], ['kml', 'application/vnd.google-earth.kml+xml'], ['kmz', 'application/vnd.google-earth.kmz'], ['kne', 'application/vnd.kinar'], ['kon', 'application/vnd.kde.kontour'], ['kpr', 'application/vnd.kde.kpresenter'], ['ksh', ['application/x-ksh', 'text/x-script.ksh']], ['ksp', 'application/vnd.kde.kspread'], ['ktx', 'image/ktx'], ['ktz', 'application/vnd.kahootz'], ['kwd', 'application/vnd.kde.kword'], ['la', ['audio/nspaudio', 'audio/x-nspaudio']], ['lam', 'audio/x-liveaudio'], ['lasxml', 'application/vnd.las.las+xml'], ['latex', 'application/x-latex'], ['lbd', 'application/vnd.llamagraphics.life-balance.desktop'], ['lbe', 'application/vnd.llamagraphics.life-balance.exchange+xml'], ['les', 'application/vnd.hhe.lesson-player'], ['lha', ['application/octet-stream', 'application/lha', 'application/x-lha']], ['lhx', 'application/octet-stream'], ['link66', 'application/vnd.route66.link66+xml'], ['list', 'text/plain'], ['lma', ['audio/nspaudio', 'audio/x-nspaudio']], ['log', 'text/plain'], ['lrm', 'application/vnd.ms-lrm'], ['lsf', 'video/x-la-asf'], ['lsp', ['application/x-lisp', 'text/x-script.lisp']], ['lst', 'text/plain'], ['lsx', ['video/x-la-asf', 'text/x-la-asf']], ['ltf', 'application/vnd.frogans.ltf'], ['ltx', 'application/x-latex'], ['lvp', 'audio/vnd.lucent.voice'], ['lwp', 'application/vnd.lotus-wordpro'], ['lzh', ['application/octet-stream', 'application/x-lzh']], ['lzx', ['application/lzx', 'application/octet-stream', 'application/x-lzx']], ['m', ['text/plain', 'text/x-m']], ['m13', 'application/x-msmediaview'], ['m14', 'application/x-msmediaview'], ['m1v', 'video/mpeg'], ['m21', 'application/mp21'], ['m2a', 'audio/mpeg'], ['m2v', 'video/mpeg'], ['m3u', ['audio/x-mpegurl', 'audio/x-mpequrl']], ['m3u8', 'application/vnd.apple.mpegurl'], ['m4v', 'video/x-m4v'], ['ma', 'application/mathematica'], ['mads', 'application/mads+xml'], ['mag', 'application/vnd.ecowin.chart'], ['man', 'application/x-troff-man'], ['map', 'application/x-navimap'], ['mar', 'text/plain'], ['mathml', 'application/mathml+xml'], ['mbd', 'application/mbedlet'], ['mbk', 'application/vnd.mobius.mbk'], ['mbox', 'application/mbox'], ['mc$', 'application/x-magic-cap-package-1.0'], ['mc1', 'application/vnd.medcalcdata'], ['mcd', ['application/mcad', 'application/vnd.mcd', 'application/x-mathcad']], ['mcf', ['image/vasa', 'text/mcf']], ['mcp', 'application/netmc'], ['mcurl', 'text/vnd.curl.mcurl'], ['mdb', 'application/x-msaccess'], ['mdi', 'image/vnd.ms-modi'], ['me', 'application/x-troff-me'], ['meta4', 'application/metalink4+xml'], ['mets', 'application/mets+xml'], ['mfm', 'application/vnd.mfmp'], ['mgp', 'application/vnd.osgeo.mapguide.package'], ['mgz', 'application/vnd.proteus.magazine'], ['mht', 'message/rfc822'], ['mhtml', 'message/rfc822'], ['mid', ['audio/mid', 'audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']], ['midi', ['audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']], ['mif', ['application/vnd.mif', 'application/x-mif', 'application/x-frame']], ['mime', ['message/rfc822', 'www/mime']], ['mj2', 'video/mj2'], ['mjf', 'audio/x-vnd.audioexplosion.mjuicemediafile'], ['mjpg', 'video/x-motion-jpeg'], ['mlp', 'application/vnd.dolby.mlp'], ['mm', ['application/base64', 'application/x-meme']], ['mmd', 'application/vnd.chipnuts.karaoke-mmd'], ['mme', 'application/base64'], ['mmf', 'application/vnd.smaf'], ['mmr', 'image/vnd.fujixerox.edmics-mmr'], ['mny', 'application/x-msmoney'], ['mod', ['audio/mod', 'audio/x-mod']], ['mods', 'application/mods+xml'], ['moov', 'video/quicktime'], ['mov', 'video/quicktime'], ['movie', 'video/x-sgi-movie'], ['mp2', ['video/mpeg', 'audio/mpeg', 'video/x-mpeg', 'audio/x-mpeg', 'video/x-mpeq2a']], ['mp3', ['audio/mpeg', 'audio/mpeg3', 'video/mpeg', 'audio/x-mpeg-3', 'video/x-mpeg']], ['mp4', ['video/mp4', 'application/mp4']], ['mp4a', 'audio/mp4'], ['mpa', ['video/mpeg', 'audio/mpeg']], ['mpc', ['application/vnd.mophun.certificate', 'application/x-project']], ['mpe', 'video/mpeg'], ['mpeg', 'video/mpeg'], ['mpg', ['video/mpeg', 'audio/mpeg']], ['mpga', 'audio/mpeg'], ['mpkg', 'application/vnd.apple.installer+xml'], ['mpm', 'application/vnd.blueice.multipass'], ['mpn', 'application/vnd.mophun.application'], ['mpp', 'application/vnd.ms-project'], ['mpt', 'application/x-project'], ['mpv', 'application/x-project'], ['mpv2', 'video/mpeg'], ['mpx', 'application/x-project'], ['mpy', 'application/vnd.ibm.minipay'], ['mqy', 'application/vnd.mobius.mqy'], ['mrc', 'application/marc'], ['mrcx', 'application/marcxml+xml'], ['ms', 'application/x-troff-ms'], ['mscml', 'application/mediaservercontrol+xml'], ['mseq', 'application/vnd.mseq'], ['msf', 'application/vnd.epson.msf'], ['msg', 'application/vnd.ms-outlook'], ['msh', 'model/mesh'], ['msl', 'application/vnd.mobius.msl'], ['msty', 'application/vnd.muvee.style'], ['mts', 'model/vnd.mts'], ['mus', 'application/vnd.musician'], ['musicxml', 'application/vnd.recordare.musicxml+xml'], ['mv', 'video/x-sgi-movie'], ['mvb', 'application/x-msmediaview'], ['mwf', 'application/vnd.mfer'], ['mxf', 'application/mxf'], ['mxl', 'application/vnd.recordare.musicxml'], ['mxml', 'application/xv+xml'], ['mxs', 'application/vnd.triscape.mxs'], ['mxu', 'video/vnd.mpegurl'], ['my', 'audio/make'], ['mzz', 'application/x-vnd.audioexplosion.mzz'], ['n-gage', 'application/vnd.nokia.n-gage.symbian.install'], ['n3', 'text/n3'], ['nap', 'image/naplps'], ['naplps', 'image/naplps'], ['nbp', 'application/vnd.wolfram.player'], ['nc', 'application/x-netcdf'], ['ncm', 'application/vnd.nokia.configuration-message'], ['ncx', 'application/x-dtbncx+xml'], ['ngdat', 'application/vnd.nokia.n-gage.data'], ['nif', 'image/x-niff'], ['niff', 'image/x-niff'], ['nix', 'application/x-mix-transfer'], ['nlu', 'application/vnd.neurolanguage.nlu'], ['nml', 'application/vnd.enliven'], ['nnd', 'application/vnd.noblenet-directory'], ['nns', 'application/vnd.noblenet-sealer'], ['nnw', 'application/vnd.noblenet-web'], ['npx', 'image/vnd.net-fpx'], ['nsc', 'application/x-conference'], ['nsf', 'application/vnd.lotus-notes'], ['nvd', 'application/x-navidoc'], ['nws', 'message/rfc822'], ['o', 'application/octet-stream'], ['oa2', 'application/vnd.fujitsu.oasys2'], ['oa3', 'application/vnd.fujitsu.oasys3'], ['oas', 'application/vnd.fujitsu.oasys'], ['obd', 'application/x-msbinder'], ['oda', 'application/oda'], ['odb', 'application/vnd.oasis.opendocument.database'], ['odc', 'application/vnd.oasis.opendocument.chart'], ['odf', 'application/vnd.oasis.opendocument.formula'], ['odft', 'application/vnd.oasis.opendocument.formula-template'], ['odg', 'application/vnd.oasis.opendocument.graphics'], ['odi', 'application/vnd.oasis.opendocument.image'], ['odm', 'application/vnd.oasis.opendocument.text-master'], ['odp', 'application/vnd.oasis.opendocument.presentation'], ['ods', 'application/vnd.oasis.opendocument.spreadsheet'], ['odt', 'application/vnd.oasis.opendocument.text'], ['oga', 'audio/ogg'], ['ogv', 'video/ogg'], ['ogx', 'application/ogg'], ['omc', 'application/x-omc'], ['omcd', 'application/x-omcdatamaker'], ['omcr', 'application/x-omcregerator'], ['onetoc', 'application/onenote'], ['opf', 'application/oebps-package+xml'], ['org', 'application/vnd.lotus-organizer'], ['osf', 'application/vnd.yamaha.openscoreformat'], ['osfpvg', 'application/vnd.yamaha.openscoreformat.osfpvg+xml'], ['otc', 'application/vnd.oasis.opendocument.chart-template'], ['otf', 'application/x-font-otf'], ['otg', 'application/vnd.oasis.opendocument.graphics-template'], ['oth', 'application/vnd.oasis.opendocument.text-web'], ['oti', 'application/vnd.oasis.opendocument.image-template'], ['otp', 'application/vnd.oasis.opendocument.presentation-template'], ['ots', 'application/vnd.oasis.opendocument.spreadsheet-template'], ['ott', 'application/vnd.oasis.opendocument.text-template'], ['oxt', 'application/vnd.openofficeorg.extension'], ['p', 'text/x-pascal'], ['p10', ['application/pkcs10', 'application/x-pkcs10']], ['p12', ['application/pkcs-12', 'application/x-pkcs12']], ['p7a', 'application/x-pkcs7-signature'], ['p7b', 'application/x-pkcs7-certificates'], ['p7c', ['application/pkcs7-mime', 'application/x-pkcs7-mime']], ['p7m', ['application/pkcs7-mime', 'application/x-pkcs7-mime']], ['p7r', 'application/x-pkcs7-certreqresp'], ['p7s', ['application/pkcs7-signature', 'application/x-pkcs7-signature']], ['p8', 'application/pkcs8'], ['par', 'text/plain-bas'], ['part', 'application/pro_eng'], ['pas', 'text/pascal'], ['paw', 'application/vnd.pawaafile'], ['pbd', 'application/vnd.powerbuilder6'], ['pbm', 'image/x-portable-bitmap'], ['pcf', 'application/x-font-pcf'], ['pcl', ['application/vnd.hp-pcl', 'application/x-pcl']], ['pclxl', 'application/vnd.hp-pclxl'], ['pct', 'image/x-pict'], ['pcurl', 'application/vnd.curl.pcurl'], ['pcx', 'image/x-pcx'], ['pdb', ['application/vnd.palm', 'chemical/x-pdb']], ['pdf', 'application/pdf'], ['pfa', 'application/x-font-type1'], ['pfr', 'application/font-tdpfr'], ['pfunk', ['audio/make', 'audio/make.my.funk']], ['pfx', 'application/x-pkcs12'], ['pgm', ['image/x-portable-graymap', 'image/x-portable-greymap']], ['pgn', 'application/x-chess-pgn'], ['pgp', 'application/pgp-signature'], ['pic', ['image/pict', 'image/x-pict']], ['pict', 'image/pict'], ['pkg', 'application/x-newton-compatible-pkg'], ['pki', 'application/pkixcmp'], ['pkipath', 'application/pkix-pkipath'], ['pko', ['application/ynd.ms-pkipko', 'application/vnd.ms-pki.pko']], ['pl', ['text/plain', 'text/x-script.perl']], ['plb', 'application/vnd.3gpp.pic-bw-large'], ['plc', 'application/vnd.mobius.plc'], ['plf', 'application/vnd.pocketlearn'], ['pls', 'application/pls+xml'], ['plx', 'application/x-pixclscript'], ['pm', ['text/x-script.perl-module', 'image/x-xpixmap']], ['pm4', 'application/x-pagemaker'], ['pm5', 'application/x-pagemaker'], ['pma', 'application/x-perfmon'], ['pmc', 'application/x-perfmon'], ['pml', ['application/vnd.ctc-posml', 'application/x-perfmon']], ['pmr', 'application/x-perfmon'], ['pmw', 'application/x-perfmon'], ['png', 'image/png'], ['pnm', ['application/x-portable-anymap', 'image/x-portable-anymap']], ['portpkg', 'application/vnd.macports.portpkg'], ['pot', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']], ['potm', 'application/vnd.ms-powerpoint.template.macroenabled.12'], ['potx', 'application/vnd.openxmlformats-officedocument.presentationml.template'], ['pov', 'model/x-pov'], ['ppa', 'application/vnd.ms-powerpoint'], ['ppam', 'application/vnd.ms-powerpoint.addin.macroenabled.12'], ['ppd', 'application/vnd.cups-ppd'], ['ppm', 'image/x-portable-pixmap'], ['pps', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']], ['ppsm', 'application/vnd.ms-powerpoint.slideshow.macroenabled.12'], ['ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow'], ['ppt', ['application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/powerpoint', 'application/x-mspowerpoint']], ['pptm', 'application/vnd.ms-powerpoint.presentation.macroenabled.12'], ['pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'], ['ppz', 'application/mspowerpoint'], ['prc', 'application/x-mobipocket-ebook'], ['pre', ['application/vnd.lotus-freelance', 'application/x-freelance']], ['prf', 'application/pics-rules'], ['prt', 'application/pro_eng'], ['ps', 'application/postscript'], ['psb', 'application/vnd.3gpp.pic-bw-small'], ['psd', ['application/octet-stream', 'image/vnd.adobe.photoshop']], ['psf', 'application/x-font-linux-psf'], ['pskcxml', 'application/pskc+xml'], ['ptid', 'application/vnd.pvi.ptid1'], ['pub', 'application/x-mspublisher'], ['pvb', 'application/vnd.3gpp.pic-bw-var'], ['pvu', 'paleovu/x-pv'], ['pwn', 'application/vnd.3m.post-it-notes'], ['pwz', 'application/vnd.ms-powerpoint'], ['py', 'text/x-script.phyton'], ['pya', 'audio/vnd.ms-playready.media.pya'], ['pyc', 'application/x-bytecode.python'], ['pyv', 'video/vnd.ms-playready.media.pyv'], ['qam', 'application/vnd.epson.quickanime'], ['qbo', 'application/vnd.intu.qbo'], ['qcp', 'audio/vnd.qcelp'], ['qd3', 'x-world/x-3dmf'], ['qd3d', 'x-world/x-3dmf'], ['qfx', 'application/vnd.intu.qfx'], ['qif', 'image/x-quicktime'], ['qps', 'application/vnd.publishare-delta-tree'], ['qt', 'video/quicktime'], ['qtc', 'video/x-qtc'], ['qti', 'image/x-quicktime'], ['qtif', 'image/x-quicktime'], ['qxd', 'application/vnd.quark.quarkxpress'], ['ra', ['audio/x-realaudio', 'audio/x-pn-realaudio', 'audio/x-pn-realaudio-plugin']], ['ram', 'audio/x-pn-realaudio'], ['rar', 'application/x-rar-compressed'], ['ras', ['image/cmu-raster', 'application/x-cmu-raster', 'image/x-cmu-raster']], ['rast', 'image/cmu-raster'], ['rcprofile', 'application/vnd.ipunplugged.rcprofile'], ['rdf', 'application/rdf+xml'], ['rdz', 'application/vnd.data-vision.rdz'], ['rep', 'application/vnd.businessobjects'], ['res', 'application/x-dtbresource+xml'], ['rexx', 'text/x-script.rexx'], ['rf', 'image/vnd.rn-realflash'], ['rgb', 'image/x-rgb'], ['rif', 'application/reginfo+xml'], ['rip', 'audio/vnd.rip'], ['rl', 'application/resource-lists+xml'], ['rlc', 'image/vnd.fujixerox.edmics-rlc'], ['rld', 'application/resource-lists-diff+xml'], ['rm', ['application/vnd.rn-realmedia', 'audio/x-pn-realaudio']], ['rmi', 'audio/mid'], ['rmm', 'audio/x-pn-realaudio'], ['rmp', ['audio/x-pn-realaudio-plugin', 'audio/x-pn-realaudio']], ['rms', 'application/vnd.jcp.javame.midlet-rms'], ['rnc', 'application/relax-ng-compact-syntax'], ['rng', ['application/ringing-tones', 'application/vnd.nokia.ringing-tone']], ['rnx', 'application/vnd.rn-realplayer'], ['roff', 'application/x-troff'], ['rp', 'image/vnd.rn-realpix'], ['rp9', 'application/vnd.cloanto.rp9'], ['rpm', 'audio/x-pn-realaudio-plugin'], ['rpss', 'application/vnd.nokia.radio-presets'], ['rpst', 'application/vnd.nokia.radio-preset'], ['rq', 'application/sparql-query'], ['rs', 'application/rls-services+xml'], ['rsd', 'application/rsd+xml'], ['rt', ['text/richtext', 'text/vnd.rn-realtext']], ['rtf', ['application/rtf', 'text/richtext', 'application/x-rtf']], ['rtx', ['text/richtext', 'application/rtf']], ['rv', 'video/vnd.rn-realvideo'], ['s', 'text/x-asm'], ['s3m', 'audio/s3m'], ['saf', 'application/vnd.yamaha.smaf-audio'], ['saveme', 'application/octet-stream'], ['sbk', 'application/x-tbook'], ['sbml', 'application/sbml+xml'], ['sc', 'application/vnd.ibm.secure-container'], ['scd', 'application/x-msschedule'], ['scm', ['application/vnd.lotus-screencam', 'video/x-scm', 'text/x-script.guile', 'application/x-lotusscreencam', 'text/x-script.scheme']], ['scq', 'application/scvp-cv-request'], ['scs', 'application/scvp-cv-response'], ['sct', 'text/scriptlet'], ['scurl', 'text/vnd.curl.scurl'], ['sda', 'application/vnd.stardivision.draw'], ['sdc', 'application/vnd.stardivision.calc'], ['sdd', 'application/vnd.stardivision.impress'], ['sdkm', 'application/vnd.solent.sdkm+xml'], ['sdml', 'text/plain'], ['sdp', ['application/sdp', 'application/x-sdp']], ['sdr', 'application/sounder'], ['sdw', 'application/vnd.stardivision.writer'], ['sea', ['application/sea', 'application/x-sea']], ['see', 'application/vnd.seemail'], ['seed', 'application/vnd.fdsn.seed'], ['sema', 'application/vnd.sema'], ['semd', 'application/vnd.semd'], ['semf', 'application/vnd.semf'], ['ser', 'application/java-serialized-object'], ['set', 'application/set'], ['setpay', 'application/set-payment-initiation'], ['setreg', 'application/set-registration-initiation'], ['sfd-hdstx', 'application/vnd.hydrostatix.sof-data'], ['sfs', 'application/vnd.spotfire.sfs'], ['sgl', 'application/vnd.stardivision.writer-global'], ['sgm', ['text/sgml', 'text/x-sgml']], ['sgml', ['text/sgml', 'text/x-sgml']], ['sh', ['application/x-shar', 'application/x-bsh', 'application/x-sh', 'text/x-script.sh']], ['shar', ['application/x-bsh', 'application/x-shar']], ['shf', 'application/shf+xml'], ['shtml', ['text/html', 'text/x-server-parsed-html']], ['sid', 'audio/x-psid'], ['sis', 'application/vnd.symbian.install'], ['sit', ['application/x-stuffit', 'application/x-sit']], ['sitx', 'application/x-stuffitx'], ['skd', 'application/x-koan'], ['skm', 'application/x-koan'], ['skp', ['application/vnd.koan', 'application/x-koan']], ['skt', 'application/x-koan'], ['sl', 'application/x-seelogo'], ['sldm', 'application/vnd.ms-powerpoint.slide.macroenabled.12'], ['sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide'], ['slt', 'application/vnd.epson.salt'], ['sm', 'application/vnd.stepmania.stepchart'], ['smf', 'application/vnd.stardivision.math'], ['smi', ['application/smil', 'application/smil+xml']], ['smil', 'application/smil'], ['snd', ['audio/basic', 'audio/x-adpcm']], ['snf', 'application/x-font-snf'], ['sol', 'application/solids'], ['spc', ['text/x-speech', 'application/x-pkcs7-certificates']], ['spf', 'application/vnd.yamaha.smaf-phrase'], ['spl', ['application/futuresplash', 'application/x-futuresplash']], ['spot', 'text/vnd.in3d.spot'], ['spp', 'application/scvp-vp-response'], ['spq', 'application/scvp-vp-request'], ['spr', 'application/x-sprite'], ['sprite', 'application/x-sprite'], ['src', 'application/x-wais-source'], ['sru', 'application/sru+xml'], ['srx', 'application/sparql-results+xml'], ['sse', 'application/vnd.kodak-descriptor'], ['ssf', 'application/vnd.epson.ssf'], ['ssi', 'text/x-server-parsed-html'], ['ssm', 'application/streamingmedia'], ['ssml', 'application/ssml+xml'], ['sst', ['application/vnd.ms-pkicertstore', 'application/vnd.ms-pki.certstore']], ['st', 'application/vnd.sailingtracker.track'], ['stc', 'application/vnd.sun.xml.calc.template'], ['std', 'application/vnd.sun.xml.draw.template'], ['step', 'application/step'], ['stf', 'application/vnd.wt.stf'], ['sti', 'application/vnd.sun.xml.impress.template'], ['stk', 'application/hyperstudio'], ['stl', ['application/vnd.ms-pkistl', 'application/sla', 'application/vnd.ms-pki.stl', 'application/x-navistyle']], ['stm', 'text/html'], ['stp', 'application/step'], ['str', 'application/vnd.pg.format'], ['stw', 'application/vnd.sun.xml.writer.template'], ['sub', 'image/vnd.dvb.subtitle'], ['sus', 'application/vnd.sus-calendar'], ['sv4cpio', 'application/x-sv4cpio'], ['sv4crc', 'application/x-sv4crc'], ['svc', 'application/vnd.dvb.service'], ['svd', 'application/vnd.svd'], ['svf', ['image/vnd.dwg', 'image/x-dwg']], ['svg', 'image/svg+xml'], ['svr', ['x-world/x-svr', 'application/x-world']], ['swf', 'application/x-shockwave-flash'], ['swi', 'application/vnd.aristanetworks.swi'], ['sxc', 'application/vnd.sun.xml.calc'], ['sxd', 'application/vnd.sun.xml.draw'], ['sxg', 'application/vnd.sun.xml.writer.global'], ['sxi', 'application/vnd.sun.xml.impress'], ['sxm', 'application/vnd.sun.xml.math'], ['sxw', 'application/vnd.sun.xml.writer'], ['t', ['text/troff', 'application/x-troff']], ['talk', 'text/x-speech'], ['tao', 'application/vnd.tao.intent-module-archive'], ['tar', 'application/x-tar'], ['tbk', ['application/toolbook', 'application/x-tbook']], ['tcap', 'application/vnd.3gpp2.tcap'], ['tcl', ['text/x-script.tcl', 'application/x-tcl']], ['tcsh', 'text/x-script.tcsh'], ['teacher', 'application/vnd.smart.teacher'], ['tei', 'application/tei+xml'], ['tex', 'application/x-tex'], ['texi', 'application/x-texinfo'], ['texinfo', 'application/x-texinfo'], ['text', ['application/plain', 'text/plain']], ['tfi', 'application/thraud+xml'], ['tfm', 'application/x-tex-tfm'], ['tgz', ['application/gnutar', 'application/x-compressed']], ['thmx', 'application/vnd.ms-officetheme'], ['tif', ['image/tiff', 'image/x-tiff']], ['tiff', ['image/tiff', 'image/x-tiff']], ['tmo', 'application/vnd.tmobile-livetv'], ['torrent', 'application/x-bittorrent'], ['tpl', 'application/vnd.groove-tool-template'], ['tpt', 'application/vnd.trid.tpt'], ['tr', 'application/x-troff'], ['tra', 'application/vnd.trueapp'], ['trm', 'application/x-msterminal'], ['tsd', 'application/timestamped-data'], ['tsi', 'audio/tsp-audio'], ['tsp', ['application/dsptype', 'audio/tsplayer']], ['tsv', 'text/tab-separated-values'], ['ttf', 'application/x-font-ttf'], ['ttl', 'text/turtle'], ['turbot', 'image/florian'], ['twd', 'application/vnd.simtech-mindmapper'], ['txd', 'application/vnd.genomatix.tuxedo'], ['txf', 'application/vnd.mobius.txf'], ['txt', 'text/plain'], ['ufd', 'application/vnd.ufdl'], ['uil', 'text/x-uil'], ['uls', 'text/iuls'], ['umj', 'application/vnd.umajin'], ['uni', 'text/uri-list'], ['unis', 'text/uri-list'], ['unityweb', 'application/vnd.unity'], ['unv', 'application/i-deas'], ['uoml', 'application/vnd.uoml+xml'], ['uri', 'text/uri-list'], ['uris', 'text/uri-list'], ['ustar', ['application/x-ustar', 'multipart/x-ustar']], ['utz', 'application/vnd.uiq.theme'], ['uu', ['application/octet-stream', 'text/x-uuencode']], ['uue', 'text/x-uuencode'], ['uva', 'audio/vnd.dece.audio'], ['uvh', 'video/vnd.dece.hd'], ['uvi', 'image/vnd.dece.graphic'], ['uvm', 'video/vnd.dece.mobile'], ['uvp', 'video/vnd.dece.pd'], ['uvs', 'video/vnd.dece.sd'], ['uvu', 'video/vnd.uvvu.mp4'], ['uvv', 'video/vnd.dece.video'], ['vcd', 'application/x-cdlink'], ['vcf', 'text/x-vcard'], ['vcg', 'application/vnd.groove-vcard'], ['vcs', 'text/x-vcalendar'], ['vcx', 'application/vnd.vcx'], ['vda', 'application/vda'], ['vdo', 'video/vdo'], ['vew', 'application/groupwise'], ['vis', 'application/vnd.visionary'], ['viv', ['video/vivo', 'video/vnd.vivo']], ['vivo', ['video/vivo', 'video/vnd.vivo']], ['vmd', 'application/vocaltec-media-desc'], ['vmf', 'application/vocaltec-media-file'], ['voc', ['audio/voc', 'audio/x-voc']], ['vos', 'video/vosaic'], ['vox', 'audio/voxware'], ['vqe', 'audio/x-twinvq-plugin'], ['vqf', 'audio/x-twinvq'], ['vql', 'audio/x-twinvq-plugin'], ['vrml', ['model/vrml', 'x-world/x-vrml', 'application/x-vrml']], ['vrt', 'x-world/x-vrt'], ['vsd', ['application/vnd.visio', 'application/x-visio']], ['vsf', 'application/vnd.vsf'], ['vst', 'application/x-visio'], ['vsw', 'application/x-visio'], ['vtu', 'model/vnd.vtu'], ['vxml', 'application/voicexml+xml'], ['w60', 'application/wordperfect6.0'], ['w61', 'application/wordperfect6.1'], ['w6w', 'application/msword'], ['wad', 'application/x-doom'], ['wav', ['audio/wav', 'audio/x-wav']], ['wax', 'audio/x-ms-wax'], ['wb1', 'application/x-qpro'], ['wbmp', 'image/vnd.wap.wbmp'], ['wbs', 'application/vnd.criticaltools.wbs+xml'], ['wbxml', 'application/vnd.wap.wbxml'], ['wcm', 'application/vnd.ms-works'], ['wdb', 'application/vnd.ms-works'], ['web', 'application/vnd.xara'], ['weba', 'audio/webm'], ['webm', 'video/webm'], ['webp', 'image/webp'], ['wg', 'application/vnd.pmi.widget'], ['wgt', 'application/widget'], ['wiz', 'application/msword'], ['wk1', 'application/x-123'], ['wks', 'application/vnd.ms-works'], ['wm', 'video/x-ms-wm'], ['wma', 'audio/x-ms-wma'], ['wmd', 'application/x-ms-wmd'], ['wmf', ['windows/metafile', 'application/x-msmetafile']], ['wml', 'text/vnd.wap.wml'], ['wmlc', 'application/vnd.wap.wmlc'], ['wmls', 'text/vnd.wap.wmlscript'], ['wmlsc', 'application/vnd.wap.wmlscriptc'], ['wmv', 'video/x-ms-wmv'], ['wmx', 'video/x-ms-wmx'], ['wmz', 'application/x-ms-wmz'], ['woff', 'application/x-font-woff'], ['word', 'application/msword'], ['wp', 'application/wordperfect'], ['wp5', ['application/wordperfect', 'application/wordperfect6.0']], ['wp6', 'application/wordperfect'], ['wpd', ['application/wordperfect', 'application/vnd.wordperfect', 'application/x-wpwin']], ['wpl', 'application/vnd.ms-wpl'], ['wps', 'application/vnd.ms-works'], ['wq1', 'application/x-lotus'], ['wqd', 'application/vnd.wqd'], ['wri', ['application/mswrite', 'application/x-wri', 'application/x-mswrite']], ['wrl', ['model/vrml', 'x-world/x-vrml', 'application/x-world']], ['wrz', ['model/vrml', 'x-world/x-vrml']], ['wsc', 'text/scriplet'], ['wsdl', 'application/wsdl+xml'], ['wspolicy', 'application/wspolicy+xml'], ['wsrc', 'application/x-wais-source'], ['wtb', 'application/vnd.webturbo'], ['wtk', 'application/x-wintalk'], ['wvx', 'video/x-ms-wvx'], ['x-png', 'image/png'], ['x3d', 'application/vnd.hzn-3d-crossword'], ['xaf', 'x-world/x-vrml'], ['xap', 'application/x-silverlight-app'], ['xar', 'application/vnd.xara'], ['xbap', 'application/x-ms-xbap'], ['xbd', 'application/vnd.fujixerox.docuworks.binder'], ['xbm', ['image/xbm', 'image/x-xbm', 'image/x-xbitmap']], ['xdf', 'application/xcap-diff+xml'], ['xdm', 'application/vnd.syncml.dm+xml'], ['xdp', 'application/vnd.adobe.xdp+xml'], ['xdr', 'video/x-amt-demorun'], ['xdssc', 'application/dssc+xml'], ['xdw', 'application/vnd.fujixerox.docuworks'], ['xenc', 'application/xenc+xml'], ['xer', 'application/patch-ops-error+xml'], ['xfdf', 'application/vnd.adobe.xfdf'], ['xfdl', 'application/vnd.xfdl'], ['xgz', 'xgl/drawing'], ['xhtml', 'application/xhtml+xml'], ['xif', 'image/vnd.xiff'], ['xl', 'application/excel'], ['xla', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xlam', 'application/vnd.ms-excel.addin.macroenabled.12'], ['xlb', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']], ['xlc', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xld', ['application/excel', 'application/x-excel']], ['xlk', ['application/excel', 'application/x-excel']], ['xll', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']], ['xlm', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xls', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xlsb', 'application/vnd.ms-excel.sheet.binary.macroenabled.12'], ['xlsm', 'application/vnd.ms-excel.sheet.macroenabled.12'], ['xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'], ['xlt', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xltm', 'application/vnd.ms-excel.template.macroenabled.12'], ['xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template'], ['xlv', ['application/excel', 'application/x-excel']], ['xlw', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xm', 'audio/xm'], ['xml', ['application/xml', 'text/xml', 'application/atom+xml', 'application/rss+xml']], ['xmz', 'xgl/movie'], ['xo', 'application/vnd.olpc-sugar'], ['xof', 'x-world/x-vrml'], ['xop', 'application/xop+xml'], ['xpi', 'application/x-xpinstall'], ['xpix', 'application/x-vnd.ls-xpix'], ['xpm', ['image/xpm', 'image/x-xpixmap']], ['xpr', 'application/vnd.is-xpr'], ['xps', 'application/vnd.ms-xpsdocument'], ['xpw', 'application/vnd.intercon.formnet'], ['xslt', 'application/xslt+xml'], ['xsm', 'application/vnd.syncml+xml'], ['xspf', 'application/xspf+xml'], ['xsr', 'video/x-amt-showrun'], ['xul', 'application/vnd.mozilla.xul+xml'], ['xwd', ['image/x-xwd', 'image/x-xwindowdump']], ['xyz', ['chemical/x-xyz', 'chemical/x-pdb']], ['yang', 'application/yang'], ['yin', 'application/yin+xml'], ['z', ['application/x-compressed', 'application/x-compress']], ['zaz', 'application/vnd.zzazz.deck+xml'], ['zip', ['application/zip', 'multipart/x-zip', 'application/x-zip-compressed', 'application/x-compressed']], ['zir', 'application/vnd.zul'], ['zmm', 'application/vnd.handheld-entertainment+xml'], ['zoo', 'application/octet-stream'], ['zsh', 'text/x-script.zsh']]);\nmodule.exports = {\n  detectMimeType: function detectMimeType(filename) {\n    if (!filename) {\n      return defaultMimeType;\n    }\n    var parsed = path.parse(filename);\n    var extension = (parsed.ext.substr(1) || parsed.name || '').split('?').shift().trim().toLowerCase();\n    var value = defaultMimeType;\n    if (extensions.has(extension)) {\n      value = extensions.get(extension);\n    }\n    if (Array.isArray(value)) {\n      return value[0];\n    }\n    return value;\n  },\n  detectExtension: function detectExtension(mimeType) {\n    if (!mimeType) {\n      return defaultExtension;\n    }\n    var parts = (mimeType || '').toLowerCase().trim().split('/');\n    var rootType = parts.shift().trim();\n    var subType = parts.join('/').trim();\n    if (mimeTypes.has(rootType + '/' + subType)) {\n      var value = mimeTypes.get(rootType + '/' + subType);\n      if (Array.isArray(value)) {\n        return value[0];\n      }\n      return value;\n    }\n    switch (rootType) {\n      case 'text':\n        return 'txt';\n      default:\n        return 'bin';\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar punycode = __webpack_require__(/*! ../punycode */ \"(rsc)/./node_modules/nodemailer/lib/punycode/index.js\");\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nvar qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nvar base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nvar addressparser = __webpack_require__(/*! ../addressparser */ \"(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\");\nvar nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nvar LastNewline = __webpack_require__(/*! ./last-newline */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\");\nvar LeWindows = __webpack_require__(/*! ./le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\nvar LeUnix = __webpack_require__(/*! ./le-unix */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\");\n\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */\nvar MimeNode = /*#__PURE__*/function () {\n  function MimeNode(contentType, options) {\n    _classCallCheck(this, MimeNode);\n    this.nodeCounter = 0;\n    options = options || {};\n\n    /**\n     * shared part of the unique multipart boundary\n     */\n    this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString('hex');\n    this.boundaryPrefix = options.boundaryPrefix || '--_NmP';\n    this.disableFileAccess = !!options.disableFileAccess;\n    this.disableUrlAccess = !!options.disableUrlAccess;\n    this.normalizeHeaderKey = options.normalizeHeaderKey;\n\n    /**\n     * If date headers is missing and current node is the root, this value is used instead\n     */\n    this.date = new Date();\n\n    /**\n     * Root node for current mime tree\n     */\n    this.rootNode = options.rootNode || this;\n\n    /**\n     * If true include Bcc in generated headers (if available)\n     */\n    this.keepBcc = !!options.keepBcc;\n\n    /**\n     * If filename is specified but contentType is not (probably an attachment)\n     * detect the content type from filename extension\n     */\n    if (options.filename) {\n      /**\n       * Filename for this node. Useful with attachments\n       */\n      this.filename = options.filename;\n      if (!contentType) {\n        contentType = mimeFuncs.detectMimeType(this.filename.split('.').pop());\n      }\n    }\n\n    /**\n     * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n     */\n    this.textEncoding = (options.textEncoding || '').toString().trim().charAt(0).toUpperCase();\n\n    /**\n     * Immediate parent for this node (or undefined if not set)\n     */\n    this.parentNode = options.parentNode;\n\n    /**\n     * Hostname for default message-id values\n     */\n    this.hostname = options.hostname;\n\n    /**\n     * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n     */\n    this.newline = options.newline;\n\n    /**\n     * An array for possible child nodes\n     */\n    this.childNodes = [];\n\n    /**\n     * Used for generating unique boundaries (prepended to the shared base)\n     */\n    this._nodeId = ++this.rootNode.nodeCounter;\n\n    /**\n     * A list of header values for this node in the form of [{key:'', value:''}]\n     */\n    this._headers = [];\n\n    /**\n     * True if the content only uses ASCII printable characters\n     * @type {Boolean}\n     */\n    this._isPlainText = false;\n\n    /**\n     * True if the content is plain text but has longer lines than allowed\n     * @type {Boolean}\n     */\n    this._hasLongLines = false;\n\n    /**\n     * If set, use instead this value for envelopes instead of generating one\n     * @type {Boolean}\n     */\n    this._envelope = false;\n\n    /**\n     * If set then use this value as the stream content instead of building it\n     * @type {String|Buffer|Stream}\n     */\n    this._raw = false;\n\n    /**\n     * Additional transform streams that the message will be piped before\n     * exposing by createReadStream\n     * @type {Array}\n     */\n    this._transforms = [];\n\n    /**\n     * Additional process functions that the message will be piped through before\n     * exposing by createReadStream. These functions are run after transforms\n     * @type {Array}\n     */\n    this._processFuncs = [];\n\n    /**\n     * If content type is set (or derived from the filename) add it to headers\n     */\n    if (contentType) {\n      this.setHeader('Content-Type', contentType);\n    }\n  }\n\n  /////// PUBLIC METHODS\n\n  /**\n   * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n   *\n   * @param {String} [contentType] Optional content type\n   * @param {Object} [options] Optional options object\n   * @return {Object} Created node object\n   */\n  return _createClass(MimeNode, [{\n    key: \"createChild\",\n    value: function createChild(contentType, options) {\n      if (!options && _typeof(contentType) === 'object') {\n        options = contentType;\n        contentType = undefined;\n      }\n      var node = new MimeNode(contentType, options);\n      this.appendChild(node);\n      return node;\n    }\n\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(childNode) {\n      if (childNode.rootNode !== this.rootNode) {\n        childNode.rootNode = this.rootNode;\n        childNode._nodeId = ++this.rootNode.nodeCounter;\n      }\n      childNode.parentNode = this;\n      this.childNodes.push(childNode);\n      return childNode;\n    }\n\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */\n  }, {\n    key: \"replace\",\n    value: function replace(node) {\n      var _this = this;\n      if (node === this) {\n        return this;\n      }\n      this.parentNode.childNodes.forEach(function (childNode, i) {\n        if (childNode === _this) {\n          node.rootNode = _this.rootNode;\n          node.parentNode = _this.parentNode;\n          node._nodeId = _this._nodeId;\n          _this.rootNode = _this;\n          _this.parentNode = undefined;\n          node.parentNode.childNodes[i] = node;\n        }\n      });\n      return node;\n    }\n\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (!this.parentNode) {\n        return this;\n      }\n      for (var i = this.parentNode.childNodes.length - 1; i >= 0; i--) {\n        if (this.parentNode.childNodes[i] === this) {\n          this.parentNode.childNodes.splice(i, 1);\n          this.parentNode = undefined;\n          this.rootNode = this;\n          return this;\n        }\n      }\n    }\n\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(key, value) {\n      var _this2 = this;\n      var added = false,\n        headerValue;\n\n      // Allow setting multiple headers at once\n      if (!value && key && _typeof(key) === 'object') {\n        // allow {key:'content-type', value: 'text/plain'}\n        if (key.key && 'value' in key) {\n          this.setHeader(key.key, key.value);\n        } else if (Array.isArray(key)) {\n          // allow [{key:'content-type', value: 'text/plain'}]\n          key.forEach(function (i) {\n            _this2.setHeader(i.key, i.value);\n          });\n        } else {\n          // allow {'content-type': 'text/plain'}\n          Object.keys(key).forEach(function (i) {\n            _this2.setHeader(i, key[i]);\n          });\n        }\n        return this;\n      }\n      key = this._normalizeHeaderKey(key);\n      headerValue = {\n        key: key,\n        value: value\n      };\n\n      // Check if the value exists and overwrite\n      for (var i = 0, len = this._headers.length; i < len; i++) {\n        if (this._headers[i].key === key) {\n          if (!added) {\n            // replace the first match\n            this._headers[i] = headerValue;\n            added = true;\n          } else {\n            // remove following matches\n            this._headers.splice(i, 1);\n            i--;\n            len--;\n          }\n        }\n      }\n\n      // match not found, append the value\n      if (!added) {\n        this._headers.push(headerValue);\n      }\n      return this;\n    }\n\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n  }, {\n    key: \"addHeader\",\n    value: function addHeader(key, value) {\n      var _this3 = this;\n      // Allow setting multiple headers at once\n      if (!value && key && _typeof(key) === 'object') {\n        // allow {key:'content-type', value: 'text/plain'}\n        if (key.key && key.value) {\n          this.addHeader(key.key, key.value);\n        } else if (Array.isArray(key)) {\n          // allow [{key:'content-type', value: 'text/plain'}]\n          key.forEach(function (i) {\n            _this3.addHeader(i.key, i.value);\n          });\n        } else {\n          // allow {'content-type': 'text/plain'}\n          Object.keys(key).forEach(function (i) {\n            _this3.addHeader(i, key[i]);\n          });\n        }\n        return this;\n      } else if (Array.isArray(value)) {\n        value.forEach(function (val) {\n          _this3.addHeader(key, val);\n        });\n        return this;\n      }\n      this._headers.push({\n        key: this._normalizeHeaderKey(key),\n        value: value\n      });\n      return this;\n    }\n\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(key) {\n      key = this._normalizeHeaderKey(key);\n      for (var i = 0, len = this._headers.length; i < len; i++) {\n        if (this._headers[i].key === key) {\n          return this._headers[i].value;\n        }\n      }\n    }\n\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      var _this4 = this;\n      this.content = content;\n      if (typeof this.content.pipe === 'function') {\n        // pre-stream handler. might be triggered if a stream is set as content\n        // and 'error' fires before anything is done with this stream\n        this._contentErrorHandler = function (err) {\n          _this4.content.removeListener('error', _this4._contentErrorHandler);\n          _this4.content = err;\n        };\n        this.content.once('error', this._contentErrorHandler);\n      } else if (typeof this.content === 'string') {\n        this._isPlainText = mimeFuncs.isPlainText(this.content);\n        if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n          // If there are lines longer than 76 symbols/bytes do not use 7bit\n          this._hasLongLines = true;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build(callback) {\n      var promise;\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      var stream = this.createReadStream();\n      var buf = [];\n      var buflen = 0;\n      var returned = false;\n      stream.on('readable', function () {\n        var chunk;\n        while ((chunk = stream.read()) !== null) {\n          buf.push(chunk);\n          buflen += chunk.length;\n        }\n      });\n      stream.once('error', function (err) {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        return callback(err);\n      });\n      stream.once('end', function (chunk) {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        if (chunk && chunk.length) {\n          buf.push(chunk);\n          buflen += chunk.length;\n        }\n        return callback(null, Buffer.concat(buf, buflen));\n      });\n      return promise;\n    }\n  }, {\n    key: \"getTransferEncoding\",\n    value: function getTransferEncoding() {\n      var transferEncoding = false;\n      var contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();\n      if (this.content) {\n        transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();\n        if (!transferEncoding || !['base64', 'quoted-printable'].includes(transferEncoding)) {\n          if (/^text\\//i.test(contentType)) {\n            // If there are no special symbols, no need to modify the text\n            if (this._isPlainText && !this._hasLongLines) {\n              transferEncoding = '7bit';\n            } else if (typeof this.content === 'string' || this.content instanceof Buffer) {\n              // detect preferred encoding for string value\n              transferEncoding = this._getTextEncoding(this.content) === 'Q' ? 'quoted-printable' : 'base64';\n            } else {\n              // we can not check content for a stream, so either use preferred encoding or fallback to QP\n              transferEncoding = this.textEncoding === 'B' ? 'base64' : 'quoted-printable';\n            }\n          } else if (!/^(multipart|message)\\//i.test(contentType)) {\n            transferEncoding = transferEncoding || 'base64';\n          }\n        }\n      }\n      return transferEncoding;\n    }\n\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */\n  }, {\n    key: \"buildHeaders\",\n    value: function buildHeaders() {\n      var _this5 = this;\n      var transferEncoding = this.getTransferEncoding();\n      var headers = [];\n      if (transferEncoding) {\n        this.setHeader('Content-Transfer-Encoding', transferEncoding);\n      }\n      if (this.filename && !this.getHeader('Content-Disposition')) {\n        this.setHeader('Content-Disposition', 'attachment');\n      }\n\n      // Ensure mandatory header fields\n      if (this.rootNode === this) {\n        if (!this.getHeader('Date')) {\n          this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));\n        }\n\n        // ensure that Message-Id is present\n        this.messageId();\n        if (!this.getHeader('MIME-Version')) {\n          this.setHeader('MIME-Version', '1.0');\n        }\n\n        // Ensure that Content-Type is the last header for the root node\n        for (var i = this._headers.length - 2; i >= 0; i--) {\n          var header = this._headers[i];\n          if (header.key === 'Content-Type') {\n            this._headers.splice(i, 1);\n            this._headers.push(header);\n          }\n        }\n      }\n      this._headers.forEach(function (header) {\n        var key = header.key;\n        var value = header.value;\n        var structured;\n        var param;\n        var options = {};\n        var formattedHeaders = ['From', 'Sender', 'To', 'Cc', 'Bcc', 'Reply-To', 'Date', 'References'];\n        if (value && _typeof(value) === 'object' && !formattedHeaders.includes(key)) {\n          Object.keys(value).forEach(function (key) {\n            if (key !== 'value') {\n              options[key] = value[key];\n            }\n          });\n          value = (value.value || '').toString();\n          if (!value.trim()) {\n            return;\n          }\n        }\n        if (options.prepared) {\n          // header value is\n          if (options.foldLines) {\n            headers.push(mimeFuncs.foldLines(key + ': ' + value));\n          } else {\n            headers.push(key + ': ' + value);\n          }\n          return;\n        }\n        switch (header.key) {\n          case 'Content-Disposition':\n            structured = mimeFuncs.parseHeaderValue(value);\n            if (_this5.filename) {\n              structured.params.filename = _this5.filename;\n            }\n            value = mimeFuncs.buildHeaderValue(structured);\n            break;\n          case 'Content-Type':\n            structured = mimeFuncs.parseHeaderValue(value);\n            _this5._handleContentType(structured);\n            if (structured.value.match(/^text\\/plain\\b/) && typeof _this5.content === 'string' && /[\\u0080-\\uFFFF]/.test(_this5.content)) {\n              structured.params.charset = 'utf-8';\n            }\n            value = mimeFuncs.buildHeaderValue(structured);\n            if (_this5.filename) {\n              // add support for non-compliant clients like QQ webmail\n              // we can't build the value with buildHeaderValue as the value is non standard and\n              // would be converted to parameter continuation encoding that we do not want\n              param = _this5._encodeWords(_this5.filename);\n              if (param !== _this5.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                // include value in quotes if needed\n                param = '\"' + param + '\"';\n              }\n              value += '; name=' + param;\n            }\n            break;\n          case 'Bcc':\n            if (!_this5.keepBcc) {\n              // skip BCC values\n              return;\n            }\n            break;\n        }\n        value = _this5._encodeHeaderValue(key, value);\n\n        // skip empty lines\n        if (!(value || '').toString().trim()) {\n          return;\n        }\n        if (typeof _this5.normalizeHeaderKey === 'function') {\n          var normalized = _this5.normalizeHeaderKey(key, value);\n          if (normalized && typeof normalized === 'string' && normalized.length) {\n            key = normalized;\n          }\n        }\n        headers.push(mimeFuncs.foldLines(key + ': ' + value, 76));\n      });\n      return headers.join('\\r\\n');\n    }\n\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */\n  }, {\n    key: \"createReadStream\",\n    value: function createReadStream(options) {\n      options = options || {};\n      var stream = new PassThrough(options);\n      var outputStream = stream;\n      var transform;\n      this.stream(stream, options, function (err) {\n        if (err) {\n          outputStream.emit('error', err);\n          return;\n        }\n        stream.end();\n      });\n      for (var i = 0, len = this._transforms.length; i < len; i++) {\n        transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];\n        outputStream.once('error', function (err) {\n          transform.emit('error', err);\n        });\n        outputStream = outputStream.pipe(transform);\n      }\n\n      // ensure terminating newline after possible user transforms\n      transform = new LastNewline();\n      outputStream.once('error', function (err) {\n        transform.emit('error', err);\n      });\n      outputStream = outputStream.pipe(transform);\n\n      // dkim and stuff\n      for (var _i = 0, _len = this._processFuncs.length; _i < _len; _i++) {\n        transform = this._processFuncs[_i];\n        outputStream = transform(outputStream);\n      }\n      if (this.newline) {\n        var winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes(this.newline.toString().toLowerCase());\n        var newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n        var _stream = outputStream.pipe(newlineTransform);\n        outputStream.on('error', function (err) {\n          return _stream.emit('error', err);\n        });\n        return _stream;\n      }\n      return outputStream;\n    }\n\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */\n  }, {\n    key: \"transform\",\n    value: function transform(_transform) {\n      this._transforms.push(_transform);\n    }\n\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */\n  }, {\n    key: \"processFunc\",\n    value: function processFunc(_processFunc) {\n      this._processFuncs.push(_processFunc);\n    }\n  }, {\n    key: \"stream\",\n    value: function stream(outputStream, options, done) {\n      var _this6 = this;\n      var transferEncoding = this.getTransferEncoding();\n      var contentStream;\n      var localStream;\n\n      // protect actual callback against multiple triggering\n      var returned = false;\n      var callback = function callback(err) {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        done(err);\n      };\n\n      // for multipart nodes, push child nodes\n      // for content nodes end the stream\n      var finalize = function finalize() {\n        var childId = 0;\n        var processChildNode = function processChildNode() {\n          if (childId >= _this6.childNodes.length) {\n            outputStream.write('\\r\\n--' + _this6.boundary + '--\\r\\n');\n            return callback();\n          }\n          var child = _this6.childNodes[childId++];\n          outputStream.write((childId > 1 ? '\\r\\n' : '') + '--' + _this6.boundary + '\\r\\n');\n          child.stream(outputStream, options, function (err) {\n            if (err) {\n              return callback(err);\n            }\n            setImmediate(processChildNode);\n          });\n        };\n        if (_this6.multipart) {\n          setImmediate(processChildNode);\n        } else {\n          return callback();\n        }\n      };\n\n      // pushes node content\n      var sendContent = function sendContent() {\n        if (_this6.content) {\n          if (Object.prototype.toString.call(_this6.content) === '[object Error]') {\n            // content is already errored\n            return callback(_this6.content);\n          }\n          if (typeof _this6.content.pipe === 'function') {\n            _this6.content.removeListener('error', _this6._contentErrorHandler);\n            _this6._contentErrorHandler = function (err) {\n              return callback(err);\n            };\n            _this6.content.once('error', _this6._contentErrorHandler);\n          }\n          var createStream = function createStream() {\n            if (['quoted-printable', 'base64'].includes(transferEncoding)) {\n              contentStream = new (transferEncoding === 'base64' ? base64 : qp).Encoder(options);\n              contentStream.pipe(outputStream, {\n                end: false\n              });\n              contentStream.once('end', finalize);\n              contentStream.once('error', function (err) {\n                return callback(err);\n              });\n              localStream = _this6._getStream(_this6.content);\n              localStream.pipe(contentStream);\n            } else {\n              // anything that is not QP or Base54 passes as-is\n              localStream = _this6._getStream(_this6.content);\n              localStream.pipe(outputStream, {\n                end: false\n              });\n              localStream.once('end', finalize);\n            }\n            localStream.once('error', function (err) {\n              return callback(err);\n            });\n          };\n          if (_this6.content._resolve) {\n            var chunks = [];\n            var chunklen = 0;\n            var _returned = false;\n            var sourceStream = _this6._getStream(_this6.content);\n            sourceStream.on('error', function (err) {\n              if (_returned) {\n                return;\n              }\n              _returned = true;\n              callback(err);\n            });\n            sourceStream.on('readable', function () {\n              var chunk;\n              while ((chunk = sourceStream.read()) !== null) {\n                chunks.push(chunk);\n                chunklen += chunk.length;\n              }\n            });\n            sourceStream.on('end', function () {\n              if (_returned) {\n                return;\n              }\n              _returned = true;\n              _this6.content._resolve = false;\n              _this6.content._resolvedValue = Buffer.concat(chunks, chunklen);\n              setImmediate(createStream);\n            });\n          } else {\n            setImmediate(createStream);\n          }\n          return;\n        } else {\n          return setImmediate(finalize);\n        }\n      };\n      if (this._raw) {\n        setImmediate(function () {\n          if (Object.prototype.toString.call(_this6._raw) === '[object Error]') {\n            // content is already errored\n            return callback(_this6._raw);\n          }\n\n          // remove default error handler (if set)\n          if (typeof _this6._raw.pipe === 'function') {\n            _this6._raw.removeListener('error', _this6._contentErrorHandler);\n          }\n          var raw = _this6._getStream(_this6._raw);\n          raw.pipe(outputStream, {\n            end: false\n          });\n          raw.on('error', function (err) {\n            return outputStream.emit('error', err);\n          });\n          raw.on('end', finalize);\n        });\n      } else {\n        outputStream.write(this.buildHeaders() + '\\r\\n\\r\\n');\n        setImmediate(sendContent);\n      }\n    }\n\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n  }, {\n    key: \"setEnvelope\",\n    value: function setEnvelope(envelope) {\n      var _this7 = this;\n      var list;\n      this._envelope = {\n        from: false,\n        to: []\n      };\n      if (envelope.from) {\n        list = [];\n        this._convertAddresses(this._parseAddresses(envelope.from), list);\n        list = list.filter(function (address) {\n          return address && address.address;\n        });\n        if (list.length && list[0]) {\n          this._envelope.from = list[0].address;\n        }\n      }\n      ['to', 'cc', 'bcc'].forEach(function (key) {\n        if (envelope[key]) {\n          _this7._convertAddresses(_this7._parseAddresses(envelope[key]), _this7._envelope.to);\n        }\n      });\n      this._envelope.to = this._envelope.to.map(function (to) {\n        return to.address;\n      }).filter(function (address) {\n        return address;\n      });\n      var standardFields = ['to', 'cc', 'bcc', 'from'];\n      Object.keys(envelope).forEach(function (key) {\n        if (!standardFields.includes(key)) {\n          _this7._envelope[key] = envelope[key];\n        }\n      });\n      return this;\n    }\n\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */\n  }, {\n    key: \"getAddresses\",\n    value: function getAddresses() {\n      var _this8 = this;\n      var addresses = {};\n      this._headers.forEach(function (header) {\n        var key = header.key.toLowerCase();\n        if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].includes(key)) {\n          if (!Array.isArray(addresses[key])) {\n            addresses[key] = [];\n          }\n          _this8._convertAddresses(_this8._parseAddresses(header.value), addresses[key]);\n        }\n      });\n      return addresses;\n    }\n\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n  }, {\n    key: \"getEnvelope\",\n    value: function getEnvelope() {\n      var _this9 = this;\n      if (this._envelope) {\n        return this._envelope;\n      }\n      var envelope = {\n        from: false,\n        to: []\n      };\n      this._headers.forEach(function (header) {\n        var list = [];\n        if (header.key === 'From' || !envelope.from && ['Reply-To', 'Sender'].includes(header.key)) {\n          _this9._convertAddresses(_this9._parseAddresses(header.value), list);\n          if (list.length && list[0]) {\n            envelope.from = list[0].address;\n          }\n        } else if (['To', 'Cc', 'Bcc'].includes(header.key)) {\n          _this9._convertAddresses(_this9._parseAddresses(header.value), envelope.to);\n        }\n      });\n      envelope.to = envelope.to.map(function (to) {\n        return to.address;\n      });\n      return envelope;\n    }\n\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */\n  }, {\n    key: \"messageId\",\n    value: function messageId() {\n      var messageId = this.getHeader('Message-ID');\n      // You really should define your own Message-Id field!\n      if (!messageId) {\n        messageId = this._generateMessageId();\n        this.setHeader('Message-ID', messageId);\n      }\n      return messageId;\n    }\n\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */\n  }, {\n    key: \"setRaw\",\n    value: function setRaw(raw) {\n      var _this10 = this;\n      this._raw = raw;\n      if (this._raw && typeof this._raw.pipe === 'function') {\n        // pre-stream handler. might be triggered if a stream is set as content\n        // and 'error' fires before anything is done with this stream\n        this._contentErrorHandler = function (err) {\n          _this10._raw.removeListener('error', _this10._contentErrorHandler);\n          _this10._raw = err;\n        };\n        this._raw.once('error', this._contentErrorHandler);\n      }\n      return this;\n    }\n\n    /////// PRIVATE METHODS\n\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */\n  }, {\n    key: \"_getStream\",\n    value: function _getStream(content) {\n      var contentStream;\n      if (content._resolvedValue) {\n        // pass string or buffer content as a stream\n        contentStream = new PassThrough();\n        setImmediate(function () {\n          try {\n            contentStream.end(content._resolvedValue);\n          } catch (err) {\n            contentStream.emit('error', err);\n          }\n        });\n        return contentStream;\n      } else if (typeof content.pipe === 'function') {\n        // assume as stream\n        return content;\n      } else if (content && typeof content.path === 'string' && !content.href) {\n        if (this.disableFileAccess) {\n          contentStream = new PassThrough();\n          setImmediate(function () {\n            return contentStream.emit('error', new Error('File access rejected for ' + content.path));\n          });\n          return contentStream;\n        }\n        // read file\n        return fs.createReadStream(content.path);\n      } else if (content && typeof content.href === 'string') {\n        if (this.disableUrlAccess) {\n          contentStream = new PassThrough();\n          setImmediate(function () {\n            return contentStream.emit('error', new Error('Url access rejected for ' + content.href));\n          });\n          return contentStream;\n        }\n        // fetch URL\n        return nmfetch(content.href, {\n          headers: content.httpHeaders\n        });\n      } else {\n        // pass string or buffer content as a stream\n        contentStream = new PassThrough();\n        setImmediate(function () {\n          try {\n            contentStream.end(content || '');\n          } catch (err) {\n            contentStream.emit('error', err);\n          }\n        });\n        return contentStream;\n      }\n    }\n\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */\n  }, {\n    key: \"_parseAddresses\",\n    value: function _parseAddresses(addresses) {\n      var _this11 = this;\n      return [].concat.apply([], [].concat(addresses).map(function (address) {\n        // eslint-disable-line prefer-spread\n        if (address && address.address) {\n          address.address = _this11._normalizeAddress(address.address);\n          address.name = address.name || '';\n          return [address];\n        }\n        return addressparser(address);\n      }));\n    }\n\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */\n  }, {\n    key: \"_normalizeHeaderKey\",\n    value: function _normalizeHeaderKey(key) {\n      key = (key || '').toString()\n      // no newlines in keys\n      .replace(/\\r?\\n|\\r/g, ' ').trim().toLowerCase()\n      // use uppercase words, except MIME\n      .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, function (c) {\n        return c.toUpperCase();\n      })\n      // special case\n      .replace(/^Content-Features$/i, 'Content-features');\n      return key;\n    }\n\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */\n  }, {\n    key: \"_handleContentType\",\n    value: function _handleContentType(structured) {\n      this.contentType = structured.value.trim().toLowerCase();\n      this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf('/') + 1) : false;\n      if (this.multipart) {\n        this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n      } else {\n        this.boundary = false;\n      }\n    }\n\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */\n  }, {\n    key: \"_generateBoundary\",\n    value: function _generateBoundary() {\n      return this.rootNode.boundaryPrefix + '-' + this.rootNode.baseBoundary + '-Part_' + this._nodeId;\n    }\n\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */\n  }, {\n    key: \"_encodeHeaderValue\",\n    value: function _encodeHeaderValue(key, value) {\n      key = this._normalizeHeaderKey(key);\n      switch (key) {\n        // Structured headers\n        case 'From':\n        case 'Sender':\n        case 'To':\n        case 'Cc':\n        case 'Bcc':\n        case 'Reply-To':\n          return this._convertAddresses(this._parseAddresses(value));\n\n        // values enclosed in <>\n        case 'Message-ID':\n        case 'In-Reply-To':\n        case 'Content-Id':\n          value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n          if (value.charAt(0) !== '<') {\n            value = '<' + value;\n          }\n          if (value.charAt(value.length - 1) !== '>') {\n            value = value + '>';\n          }\n          return value;\n\n        // space separated list of values enclosed in <>\n        case 'References':\n          value = [].concat.apply([], [].concat(value || '').map(function (elm) {\n            // eslint-disable-line prefer-spread\n            elm = (elm || '').toString().replace(/\\r?\\n|\\r/g, ' ').trim();\n            return elm.replace(/<[^>]*>/g, function (str) {\n              return str.replace(/\\s/g, '');\n            }).split(/\\s+/);\n          })).map(function (elm) {\n            if (elm.charAt(0) !== '<') {\n              elm = '<' + elm;\n            }\n            if (elm.charAt(elm.length - 1) !== '>') {\n              elm = elm + '>';\n            }\n            return elm;\n          });\n          return value.join(' ').trim();\n        case 'Date':\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return value.toUTCString().replace(/GMT/, '+0000');\n          }\n          value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n          return this._encodeWords(value);\n        case 'Content-Type':\n        case 'Content-Disposition':\n          // if it includes a filename then it is already encoded\n          return (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n        default:\n          value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n          // encodeWords only encodes if needed, otherwise the original string is returned\n          return this._encodeWords(value);\n      }\n    }\n\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */\n  }, {\n    key: \"_convertAddresses\",\n    value: function _convertAddresses(addresses, uniqueList) {\n      var _this12 = this;\n      var values = [];\n      uniqueList = uniqueList || [];\n      [].concat(addresses || []).forEach(function (address) {\n        if (address.address) {\n          address.address = _this12._normalizeAddress(address.address);\n          if (!address.name) {\n            values.push(address.address.indexOf(' ') >= 0 ? \"<\".concat(address.address, \">\") : \"\".concat(address.address));\n          } else if (address.name) {\n            values.push(\"\".concat(_this12._encodeAddressName(address.name), \" <\").concat(address.address, \">\"));\n          }\n          if (address.address) {\n            if (!uniqueList.filter(function (a) {\n              return a.address === address.address;\n            }).length) {\n              uniqueList.push(address);\n            }\n          }\n        } else if (address.group) {\n          var groupListAddresses = (address.group.length ? _this12._convertAddresses(address.group, uniqueList) : '').trim();\n          values.push(\"\".concat(_this12._encodeAddressName(address.name), \":\").concat(groupListAddresses, \";\"));\n        }\n      });\n      return values.join(', ');\n    }\n\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */\n  }, {\n    key: \"_normalizeAddress\",\n    value: function _normalizeAddress(address) {\n      address = (address || '').toString().replace(/[\\x00-\\x1F<>]+/g, ' ') // remove unallowed characters\n      .trim();\n      var lastAt = address.lastIndexOf('@');\n      if (lastAt < 0) {\n        // Bare username\n        return address;\n      }\n      var user = address.substr(0, lastAt);\n      var domain = address.substr(lastAt + 1);\n\n      // Usernames are not touched and are kept as is even if these include unicode\n      // Domains are punycoded by default\n      // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n      // non-unicode domains are left as is\n\n      var encodedDomain;\n      try {\n        encodedDomain = punycode.toASCII(domain.toLowerCase());\n      } catch (err) {\n        // keep as is?\n      }\n      if (user.indexOf(' ') >= 0) {\n        if (user.charAt(0) !== '\"') {\n          user = '\"' + user;\n        }\n        if (user.substr(-1) !== '\"') {\n          user = user + '\"';\n        }\n      }\n      return \"\".concat(user, \"@\").concat(encodedDomain);\n    }\n\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n  }, {\n    key: \"_encodeAddressName\",\n    value: function _encodeAddressName(name) {\n      if (!/^[\\w ]*$/.test(name)) {\n        if (/^[\\x20-\\x7e]*$/.test(name)) {\n          return '\"' + name.replace(/([\\\\\"])/g, '\\\\$1') + '\"';\n        } else {\n          return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n        }\n      }\n      return name;\n    }\n\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n  }, {\n    key: \"_encodeWords\",\n    value: function _encodeWords(value) {\n      // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n      // by default only words that include non-ascii should be converted into encoded words\n      // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n      return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */\n  }, {\n    key: \"_getTextEncoding\",\n    value: function _getTextEncoding(value) {\n      value = (value || '').toString();\n      var encoding = this.textEncoding;\n      var latinLen;\n      var nonLatinLen;\n      if (!encoding) {\n        // count latin alphabet symbols and 8-bit range symbols + control symbols\n        // if there are more latin characters, then use quoted-printable\n        // encoding, otherwise use base64\n        nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n        latinLen = (value.match(/[a-z]/gi) || []).length;\n        // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n        encoding = nonLatinLen < latinLen ? 'Q' : 'B';\n      }\n      return encoding;\n    }\n\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */\n  }, {\n    key: \"_generateMessageId\",\n    value: function _generateMessageId() {\n      return '<' + [2, 2, 2, 6].reduce(\n      // crux to generate UUID-like random strings\n      function (prev, len) {\n        return prev + '-' + crypto.randomBytes(len).toString('hex');\n      }, crypto.randomBytes(4).toString('hex')) + '@' +\n      // try to use the domain of the FROM address or fallback to server hostname\n      (this.getEnvelope().from || this.hostname || 'localhost').split('@').pop() + '>';\n    }\n  }]);\n}();\nmodule.exports = MimeNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVhOztBQUFBLFNBQUFBLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssZ0JBQUFDLFFBQUEsRUFBQUMsV0FBQSxVQUFBRCxRQUFBLFlBQUFDLFdBQUEsZUFBQUMsU0FBQTtBQUFBLFNBQUFDLGtCQUFBQyxNQUFBLEVBQUFDLEtBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELEtBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLFVBQUEsR0FBQUgsS0FBQSxDQUFBQyxDQUFBLEdBQUFFLFVBQUEsQ0FBQUMsVUFBQSxHQUFBRCxVQUFBLENBQUFDLFVBQUEsV0FBQUQsVUFBQSxDQUFBRSxZQUFBLHdCQUFBRixVQUFBLEVBQUFBLFVBQUEsQ0FBQUcsUUFBQSxTQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVQsTUFBQSxFQUFBVSxjQUFBLENBQUFOLFVBQUEsQ0FBQU8sR0FBQSxHQUFBUCxVQUFBO0FBQUEsU0FBQVEsYUFBQWYsV0FBQSxFQUFBZ0IsVUFBQSxFQUFBQyxXQUFBLFFBQUFELFVBQUEsRUFBQWQsaUJBQUEsQ0FBQUYsV0FBQSxDQUFBSCxTQUFBLEVBQUFtQixVQUFBLE9BQUFDLFdBQUEsRUFBQWYsaUJBQUEsQ0FBQUYsV0FBQSxFQUFBaUIsV0FBQSxHQUFBTixNQUFBLENBQUFDLGNBQUEsQ0FBQVosV0FBQSxpQkFBQVUsUUFBQSxtQkFBQVYsV0FBQTtBQUFBLFNBQUFhLGVBQUFLLEdBQUEsUUFBQUosR0FBQSxHQUFBSyxZQUFBLENBQUFELEdBQUEsb0JBQUExQixPQUFBLENBQUFzQixHQUFBLGlCQUFBQSxHQUFBLEdBQUFNLE1BQUEsQ0FBQU4sR0FBQTtBQUFBLFNBQUFLLGFBQUFFLEtBQUEsRUFBQUMsSUFBQSxRQUFBOUIsT0FBQSxDQUFBNkIsS0FBQSxrQkFBQUEsS0FBQSxrQkFBQUEsS0FBQSxNQUFBRSxJQUFBLEdBQUFGLEtBQUEsQ0FBQTNCLE1BQUEsQ0FBQThCLFdBQUEsT0FBQUQsSUFBQSxLQUFBRSxTQUFBLFFBQUFDLEdBQUEsR0FBQUgsSUFBQSxDQUFBSSxJQUFBLENBQUFOLEtBQUEsRUFBQUMsSUFBQSxvQkFBQTlCLE9BQUEsQ0FBQWtDLEdBQUEsdUJBQUFBLEdBQUEsWUFBQXpCLFNBQUEsNERBQUFxQixJQUFBLGdCQUFBRixNQUFBLEdBQUFRLE1BQUEsRUFBQVAsS0FBQTtBQUViLElBQU1RLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQ2hDLElBQU1DLEVBQUUsR0FBR0QsbUJBQU8sQ0FBQyxjQUFJLENBQUM7QUFDeEIsSUFBTUUsUUFBUSxHQUFHRixtQkFBTyxDQUFDLDBFQUFhLENBQUM7QUFDdkMsSUFBTUcsV0FBVyxHQUFHSCx5REFBNkI7QUFDakQsSUFBTUksTUFBTSxHQUFHSixtQkFBTyxDQUFDLHNFQUFXLENBQUM7QUFFbkMsSUFBTUssU0FBUyxHQUFHTCxtQkFBTyxDQUFDLDhFQUFlLENBQUM7QUFDMUMsSUFBTU0sRUFBRSxHQUFHTixtQkFBTyxDQUFDLDhEQUFPLENBQUM7QUFDM0IsSUFBTU8sTUFBTSxHQUFHUCxtQkFBTyxDQUFDLHNFQUFXLENBQUM7QUFDbkMsSUFBTVEsYUFBYSxHQUFHUixtQkFBTyxDQUFDLG9GQUFrQixDQUFDO0FBQ2pELElBQU1TLE9BQU8sR0FBR1QsbUJBQU8sQ0FBQyxvRUFBVSxDQUFDO0FBQ25DLElBQU1VLFdBQVcsR0FBR1YsbUJBQU8sQ0FBQyxxRkFBZ0IsQ0FBQztBQUU3QyxJQUFNVyxTQUFTLEdBQUdYLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUN6QyxJQUFNWSxNQUFNLEdBQUdaLG1CQUFPLENBQUMsMkVBQVcsQ0FBQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEEsSUFlTWEsUUFBUTtFQUNWLFNBQUFBLFNBQVlDLFdBQVcsRUFBRUMsT0FBTyxFQUFFO0lBQUEvQyxlQUFBLE9BQUE2QyxRQUFBO0lBQzlCLElBQUksQ0FBQ0csV0FBVyxHQUFHLENBQUM7SUFFcEJELE9BQU8sR0FBR0EsT0FBTyxJQUFJLENBQUMsQ0FBQzs7SUFFdkI7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQ0UsWUFBWSxJQUFJbEIsTUFBTSxDQUFDbUIsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ2pGLElBQUksQ0FBQ0MsY0FBYyxHQUFHTCxPQUFPLENBQUNLLGNBQWMsSUFBSSxRQUFRO0lBRXhELElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDTixPQUFPLENBQUNNLGlCQUFpQjtJQUNwRCxJQUFJLENBQUNDLGdCQUFnQixHQUFHLENBQUMsQ0FBQ1AsT0FBTyxDQUFDTyxnQkFBZ0I7SUFFbEQsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR1IsT0FBTyxDQUFDUSxrQkFBa0I7O0lBRXBEO0FBQ1I7QUFDQTtJQUNRLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUlDLElBQUksQ0FBQyxDQUFDOztJQUV0QjtBQUNSO0FBQ0E7SUFDUSxJQUFJLENBQUNDLFFBQVEsR0FBR1gsT0FBTyxDQUFDVyxRQUFRLElBQUksSUFBSTs7SUFFeEM7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDWixPQUFPLENBQUNZLE9BQU87O0lBRWhDO0FBQ1I7QUFDQTtBQUNBO0lBQ1EsSUFBSVosT0FBTyxDQUFDYSxRQUFRLEVBQUU7TUFDbEI7QUFDWjtBQUNBO01BQ1ksSUFBSSxDQUFDQSxRQUFRLEdBQUdiLE9BQU8sQ0FBQ2EsUUFBUTtNQUNoQyxJQUFJLENBQUNkLFdBQVcsRUFBRTtRQUNkQSxXQUFXLEdBQUdULFNBQVMsQ0FBQ3dCLGNBQWMsQ0FBQyxJQUFJLENBQUNELFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO01BQzFFO0lBQ0o7O0lBRUE7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQ2pCLE9BQU8sQ0FBQ2lCLFlBQVksSUFBSSxFQUFFLEVBQUViLFFBQVEsQ0FBQyxDQUFDLENBQUNjLElBQUksQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7O0lBRTFGO0FBQ1I7QUFDQTtJQUNRLElBQUksQ0FBQ0MsVUFBVSxHQUFHckIsT0FBTyxDQUFDcUIsVUFBVTs7SUFFcEM7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxRQUFRLEdBQUd0QixPQUFPLENBQUNzQixRQUFROztJQUVoQztBQUNSO0FBQ0E7SUFDUSxJQUFJLENBQUNDLE9BQU8sR0FBR3ZCLE9BQU8sQ0FBQ3VCLE9BQU87O0lBRTlCO0FBQ1I7QUFDQTtJQUNRLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7O0lBRXBCO0FBQ1I7QUFDQTtJQUNRLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUUsSUFBSSxDQUFDZCxRQUFRLENBQUNWLFdBQVc7O0lBRTFDO0FBQ1I7QUFDQTtJQUNRLElBQUksQ0FBQ3lCLFFBQVEsR0FBRyxFQUFFOztJQUVsQjtBQUNSO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQ0MsWUFBWSxHQUFHLEtBQUs7O0lBRXpCO0FBQ1I7QUFDQTtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxhQUFhLEdBQUcsS0FBSzs7SUFFMUI7QUFDUjtBQUNBO0FBQ0E7SUFDUSxJQUFJLENBQUNDLFNBQVMsR0FBRyxLQUFLOztJQUV0QjtBQUNSO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEtBQUs7O0lBRWpCO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7SUFDUSxJQUFJLENBQUNDLFdBQVcsR0FBRyxFQUFFOztJQUVyQjtBQUNSO0FBQ0E7QUFDQTtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxhQUFhLEdBQUcsRUFBRTs7SUFFdkI7QUFDUjtBQUNBO0lBQ1EsSUFBSWpDLFdBQVcsRUFBRTtNQUNiLElBQUksQ0FBQ2tDLFNBQVMsQ0FBQyxjQUFjLEVBQUVsQyxXQUFXLENBQUM7SUFDL0M7RUFDSjs7RUFFQTs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQU5JLE9BQUE3QixZQUFBLENBQUE0QixRQUFBO0lBQUE3QixHQUFBO0lBQUFpRSxLQUFBLEVBT0EsU0FBQUMsWUFBWXBDLFdBQVcsRUFBRUMsT0FBTyxFQUFFO01BQzlCLElBQUksQ0FBQ0EsT0FBTyxJQUFJckQsT0FBQSxDQUFPb0QsV0FBVyxNQUFLLFFBQVEsRUFBRTtRQUM3Q0MsT0FBTyxHQUFHRCxXQUFXO1FBQ3JCQSxXQUFXLEdBQUduQixTQUFTO01BQzNCO01BQ0EsSUFBSXdELElBQUksR0FBRyxJQUFJdEMsUUFBUSxDQUFDQyxXQUFXLEVBQUVDLE9BQU8sQ0FBQztNQUM3QyxJQUFJLENBQUNxQyxXQUFXLENBQUNELElBQUksQ0FBQztNQUN0QixPQUFPQSxJQUFJO0lBQ2Y7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFOSTtJQUFBbkUsR0FBQTtJQUFBaUUsS0FBQSxFQU9BLFNBQUFHLFlBQVlDLFNBQVMsRUFBRTtNQUNuQixJQUFJQSxTQUFTLENBQUMzQixRQUFRLEtBQUssSUFBSSxDQUFDQSxRQUFRLEVBQUU7UUFDdEMyQixTQUFTLENBQUMzQixRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO1FBQ2xDMkIsU0FBUyxDQUFDYixPQUFPLEdBQUcsRUFBRSxJQUFJLENBQUNkLFFBQVEsQ0FBQ1YsV0FBVztNQUNuRDtNQUVBcUMsU0FBUyxDQUFDakIsVUFBVSxHQUFHLElBQUk7TUFFM0IsSUFBSSxDQUFDRyxVQUFVLENBQUNlLElBQUksQ0FBQ0QsU0FBUyxDQUFDO01BQy9CLE9BQU9BLFNBQVM7SUFDcEI7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBTEk7SUFBQXJFLEdBQUE7SUFBQWlFLEtBQUEsRUFNQSxTQUFBTSxRQUFRSixJQUFJLEVBQUU7TUFBQSxJQUFBSyxLQUFBO01BQ1YsSUFBSUwsSUFBSSxLQUFLLElBQUksRUFBRTtRQUNmLE9BQU8sSUFBSTtNQUNmO01BRUEsSUFBSSxDQUFDZixVQUFVLENBQUNHLFVBQVUsQ0FBQ2tCLE9BQU8sQ0FBQyxVQUFDSixTQUFTLEVBQUU5RSxDQUFDLEVBQUs7UUFDakQsSUFBSThFLFNBQVMsS0FBS0csS0FBSSxFQUFFO1VBQ3BCTCxJQUFJLENBQUN6QixRQUFRLEdBQUc4QixLQUFJLENBQUM5QixRQUFRO1VBQzdCeUIsSUFBSSxDQUFDZixVQUFVLEdBQUdvQixLQUFJLENBQUNwQixVQUFVO1VBQ2pDZSxJQUFJLENBQUNYLE9BQU8sR0FBR2dCLEtBQUksQ0FBQ2hCLE9BQU87VUFFM0JnQixLQUFJLENBQUM5QixRQUFRLEdBQUc4QixLQUFJO1VBQ3BCQSxLQUFJLENBQUNwQixVQUFVLEdBQUd6QyxTQUFTO1VBRTNCd0QsSUFBSSxDQUFDZixVQUFVLENBQUNHLFVBQVUsQ0FBQ2hFLENBQUMsQ0FBQyxHQUFHNEUsSUFBSTtRQUN4QztNQUNKLENBQUMsQ0FBQztNQUVGLE9BQU9BLElBQUk7SUFDZjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBSkk7SUFBQW5FLEdBQUE7SUFBQWlFLEtBQUEsRUFLQSxTQUFBUyxPQUFBLEVBQVM7TUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDdEIsVUFBVSxFQUFFO1FBQ2xCLE9BQU8sSUFBSTtNQUNmO01BRUEsS0FBSyxJQUFJN0QsQ0FBQyxHQUFHLElBQUksQ0FBQzZELFVBQVUsQ0FBQ0csVUFBVSxDQUFDL0QsTUFBTSxHQUFHLENBQUMsRUFBRUQsQ0FBQyxJQUFJLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7UUFDN0QsSUFBSSxJQUFJLENBQUM2RCxVQUFVLENBQUNHLFVBQVUsQ0FBQ2hFLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtVQUN4QyxJQUFJLENBQUM2RCxVQUFVLENBQUNHLFVBQVUsQ0FBQ29CLE1BQU0sQ0FBQ3BGLENBQUMsRUFBRSxDQUFDLENBQUM7VUFDdkMsSUFBSSxDQUFDNkQsVUFBVSxHQUFHekMsU0FBUztVQUMzQixJQUFJLENBQUMrQixRQUFRLEdBQUcsSUFBSTtVQUNwQixPQUFPLElBQUk7UUFDZjtNQUNKO0lBQ0o7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBUkk7SUFBQTFDLEdBQUE7SUFBQWlFLEtBQUEsRUFTQSxTQUFBRCxVQUFVaEUsR0FBRyxFQUFFaUUsS0FBSyxFQUFFO01BQUEsSUFBQVcsTUFBQTtNQUNsQixJQUFJQyxLQUFLLEdBQUcsS0FBSztRQUNiQyxXQUFXOztNQUVmO01BQ0EsSUFBSSxDQUFDYixLQUFLLElBQUlqRSxHQUFHLElBQUl0QixPQUFBLENBQU9zQixHQUFHLE1BQUssUUFBUSxFQUFFO1FBQzFDO1FBQ0EsSUFBSUEsR0FBRyxDQUFDQSxHQUFHLElBQUksT0FBTyxJQUFJQSxHQUFHLEVBQUU7VUFDM0IsSUFBSSxDQUFDZ0UsU0FBUyxDQUFDaEUsR0FBRyxDQUFDQSxHQUFHLEVBQUVBLEdBQUcsQ0FBQ2lFLEtBQUssQ0FBQztRQUN0QyxDQUFDLE1BQU0sSUFBSWMsS0FBSyxDQUFDQyxPQUFPLENBQUNoRixHQUFHLENBQUMsRUFBRTtVQUMzQjtVQUNBQSxHQUFHLENBQUN5RSxPQUFPLENBQUMsVUFBQWxGLENBQUMsRUFBSTtZQUNicUYsTUFBSSxDQUFDWixTQUFTLENBQUN6RSxDQUFDLENBQUNTLEdBQUcsRUFBRVQsQ0FBQyxDQUFDMEUsS0FBSyxDQUFDO1VBQ2xDLENBQUMsQ0FBQztRQUNOLENBQUMsTUFBTTtVQUNIO1VBQ0FwRSxNQUFNLENBQUNvRixJQUFJLENBQUNqRixHQUFHLENBQUMsQ0FBQ3lFLE9BQU8sQ0FBQyxVQUFBbEYsQ0FBQyxFQUFJO1lBQzFCcUYsTUFBSSxDQUFDWixTQUFTLENBQUN6RSxDQUFDLEVBQUVTLEdBQUcsQ0FBQ1QsQ0FBQyxDQUFDLENBQUM7VUFDN0IsQ0FBQyxDQUFDO1FBQ047UUFDQSxPQUFPLElBQUk7TUFDZjtNQUVBUyxHQUFHLEdBQUcsSUFBSSxDQUFDa0YsbUJBQW1CLENBQUNsRixHQUFHLENBQUM7TUFFbkM4RSxXQUFXLEdBQUc7UUFDVjlFLEdBQUcsRUFBSEEsR0FBRztRQUNIaUUsS0FBSyxFQUFMQTtNQUNKLENBQUM7O01BRUQ7TUFDQSxLQUFLLElBQUkxRSxDQUFDLEdBQUcsQ0FBQyxFQUFFNEYsR0FBRyxHQUFHLElBQUksQ0FBQzFCLFFBQVEsQ0FBQ2pFLE1BQU0sRUFBRUQsQ0FBQyxHQUFHNEYsR0FBRyxFQUFFNUYsQ0FBQyxFQUFFLEVBQUU7UUFDdEQsSUFBSSxJQUFJLENBQUNrRSxRQUFRLENBQUNsRSxDQUFDLENBQUMsQ0FBQ1MsR0FBRyxLQUFLQSxHQUFHLEVBQUU7VUFDOUIsSUFBSSxDQUFDNkUsS0FBSyxFQUFFO1lBQ1I7WUFDQSxJQUFJLENBQUNwQixRQUFRLENBQUNsRSxDQUFDLENBQUMsR0FBR3VGLFdBQVc7WUFDOUJELEtBQUssR0FBRyxJQUFJO1VBQ2hCLENBQUMsTUFBTTtZQUNIO1lBQ0EsSUFBSSxDQUFDcEIsUUFBUSxDQUFDa0IsTUFBTSxDQUFDcEYsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQkEsQ0FBQyxFQUFFO1lBQ0g0RixHQUFHLEVBQUU7VUFDVDtRQUNKO01BQ0o7O01BRUE7TUFDQSxJQUFJLENBQUNOLEtBQUssRUFBRTtRQUNSLElBQUksQ0FBQ3BCLFFBQVEsQ0FBQ2EsSUFBSSxDQUFDUSxXQUFXLENBQUM7TUFDbkM7TUFFQSxPQUFPLElBQUk7SUFDZjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQVRJO0lBQUE5RSxHQUFBO0lBQUFpRSxLQUFBLEVBVUEsU0FBQW1CLFVBQVVwRixHQUFHLEVBQUVpRSxLQUFLLEVBQUU7TUFBQSxJQUFBb0IsTUFBQTtNQUNsQjtNQUNBLElBQUksQ0FBQ3BCLEtBQUssSUFBSWpFLEdBQUcsSUFBSXRCLE9BQUEsQ0FBT3NCLEdBQUcsTUFBSyxRQUFRLEVBQUU7UUFDMUM7UUFDQSxJQUFJQSxHQUFHLENBQUNBLEdBQUcsSUFBSUEsR0FBRyxDQUFDaUUsS0FBSyxFQUFFO1VBQ3RCLElBQUksQ0FBQ21CLFNBQVMsQ0FBQ3BGLEdBQUcsQ0FBQ0EsR0FBRyxFQUFFQSxHQUFHLENBQUNpRSxLQUFLLENBQUM7UUFDdEMsQ0FBQyxNQUFNLElBQUljLEtBQUssQ0FBQ0MsT0FBTyxDQUFDaEYsR0FBRyxDQUFDLEVBQUU7VUFDM0I7VUFDQUEsR0FBRyxDQUFDeUUsT0FBTyxDQUFDLFVBQUFsRixDQUFDLEVBQUk7WUFDYjhGLE1BQUksQ0FBQ0QsU0FBUyxDQUFDN0YsQ0FBQyxDQUFDUyxHQUFHLEVBQUVULENBQUMsQ0FBQzBFLEtBQUssQ0FBQztVQUNsQyxDQUFDLENBQUM7UUFDTixDQUFDLE1BQU07VUFDSDtVQUNBcEUsTUFBTSxDQUFDb0YsSUFBSSxDQUFDakYsR0FBRyxDQUFDLENBQUN5RSxPQUFPLENBQUMsVUFBQWxGLENBQUMsRUFBSTtZQUMxQjhGLE1BQUksQ0FBQ0QsU0FBUyxDQUFDN0YsQ0FBQyxFQUFFUyxHQUFHLENBQUNULENBQUMsQ0FBQyxDQUFDO1VBQzdCLENBQUMsQ0FBQztRQUNOO1FBQ0EsT0FBTyxJQUFJO01BQ2YsQ0FBQyxNQUFNLElBQUl3RixLQUFLLENBQUNDLE9BQU8sQ0FBQ2YsS0FBSyxDQUFDLEVBQUU7UUFDN0JBLEtBQUssQ0FBQ1EsT0FBTyxDQUFDLFVBQUFhLEdBQUcsRUFBSTtVQUNqQkQsTUFBSSxDQUFDRCxTQUFTLENBQUNwRixHQUFHLEVBQUVzRixHQUFHLENBQUM7UUFDNUIsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxJQUFJO01BQ2Y7TUFFQSxJQUFJLENBQUM3QixRQUFRLENBQUNhLElBQUksQ0FBQztRQUNmdEUsR0FBRyxFQUFFLElBQUksQ0FBQ2tGLG1CQUFtQixDQUFDbEYsR0FBRyxDQUFDO1FBQ2xDaUUsS0FBSyxFQUFMQTtNQUNKLENBQUMsQ0FBQztNQUVGLE9BQU8sSUFBSTtJQUNmOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxJO0lBQUFqRSxHQUFBO0lBQUFpRSxLQUFBLEVBTUEsU0FBQXNCLFVBQVV2RixHQUFHLEVBQUU7TUFDWEEsR0FBRyxHQUFHLElBQUksQ0FBQ2tGLG1CQUFtQixDQUFDbEYsR0FBRyxDQUFDO01BQ25DLEtBQUssSUFBSVQsQ0FBQyxHQUFHLENBQUMsRUFBRTRGLEdBQUcsR0FBRyxJQUFJLENBQUMxQixRQUFRLENBQUNqRSxNQUFNLEVBQUVELENBQUMsR0FBRzRGLEdBQUcsRUFBRTVGLENBQUMsRUFBRSxFQUFFO1FBQ3RELElBQUksSUFBSSxDQUFDa0UsUUFBUSxDQUFDbEUsQ0FBQyxDQUFDLENBQUNTLEdBQUcsS0FBS0EsR0FBRyxFQUFFO1VBQzlCLE9BQU8sSUFBSSxDQUFDeUQsUUFBUSxDQUFDbEUsQ0FBQyxDQUFDLENBQUMwRSxLQUFLO1FBQ2pDO01BQ0o7SUFDSjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBUEk7SUFBQWpFLEdBQUE7SUFBQWlFLEtBQUEsRUFRQSxTQUFBdUIsV0FBV0MsT0FBTyxFQUFFO01BQUEsSUFBQUMsTUFBQTtNQUNoQixJQUFJLENBQUNELE9BQU8sR0FBR0EsT0FBTztNQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNFLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDekM7UUFDQTtRQUNBLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUcsVUFBQUMsR0FBRyxFQUFJO1VBQy9CSCxNQUFJLENBQUNELE9BQU8sQ0FBQ0ssY0FBYyxDQUFDLE9BQU8sRUFBRUosTUFBSSxDQUFDRSxvQkFBb0IsQ0FBQztVQUMvREYsTUFBSSxDQUFDRCxPQUFPLEdBQUdJLEdBQUc7UUFDdEIsQ0FBQztRQUNELElBQUksQ0FBQ0osT0FBTyxDQUFDTSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ0gsb0JBQW9CLENBQUM7TUFDekQsQ0FBQyxNQUFNLElBQUksT0FBTyxJQUFJLENBQUNILE9BQU8sS0FBSyxRQUFRLEVBQUU7UUFDekMsSUFBSSxDQUFDL0IsWUFBWSxHQUFHckMsU0FBUyxDQUFDMkUsV0FBVyxDQUFDLElBQUksQ0FBQ1AsT0FBTyxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDL0IsWUFBWSxJQUFJckMsU0FBUyxDQUFDNEUsY0FBYyxDQUFDLElBQUksQ0FBQ1IsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1VBQ2pFO1VBQ0EsSUFBSSxDQUFDOUIsYUFBYSxHQUFHLElBQUk7UUFDN0I7TUFDSjtNQUNBLE9BQU8sSUFBSTtJQUNmO0VBQUM7SUFBQTNELEdBQUE7SUFBQWlFLEtBQUEsRUFFRCxTQUFBaUMsTUFBTUMsUUFBUSxFQUFFO01BQ1osSUFBSUMsT0FBTztNQUVYLElBQUksQ0FBQ0QsUUFBUSxFQUFFO1FBQ1hDLE9BQU8sR0FBRyxJQUFJQyxPQUFPLENBQUMsVUFBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUs7VUFDdkNKLFFBQVEsR0FBRy9FLE1BQU0sQ0FBQ29GLGVBQWUsQ0FBQ0YsT0FBTyxFQUFFQyxNQUFNLENBQUM7UUFDdEQsQ0FBQyxDQUFDO01BQ047TUFFQSxJQUFJRSxNQUFNLEdBQUcsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO01BQ3BDLElBQUlDLEdBQUcsR0FBRyxFQUFFO01BQ1osSUFBSUMsTUFBTSxHQUFHLENBQUM7TUFDZCxJQUFJQyxRQUFRLEdBQUcsS0FBSztNQUVwQkosTUFBTSxDQUFDSyxFQUFFLENBQUMsVUFBVSxFQUFFLFlBQU07UUFDeEIsSUFBSUMsS0FBSztRQUVULE9BQU8sQ0FBQ0EsS0FBSyxHQUFHTixNQUFNLENBQUNPLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFO1VBQ3JDTCxHQUFHLENBQUNyQyxJQUFJLENBQUN5QyxLQUFLLENBQUM7VUFDZkgsTUFBTSxJQUFJRyxLQUFLLENBQUN2SCxNQUFNO1FBQzFCO01BQ0osQ0FBQyxDQUFDO01BRUZpSCxNQUFNLENBQUNWLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBQUYsR0FBRyxFQUFJO1FBQ3hCLElBQUlnQixRQUFRLEVBQUU7VUFDVjtRQUNKO1FBQ0FBLFFBQVEsR0FBRyxJQUFJO1FBRWYsT0FBT1YsUUFBUSxDQUFDTixHQUFHLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUZZLE1BQU0sQ0FBQ1YsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFBZ0IsS0FBSyxFQUFJO1FBQ3hCLElBQUlGLFFBQVEsRUFBRTtVQUNWO1FBQ0o7UUFDQUEsUUFBUSxHQUFHLElBQUk7UUFFZixJQUFJRSxLQUFLLElBQUlBLEtBQUssQ0FBQ3ZILE1BQU0sRUFBRTtVQUN2Qm1ILEdBQUcsQ0FBQ3JDLElBQUksQ0FBQ3lDLEtBQUssQ0FBQztVQUNmSCxNQUFNLElBQUlHLEtBQUssQ0FBQ3ZILE1BQU07UUFDMUI7UUFDQSxPQUFPMkcsUUFBUSxDQUFDLElBQUksRUFBRWMsTUFBTSxDQUFDQyxNQUFNLENBQUNQLEdBQUcsRUFBRUMsTUFBTSxDQUFDLENBQUM7TUFDckQsQ0FBQyxDQUFDO01BRUYsT0FBT1IsT0FBTztJQUNsQjtFQUFDO0lBQUFwRyxHQUFBO0lBQUFpRSxLQUFBLEVBRUQsU0FBQWtELG9CQUFBLEVBQXNCO01BQ2xCLElBQUlDLGdCQUFnQixHQUFHLEtBQUs7TUFDNUIsSUFBSXRGLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQ3lELFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUVwRCxRQUFRLENBQUMsQ0FBQyxDQUFDa0YsV0FBVyxDQUFDLENBQUMsQ0FBQ3BFLElBQUksQ0FBQyxDQUFDO01BRXhGLElBQUksSUFBSSxDQUFDd0MsT0FBTyxFQUFFO1FBQ2QyQixnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQzdCLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsRUFBRXBELFFBQVEsQ0FBQyxDQUFDLENBQUNrRixXQUFXLENBQUMsQ0FBQyxDQUFDcEUsSUFBSSxDQUFDLENBQUM7UUFDdEcsSUFBSSxDQUFDbUUsZ0JBQWdCLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDRSxRQUFRLENBQUNGLGdCQUFnQixDQUFDLEVBQUU7VUFDakYsSUFBSSxVQUFVLENBQUNHLElBQUksQ0FBQ3pGLFdBQVcsQ0FBQyxFQUFFO1lBQzlCO1lBQ0EsSUFBSSxJQUFJLENBQUM0QixZQUFZLElBQUksQ0FBQyxJQUFJLENBQUNDLGFBQWEsRUFBRTtjQUMxQ3lELGdCQUFnQixHQUFHLE1BQU07WUFDN0IsQ0FBQyxNQUFNLElBQUksT0FBTyxJQUFJLENBQUMzQixPQUFPLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQ0EsT0FBTyxZQUFZd0IsTUFBTSxFQUFFO2NBQzNFO2NBQ0FHLGdCQUFnQixHQUFHLElBQUksQ0FBQ0ksZ0JBQWdCLENBQUMsSUFBSSxDQUFDL0IsT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHLGtCQUFrQixHQUFHLFFBQVE7WUFDbEcsQ0FBQyxNQUFNO2NBQ0g7Y0FDQTJCLGdCQUFnQixHQUFHLElBQUksQ0FBQ3BFLFlBQVksS0FBSyxHQUFHLEdBQUcsUUFBUSxHQUFHLGtCQUFrQjtZQUNoRjtVQUNKLENBQUMsTUFBTSxJQUFJLENBQUMseUJBQXlCLENBQUN1RSxJQUFJLENBQUN6RixXQUFXLENBQUMsRUFBRTtZQUNyRHNGLGdCQUFnQixHQUFHQSxnQkFBZ0IsSUFBSSxRQUFRO1VBQ25EO1FBQ0o7TUFDSjtNQUNBLE9BQU9BLGdCQUFnQjtJQUMzQjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBSkk7SUFBQXBILEdBQUE7SUFBQWlFLEtBQUEsRUFLQSxTQUFBd0QsYUFBQSxFQUFlO01BQUEsSUFBQUMsTUFBQTtNQUNYLElBQUlOLGdCQUFnQixHQUFHLElBQUksQ0FBQ0QsbUJBQW1CLENBQUMsQ0FBQztNQUNqRCxJQUFJUSxPQUFPLEdBQUcsRUFBRTtNQUVoQixJQUFJUCxnQkFBZ0IsRUFBRTtRQUNsQixJQUFJLENBQUNwRCxTQUFTLENBQUMsMkJBQTJCLEVBQUVvRCxnQkFBZ0IsQ0FBQztNQUNqRTtNQUVBLElBQUksSUFBSSxDQUFDeEUsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDMkMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7UUFDekQsSUFBSSxDQUFDdkIsU0FBUyxDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQztNQUN2RDs7TUFFQTtNQUNBLElBQUksSUFBSSxDQUFDdEIsUUFBUSxLQUFLLElBQUksRUFBRTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDNkMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1VBQ3pCLElBQUksQ0FBQ3ZCLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDeEIsSUFBSSxDQUFDb0YsV0FBVyxDQUFDLENBQUMsQ0FBQ3JELE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0U7O1FBRUE7UUFDQSxJQUFJLENBQUNzRCxTQUFTLENBQUMsQ0FBQztRQUVoQixJQUFJLENBQUMsSUFBSSxDQUFDdEMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1VBQ2pDLElBQUksQ0FBQ3ZCLFNBQVMsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDO1FBQ3pDOztRQUVBO1FBQ0EsS0FBSyxJQUFJekUsQ0FBQyxHQUFHLElBQUksQ0FBQ2tFLFFBQVEsQ0FBQ2pFLE1BQU0sR0FBRyxDQUFDLEVBQUVELENBQUMsSUFBSSxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO1VBQ2hELElBQUl1SSxNQUFNLEdBQUcsSUFBSSxDQUFDckUsUUFBUSxDQUFDbEUsQ0FBQyxDQUFDO1VBQzdCLElBQUl1SSxNQUFNLENBQUM5SCxHQUFHLEtBQUssY0FBYyxFQUFFO1lBQy9CLElBQUksQ0FBQ3lELFFBQVEsQ0FBQ2tCLE1BQU0sQ0FBQ3BGLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDa0UsUUFBUSxDQUFDYSxJQUFJLENBQUN3RCxNQUFNLENBQUM7VUFDOUI7UUFDSjtNQUNKO01BRUEsSUFBSSxDQUFDckUsUUFBUSxDQUFDZ0IsT0FBTyxDQUFDLFVBQUFxRCxNQUFNLEVBQUk7UUFDNUIsSUFBSTlILEdBQUcsR0FBRzhILE1BQU0sQ0FBQzlILEdBQUc7UUFDcEIsSUFBSWlFLEtBQUssR0FBRzZELE1BQU0sQ0FBQzdELEtBQUs7UUFDeEIsSUFBSThELFVBQVU7UUFDZCxJQUFJQyxLQUFLO1FBQ1QsSUFBSWpHLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSWtHLGdCQUFnQixHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQztRQUU5RixJQUFJaEUsS0FBSyxJQUFJdkYsT0FBQSxDQUFPdUYsS0FBSyxNQUFLLFFBQVEsSUFBSSxDQUFDZ0UsZ0JBQWdCLENBQUNYLFFBQVEsQ0FBQ3RILEdBQUcsQ0FBQyxFQUFFO1VBQ3ZFSCxNQUFNLENBQUNvRixJQUFJLENBQUNoQixLQUFLLENBQUMsQ0FBQ1EsT0FBTyxDQUFDLFVBQUF6RSxHQUFHLEVBQUk7WUFDOUIsSUFBSUEsR0FBRyxLQUFLLE9BQU8sRUFBRTtjQUNqQitCLE9BQU8sQ0FBQy9CLEdBQUcsQ0FBQyxHQUFHaUUsS0FBSyxDQUFDakUsR0FBRyxDQUFDO1lBQzdCO1VBQ0osQ0FBQyxDQUFDO1VBQ0ZpRSxLQUFLLEdBQUcsQ0FBQ0EsS0FBSyxDQUFDQSxLQUFLLElBQUksRUFBRSxFQUFFOUIsUUFBUSxDQUFDLENBQUM7VUFDdEMsSUFBSSxDQUFDOEIsS0FBSyxDQUFDaEIsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNmO1VBQ0o7UUFDSjtRQUVBLElBQUlsQixPQUFPLENBQUNtRyxRQUFRLEVBQUU7VUFDbEI7VUFDQSxJQUFJbkcsT0FBTyxDQUFDb0csU0FBUyxFQUFFO1lBQ25CUixPQUFPLENBQUNyRCxJQUFJLENBQUNqRCxTQUFTLENBQUM4RyxTQUFTLENBQUNuSSxHQUFHLEdBQUcsSUFBSSxHQUFHaUUsS0FBSyxDQUFDLENBQUM7VUFDekQsQ0FBQyxNQUFNO1lBQ0gwRCxPQUFPLENBQUNyRCxJQUFJLENBQUN0RSxHQUFHLEdBQUcsSUFBSSxHQUFHaUUsS0FBSyxDQUFDO1VBQ3BDO1VBQ0E7UUFDSjtRQUVBLFFBQVE2RCxNQUFNLENBQUM5SCxHQUFHO1VBQ2QsS0FBSyxxQkFBcUI7WUFDdEIrSCxVQUFVLEdBQUcxRyxTQUFTLENBQUMrRyxnQkFBZ0IsQ0FBQ25FLEtBQUssQ0FBQztZQUM5QyxJQUFJeUQsTUFBSSxDQUFDOUUsUUFBUSxFQUFFO2NBQ2ZtRixVQUFVLENBQUNNLE1BQU0sQ0FBQ3pGLFFBQVEsR0FBRzhFLE1BQUksQ0FBQzlFLFFBQVE7WUFDOUM7WUFDQXFCLEtBQUssR0FBRzVDLFNBQVMsQ0FBQ2lILGdCQUFnQixDQUFDUCxVQUFVLENBQUM7WUFDOUM7VUFFSixLQUFLLGNBQWM7WUFDZkEsVUFBVSxHQUFHMUcsU0FBUyxDQUFDK0csZ0JBQWdCLENBQUNuRSxLQUFLLENBQUM7WUFFOUN5RCxNQUFJLENBQUNhLGtCQUFrQixDQUFDUixVQUFVLENBQUM7WUFFbkMsSUFBSUEsVUFBVSxDQUFDOUQsS0FBSyxDQUFDdUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksT0FBT2QsTUFBSSxDQUFDakMsT0FBTyxLQUFLLFFBQVEsSUFBSSxpQkFBaUIsQ0FBQzhCLElBQUksQ0FBQ0csTUFBSSxDQUFDakMsT0FBTyxDQUFDLEVBQUU7Y0FDdEhzQyxVQUFVLENBQUNNLE1BQU0sQ0FBQ0ksT0FBTyxHQUFHLE9BQU87WUFDdkM7WUFFQXhFLEtBQUssR0FBRzVDLFNBQVMsQ0FBQ2lILGdCQUFnQixDQUFDUCxVQUFVLENBQUM7WUFFOUMsSUFBSUwsTUFBSSxDQUFDOUUsUUFBUSxFQUFFO2NBQ2Y7Y0FDQTtjQUNBO2NBQ0FvRixLQUFLLEdBQUdOLE1BQUksQ0FBQ2dCLFlBQVksQ0FBQ2hCLE1BQUksQ0FBQzlFLFFBQVEsQ0FBQztjQUV4QyxJQUFJb0YsS0FBSyxLQUFLTixNQUFJLENBQUM5RSxRQUFRLElBQUksMkJBQTJCLENBQUMyRSxJQUFJLENBQUNTLEtBQUssQ0FBQyxFQUFFO2dCQUNwRTtnQkFDQUEsS0FBSyxHQUFHLEdBQUcsR0FBR0EsS0FBSyxHQUFHLEdBQUc7Y0FDN0I7Y0FDQS9ELEtBQUssSUFBSSxTQUFTLEdBQUcrRCxLQUFLO1lBQzlCO1lBQ0E7VUFFSixLQUFLLEtBQUs7WUFDTixJQUFJLENBQUNOLE1BQUksQ0FBQy9FLE9BQU8sRUFBRTtjQUNmO2NBQ0E7WUFDSjtZQUNBO1FBQ1I7UUFFQXNCLEtBQUssR0FBR3lELE1BQUksQ0FBQ2lCLGtCQUFrQixDQUFDM0ksR0FBRyxFQUFFaUUsS0FBSyxDQUFDOztRQUUzQztRQUNBLElBQUksQ0FBQyxDQUFDQSxLQUFLLElBQUksRUFBRSxFQUFFOUIsUUFBUSxDQUFDLENBQUMsQ0FBQ2MsSUFBSSxDQUFDLENBQUMsRUFBRTtVQUNsQztRQUNKO1FBRUEsSUFBSSxPQUFPeUUsTUFBSSxDQUFDbkYsa0JBQWtCLEtBQUssVUFBVSxFQUFFO1VBQy9DLElBQUlxRyxVQUFVLEdBQUdsQixNQUFJLENBQUNuRixrQkFBa0IsQ0FBQ3ZDLEdBQUcsRUFBRWlFLEtBQUssQ0FBQztVQUNwRCxJQUFJMkUsVUFBVSxJQUFJLE9BQU9BLFVBQVUsS0FBSyxRQUFRLElBQUlBLFVBQVUsQ0FBQ3BKLE1BQU0sRUFBRTtZQUNuRVEsR0FBRyxHQUFHNEksVUFBVTtVQUNwQjtRQUNKO1FBRUFqQixPQUFPLENBQUNyRCxJQUFJLENBQUNqRCxTQUFTLENBQUM4RyxTQUFTLENBQUNuSSxHQUFHLEdBQUcsSUFBSSxHQUFHaUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO01BQzdELENBQUMsQ0FBQztNQUVGLE9BQU8wRCxPQUFPLENBQUNrQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQy9COztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxJO0lBQUE3SSxHQUFBO0lBQUFpRSxLQUFBLEVBTUEsU0FBQXlDLGlCQUFpQjNFLE9BQU8sRUFBRTtNQUN0QkEsT0FBTyxHQUFHQSxPQUFPLElBQUksQ0FBQyxDQUFDO01BRXZCLElBQUkwRSxNQUFNLEdBQUcsSUFBSXRGLFdBQVcsQ0FBQ1ksT0FBTyxDQUFDO01BQ3JDLElBQUkrRyxZQUFZLEdBQUdyQyxNQUFNO01BQ3pCLElBQUlzQyxTQUFTO01BRWIsSUFBSSxDQUFDdEMsTUFBTSxDQUFDQSxNQUFNLEVBQUUxRSxPQUFPLEVBQUUsVUFBQThELEdBQUcsRUFBSTtRQUNoQyxJQUFJQSxHQUFHLEVBQUU7VUFDTGlELFlBQVksQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRW5ELEdBQUcsQ0FBQztVQUMvQjtRQUNKO1FBQ0FZLE1BQU0sQ0FBQ3dDLEdBQUcsQ0FBQyxDQUFDO01BQ2hCLENBQUMsQ0FBQztNQUVGLEtBQUssSUFBSTFKLENBQUMsR0FBRyxDQUFDLEVBQUU0RixHQUFHLEdBQUcsSUFBSSxDQUFDckIsV0FBVyxDQUFDdEUsTUFBTSxFQUFFRCxDQUFDLEdBQUc0RixHQUFHLEVBQUU1RixDQUFDLEVBQUUsRUFBRTtRQUN6RHdKLFNBQVMsR0FBRyxPQUFPLElBQUksQ0FBQ2pGLFdBQVcsQ0FBQ3ZFLENBQUMsQ0FBQyxLQUFLLFVBQVUsR0FBRyxJQUFJLENBQUN1RSxXQUFXLENBQUN2RSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDdUUsV0FBVyxDQUFDdkUsQ0FBQyxDQUFDO1FBQ25HdUosWUFBWSxDQUFDL0MsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFBRixHQUFHLEVBQUk7VUFDOUJrRCxTQUFTLENBQUNDLElBQUksQ0FBQyxPQUFPLEVBQUVuRCxHQUFHLENBQUM7UUFDaEMsQ0FBQyxDQUFDO1FBQ0ZpRCxZQUFZLEdBQUdBLFlBQVksQ0FBQ25ELElBQUksQ0FBQ29ELFNBQVMsQ0FBQztNQUMvQzs7TUFFQTtNQUNBQSxTQUFTLEdBQUcsSUFBSXJILFdBQVcsQ0FBQyxDQUFDO01BQzdCb0gsWUFBWSxDQUFDL0MsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFBRixHQUFHLEVBQUk7UUFDOUJrRCxTQUFTLENBQUNDLElBQUksQ0FBQyxPQUFPLEVBQUVuRCxHQUFHLENBQUM7TUFDaEMsQ0FBQyxDQUFDO01BQ0ZpRCxZQUFZLEdBQUdBLFlBQVksQ0FBQ25ELElBQUksQ0FBQ29ELFNBQVMsQ0FBQzs7TUFFM0M7TUFDQSxLQUFLLElBQUl4SixFQUFDLEdBQUcsQ0FBQyxFQUFFNEYsSUFBRyxHQUFHLElBQUksQ0FBQ3BCLGFBQWEsQ0FBQ3ZFLE1BQU0sRUFBRUQsRUFBQyxHQUFHNEYsSUFBRyxFQUFFNUYsRUFBQyxFQUFFLEVBQUU7UUFDM0R3SixTQUFTLEdBQUcsSUFBSSxDQUFDaEYsYUFBYSxDQUFDeEUsRUFBQyxDQUFDO1FBQ2pDdUosWUFBWSxHQUFHQyxTQUFTLENBQUNELFlBQVksQ0FBQztNQUMxQztNQUVBLElBQUksSUFBSSxDQUFDeEYsT0FBTyxFQUFFO1FBQ2QsSUFBTTRGLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDNUIsUUFBUSxDQUFDLElBQUksQ0FBQ2hFLE9BQU8sQ0FBQ25CLFFBQVEsQ0FBQyxDQUFDLENBQUNrRixXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2xHLElBQU04QixnQkFBZ0IsR0FBR0QsUUFBUSxHQUFHLElBQUl2SCxTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUlDLE1BQU0sQ0FBQyxDQUFDO1FBRWxFLElBQU02RSxPQUFNLEdBQUdxQyxZQUFZLENBQUNuRCxJQUFJLENBQUN3RCxnQkFBZ0IsQ0FBQztRQUNsREwsWUFBWSxDQUFDaEMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFBakIsR0FBRztVQUFBLE9BQUlZLE9BQU0sQ0FBQ3VDLElBQUksQ0FBQyxPQUFPLEVBQUVuRCxHQUFHLENBQUM7UUFBQSxFQUFDO1FBQzFELE9BQU9ZLE9BQU07TUFDakI7TUFFQSxPQUFPcUMsWUFBWTtJQUN2Qjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMSTtJQUFBOUksR0FBQTtJQUFBaUUsS0FBQSxFQU1BLFNBQUE4RSxVQUFVQSxVQUFTLEVBQUU7TUFDakIsSUFBSSxDQUFDakYsV0FBVyxDQUFDUSxJQUFJLENBQUN5RSxVQUFTLENBQUM7SUFDcEM7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQVBJO0lBQUEvSSxHQUFBO0lBQUFpRSxLQUFBLEVBUUEsU0FBQW1GLFlBQVlBLFlBQVcsRUFBRTtNQUNyQixJQUFJLENBQUNyRixhQUFhLENBQUNPLElBQUksQ0FBQzhFLFlBQVcsQ0FBQztJQUN4QztFQUFDO0lBQUFwSixHQUFBO0lBQUFpRSxLQUFBLEVBRUQsU0FBQXdDLE9BQU9xQyxZQUFZLEVBQUUvRyxPQUFPLEVBQUVzSCxJQUFJLEVBQUU7TUFBQSxJQUFBQyxNQUFBO01BQ2hDLElBQUlsQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUNELG1CQUFtQixDQUFDLENBQUM7TUFDakQsSUFBSW9DLGFBQWE7TUFDakIsSUFBSUMsV0FBVzs7TUFFZjtNQUNBLElBQUkzQyxRQUFRLEdBQUcsS0FBSztNQUNwQixJQUFJVixRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBR04sR0FBRyxFQUFJO1FBQ2xCLElBQUlnQixRQUFRLEVBQUU7VUFDVjtRQUNKO1FBQ0FBLFFBQVEsR0FBRyxJQUFJO1FBQ2Z3QyxJQUFJLENBQUN4RCxHQUFHLENBQUM7TUFDYixDQUFDOztNQUVEO01BQ0E7TUFDQSxJQUFJNEQsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUEsRUFBUztRQUNqQixJQUFJQyxPQUFPLEdBQUcsQ0FBQztRQUNmLElBQUlDLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUEsRUFBUztVQUN6QixJQUFJRCxPQUFPLElBQUlKLE1BQUksQ0FBQy9GLFVBQVUsQ0FBQy9ELE1BQU0sRUFBRTtZQUNuQ3NKLFlBQVksQ0FBQ2MsS0FBSyxDQUFDLFFBQVEsR0FBR04sTUFBSSxDQUFDTyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3ZELE9BQU8xRCxRQUFRLENBQUMsQ0FBQztVQUNyQjtVQUNBLElBQUkyRCxLQUFLLEdBQUdSLE1BQUksQ0FBQy9GLFVBQVUsQ0FBQ21HLE9BQU8sRUFBRSxDQUFDO1VBQ3RDWixZQUFZLENBQUNjLEtBQUssQ0FBQyxDQUFDRixPQUFPLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxFQUFFLElBQUksSUFBSSxHQUFHSixNQUFJLENBQUNPLFFBQVEsR0FBRyxNQUFNLENBQUM7VUFDL0VDLEtBQUssQ0FBQ3JELE1BQU0sQ0FBQ3FDLFlBQVksRUFBRS9HLE9BQU8sRUFBRSxVQUFBOEQsR0FBRyxFQUFJO1lBQ3ZDLElBQUlBLEdBQUcsRUFBRTtjQUNMLE9BQU9NLFFBQVEsQ0FBQ04sR0FBRyxDQUFDO1lBQ3hCO1lBQ0FrRSxZQUFZLENBQUNKLGdCQUFnQixDQUFDO1VBQ2xDLENBQUMsQ0FBQztRQUNOLENBQUM7UUFFRCxJQUFJTCxNQUFJLENBQUNVLFNBQVMsRUFBRTtVQUNoQkQsWUFBWSxDQUFDSixnQkFBZ0IsQ0FBQztRQUNsQyxDQUFDLE1BQU07VUFDSCxPQUFPeEQsUUFBUSxDQUFDLENBQUM7UUFDckI7TUFDSixDQUFDOztNQUVEO01BQ0EsSUFBSThELFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQVM7UUFDcEIsSUFBSVgsTUFBSSxDQUFDN0QsT0FBTyxFQUFFO1VBQ2QsSUFBSTVGLE1BQU0sQ0FBQ2QsU0FBUyxDQUFDb0QsUUFBUSxDQUFDdEIsSUFBSSxDQUFDeUksTUFBSSxDQUFDN0QsT0FBTyxDQUFDLEtBQUssZ0JBQWdCLEVBQUU7WUFDbkU7WUFDQSxPQUFPVSxRQUFRLENBQUNtRCxNQUFJLENBQUM3RCxPQUFPLENBQUM7VUFDakM7VUFFQSxJQUFJLE9BQU82RCxNQUFJLENBQUM3RCxPQUFPLENBQUNFLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDekMyRCxNQUFJLENBQUM3RCxPQUFPLENBQUNLLGNBQWMsQ0FBQyxPQUFPLEVBQUV3RCxNQUFJLENBQUMxRCxvQkFBb0IsQ0FBQztZQUMvRDBELE1BQUksQ0FBQzFELG9CQUFvQixHQUFHLFVBQUFDLEdBQUc7Y0FBQSxPQUFJTSxRQUFRLENBQUNOLEdBQUcsQ0FBQztZQUFBO1lBQ2hEeUQsTUFBSSxDQUFDN0QsT0FBTyxDQUFDTSxJQUFJLENBQUMsT0FBTyxFQUFFdUQsTUFBSSxDQUFDMUQsb0JBQW9CLENBQUM7VUFDekQ7VUFFQSxJQUFJc0UsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUEsRUFBUztZQUNyQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM1QyxRQUFRLENBQUNGLGdCQUFnQixDQUFDLEVBQUU7Y0FDM0RtQyxhQUFhLEdBQUcsSUFBSSxDQUFDbkMsZ0JBQWdCLEtBQUssUUFBUSxHQUFHN0YsTUFBTSxHQUFHRCxFQUFFLEVBQUU2SSxPQUFPLENBQUNwSSxPQUFPLENBQUM7Y0FFbEZ3SCxhQUFhLENBQUM1RCxJQUFJLENBQUNtRCxZQUFZLEVBQUU7Z0JBQzdCRyxHQUFHLEVBQUU7Y0FDVCxDQUFDLENBQUM7Y0FDRk0sYUFBYSxDQUFDeEQsSUFBSSxDQUFDLEtBQUssRUFBRTBELFFBQVEsQ0FBQztjQUNuQ0YsYUFBYSxDQUFDeEQsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFBRixHQUFHO2dCQUFBLE9BQUlNLFFBQVEsQ0FBQ04sR0FBRyxDQUFDO2NBQUEsRUFBQztjQUVqRDJELFdBQVcsR0FBR0YsTUFBSSxDQUFDYyxVQUFVLENBQUNkLE1BQUksQ0FBQzdELE9BQU8sQ0FBQztjQUMzQytELFdBQVcsQ0FBQzdELElBQUksQ0FBQzRELGFBQWEsQ0FBQztZQUNuQyxDQUFDLE1BQU07Y0FDSDtjQUNBQyxXQUFXLEdBQUdGLE1BQUksQ0FBQ2MsVUFBVSxDQUFDZCxNQUFJLENBQUM3RCxPQUFPLENBQUM7Y0FDM0MrRCxXQUFXLENBQUM3RCxJQUFJLENBQUNtRCxZQUFZLEVBQUU7Z0JBQzNCRyxHQUFHLEVBQUU7Y0FDVCxDQUFDLENBQUM7Y0FDRk8sV0FBVyxDQUFDekQsSUFBSSxDQUFDLEtBQUssRUFBRTBELFFBQVEsQ0FBQztZQUNyQztZQUVBRCxXQUFXLENBQUN6RCxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQUFGLEdBQUc7Y0FBQSxPQUFJTSxRQUFRLENBQUNOLEdBQUcsQ0FBQztZQUFBLEVBQUM7VUFDbkQsQ0FBQztVQUVELElBQUl5RCxNQUFJLENBQUM3RCxPQUFPLENBQUM0RSxRQUFRLEVBQUU7WUFDdkIsSUFBSUMsTUFBTSxHQUFHLEVBQUU7WUFDZixJQUFJQyxRQUFRLEdBQUcsQ0FBQztZQUNoQixJQUFJMUQsU0FBUSxHQUFHLEtBQUs7WUFDcEIsSUFBSTJELFlBQVksR0FBR2xCLE1BQUksQ0FBQ2MsVUFBVSxDQUFDZCxNQUFJLENBQUM3RCxPQUFPLENBQUM7WUFDaEQrRSxZQUFZLENBQUMxRCxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUFqQixHQUFHLEVBQUk7Y0FDNUIsSUFBSWdCLFNBQVEsRUFBRTtnQkFDVjtjQUNKO2NBQ0FBLFNBQVEsR0FBRyxJQUFJO2NBQ2ZWLFFBQVEsQ0FBQ04sR0FBRyxDQUFDO1lBQ2pCLENBQUMsQ0FBQztZQUNGMkUsWUFBWSxDQUFDMUQsRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFNO2NBQzlCLElBQUlDLEtBQUs7Y0FDVCxPQUFPLENBQUNBLEtBQUssR0FBR3lELFlBQVksQ0FBQ3hELElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFO2dCQUMzQ3NELE1BQU0sQ0FBQ2hHLElBQUksQ0FBQ3lDLEtBQUssQ0FBQztnQkFDbEJ3RCxRQUFRLElBQUl4RCxLQUFLLENBQUN2SCxNQUFNO2NBQzVCO1lBQ0osQ0FBQyxDQUFDO1lBQ0ZnTCxZQUFZLENBQUMxRCxFQUFFLENBQUMsS0FBSyxFQUFFLFlBQU07Y0FDekIsSUFBSUQsU0FBUSxFQUFFO2dCQUNWO2NBQ0o7Y0FDQUEsU0FBUSxHQUFHLElBQUk7Y0FDZnlDLE1BQUksQ0FBQzdELE9BQU8sQ0FBQzRFLFFBQVEsR0FBRyxLQUFLO2NBQzdCZixNQUFJLENBQUM3RCxPQUFPLENBQUNnRixjQUFjLEdBQUd4RCxNQUFNLENBQUNDLE1BQU0sQ0FBQ29ELE1BQU0sRUFBRUMsUUFBUSxDQUFDO2NBQzdEUixZQUFZLENBQUNHLFlBQVksQ0FBQztZQUM5QixDQUFDLENBQUM7VUFDTixDQUFDLE1BQU07WUFDSEgsWUFBWSxDQUFDRyxZQUFZLENBQUM7VUFDOUI7VUFDQTtRQUNKLENBQUMsTUFBTTtVQUNILE9BQU9ILFlBQVksQ0FBQ04sUUFBUSxDQUFDO1FBQ2pDO01BQ0osQ0FBQztNQUVELElBQUksSUFBSSxDQUFDNUYsSUFBSSxFQUFFO1FBQ1hrRyxZQUFZLENBQUMsWUFBTTtVQUNmLElBQUlsSyxNQUFNLENBQUNkLFNBQVMsQ0FBQ29ELFFBQVEsQ0FBQ3RCLElBQUksQ0FBQ3lJLE1BQUksQ0FBQ3pGLElBQUksQ0FBQyxLQUFLLGdCQUFnQixFQUFFO1lBQ2hFO1lBQ0EsT0FBT3NDLFFBQVEsQ0FBQ21ELE1BQUksQ0FBQ3pGLElBQUksQ0FBQztVQUM5Qjs7VUFFQTtVQUNBLElBQUksT0FBT3lGLE1BQUksQ0FBQ3pGLElBQUksQ0FBQzhCLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDdEMyRCxNQUFJLENBQUN6RixJQUFJLENBQUNpQyxjQUFjLENBQUMsT0FBTyxFQUFFd0QsTUFBSSxDQUFDMUQsb0JBQW9CLENBQUM7VUFDaEU7VUFFQSxJQUFJOEUsR0FBRyxHQUFHcEIsTUFBSSxDQUFDYyxVQUFVLENBQUNkLE1BQUksQ0FBQ3pGLElBQUksQ0FBQztVQUNwQzZHLEdBQUcsQ0FBQy9FLElBQUksQ0FBQ21ELFlBQVksRUFBRTtZQUNuQkcsR0FBRyxFQUFFO1VBQ1QsQ0FBQyxDQUFDO1VBQ0Z5QixHQUFHLENBQUM1RCxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUFqQixHQUFHO1lBQUEsT0FBSWlELFlBQVksQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRW5ELEdBQUcsQ0FBQztVQUFBLEVBQUM7VUFDdkQ2RSxHQUFHLENBQUM1RCxFQUFFLENBQUMsS0FBSyxFQUFFMkMsUUFBUSxDQUFDO1FBQzNCLENBQUMsQ0FBQztNQUNOLENBQUMsTUFBTTtRQUNIWCxZQUFZLENBQUNjLEtBQUssQ0FBQyxJQUFJLENBQUNuQyxZQUFZLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNwRHNDLFlBQVksQ0FBQ0UsV0FBVyxDQUFDO01BQzdCO0lBQ0o7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUpJO0lBQUFqSyxHQUFBO0lBQUFpRSxLQUFBLEVBS0EsU0FBQTBHLFlBQVlDLFFBQVEsRUFBRTtNQUFBLElBQUFDLE1BQUE7TUFDbEIsSUFBSUMsSUFBSTtNQUVSLElBQUksQ0FBQ2xILFNBQVMsR0FBRztRQUNibUgsSUFBSSxFQUFFLEtBQUs7UUFDWEMsRUFBRSxFQUFFO01BQ1IsQ0FBQztNQUVELElBQUlKLFFBQVEsQ0FBQ0csSUFBSSxFQUFFO1FBQ2ZELElBQUksR0FBRyxFQUFFO1FBQ1QsSUFBSSxDQUFDRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUNDLGVBQWUsQ0FBQ04sUUFBUSxDQUFDRyxJQUFJLENBQUMsRUFBRUQsSUFBSSxDQUFDO1FBQ2pFQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0ssTUFBTSxDQUFDLFVBQUFDLE9BQU87VUFBQSxPQUFJQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0EsT0FBTztRQUFBLEVBQUM7UUFDekQsSUFBSU4sSUFBSSxDQUFDdEwsTUFBTSxJQUFJc0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1VBQ3hCLElBQUksQ0FBQ2xILFNBQVMsQ0FBQ21ILElBQUksR0FBR0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDTSxPQUFPO1FBQ3pDO01BQ0o7TUFDQSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMzRyxPQUFPLENBQUMsVUFBQXpFLEdBQUcsRUFBSTtRQUMvQixJQUFJNEssUUFBUSxDQUFDNUssR0FBRyxDQUFDLEVBQUU7VUFDZjZLLE1BQUksQ0FBQ0ksaUJBQWlCLENBQUNKLE1BQUksQ0FBQ0ssZUFBZSxDQUFDTixRQUFRLENBQUM1SyxHQUFHLENBQUMsQ0FBQyxFQUFFNkssTUFBSSxDQUFDakgsU0FBUyxDQUFDb0gsRUFBRSxDQUFDO1FBQ2xGO01BQ0osQ0FBQyxDQUFDO01BRUYsSUFBSSxDQUFDcEgsU0FBUyxDQUFDb0gsRUFBRSxHQUFHLElBQUksQ0FBQ3BILFNBQVMsQ0FBQ29ILEVBQUUsQ0FBQ0ssR0FBRyxDQUFDLFVBQUFMLEVBQUU7UUFBQSxPQUFJQSxFQUFFLENBQUNJLE9BQU87TUFBQSxFQUFDLENBQUNELE1BQU0sQ0FBQyxVQUFBQyxPQUFPO1FBQUEsT0FBSUEsT0FBTztNQUFBLEVBQUM7TUFFdEYsSUFBSUUsY0FBYyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDO01BQ2hEekwsTUFBTSxDQUFDb0YsSUFBSSxDQUFDMkYsUUFBUSxDQUFDLENBQUNuRyxPQUFPLENBQUMsVUFBQXpFLEdBQUcsRUFBSTtRQUNqQyxJQUFJLENBQUNzTCxjQUFjLENBQUNoRSxRQUFRLENBQUN0SCxHQUFHLENBQUMsRUFBRTtVQUMvQjZLLE1BQUksQ0FBQ2pILFNBQVMsQ0FBQzVELEdBQUcsQ0FBQyxHQUFHNEssUUFBUSxDQUFDNUssR0FBRyxDQUFDO1FBQ3ZDO01BQ0osQ0FBQyxDQUFDO01BRUYsT0FBTyxJQUFJO0lBQ2Y7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUpJO0lBQUFBLEdBQUE7SUFBQWlFLEtBQUEsRUFLQSxTQUFBc0gsYUFBQSxFQUFlO01BQUEsSUFBQUMsTUFBQTtNQUNYLElBQUlDLFNBQVMsR0FBRyxDQUFDLENBQUM7TUFFbEIsSUFBSSxDQUFDaEksUUFBUSxDQUFDZ0IsT0FBTyxDQUFDLFVBQUFxRCxNQUFNLEVBQUk7UUFDNUIsSUFBSTlILEdBQUcsR0FBRzhILE1BQU0sQ0FBQzlILEdBQUcsQ0FBQ3FILFdBQVcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDQyxRQUFRLENBQUN0SCxHQUFHLENBQUMsRUFBRTtVQUNqRSxJQUFJLENBQUMrRSxLQUFLLENBQUNDLE9BQU8sQ0FBQ3lHLFNBQVMsQ0FBQ3pMLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDaEN5TCxTQUFTLENBQUN6TCxHQUFHLENBQUMsR0FBRyxFQUFFO1VBQ3ZCO1VBRUF3TCxNQUFJLENBQUNQLGlCQUFpQixDQUFDTyxNQUFJLENBQUNOLGVBQWUsQ0FBQ3BELE1BQU0sQ0FBQzdELEtBQUssQ0FBQyxFQUFFd0gsU0FBUyxDQUFDekwsR0FBRyxDQUFDLENBQUM7UUFDOUU7TUFDSixDQUFDLENBQUM7TUFFRixPQUFPeUwsU0FBUztJQUNwQjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBSkk7SUFBQXpMLEdBQUE7SUFBQWlFLEtBQUEsRUFLQSxTQUFBeUgsWUFBQSxFQUFjO01BQUEsSUFBQUMsTUFBQTtNQUNWLElBQUksSUFBSSxDQUFDL0gsU0FBUyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDQSxTQUFTO01BQ3pCO01BRUEsSUFBSWdILFFBQVEsR0FBRztRQUNYRyxJQUFJLEVBQUUsS0FBSztRQUNYQyxFQUFFLEVBQUU7TUFDUixDQUFDO01BQ0QsSUFBSSxDQUFDdkgsUUFBUSxDQUFDZ0IsT0FBTyxDQUFDLFVBQUFxRCxNQUFNLEVBQUk7UUFDNUIsSUFBSWdELElBQUksR0FBRyxFQUFFO1FBQ2IsSUFBSWhELE1BQU0sQ0FBQzlILEdBQUcsS0FBSyxNQUFNLElBQUssQ0FBQzRLLFFBQVEsQ0FBQ0csSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDekQsUUFBUSxDQUFDUSxNQUFNLENBQUM5SCxHQUFHLENBQUUsRUFBRTtVQUMxRjJMLE1BQUksQ0FBQ1YsaUJBQWlCLENBQUNVLE1BQUksQ0FBQ1QsZUFBZSxDQUFDcEQsTUFBTSxDQUFDN0QsS0FBSyxDQUFDLEVBQUU2RyxJQUFJLENBQUM7VUFDaEUsSUFBSUEsSUFBSSxDQUFDdEwsTUFBTSxJQUFJc0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3hCRixRQUFRLENBQUNHLElBQUksR0FBR0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDTSxPQUFPO1VBQ25DO1FBQ0osQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDOUQsUUFBUSxDQUFDUSxNQUFNLENBQUM5SCxHQUFHLENBQUMsRUFBRTtVQUNqRDJMLE1BQUksQ0FBQ1YsaUJBQWlCLENBQUNVLE1BQUksQ0FBQ1QsZUFBZSxDQUFDcEQsTUFBTSxDQUFDN0QsS0FBSyxDQUFDLEVBQUUyRyxRQUFRLENBQUNJLEVBQUUsQ0FBQztRQUMzRTtNQUNKLENBQUMsQ0FBQztNQUVGSixRQUFRLENBQUNJLEVBQUUsR0FBR0osUUFBUSxDQUFDSSxFQUFFLENBQUNLLEdBQUcsQ0FBQyxVQUFBTCxFQUFFO1FBQUEsT0FBSUEsRUFBRSxDQUFDSSxPQUFPO01BQUEsRUFBQztNQUUvQyxPQUFPUixRQUFRO0lBQ25COztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFKSTtJQUFBNUssR0FBQTtJQUFBaUUsS0FBQSxFQUtBLFNBQUE0RCxVQUFBLEVBQVk7TUFDUixJQUFJQSxTQUFTLEdBQUcsSUFBSSxDQUFDdEMsU0FBUyxDQUFDLFlBQVksQ0FBQztNQUM1QztNQUNBLElBQUksQ0FBQ3NDLFNBQVMsRUFBRTtRQUNaQSxTQUFTLEdBQUcsSUFBSSxDQUFDK0Qsa0JBQWtCLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUM1SCxTQUFTLENBQUMsWUFBWSxFQUFFNkQsU0FBUyxDQUFDO01BQzNDO01BQ0EsT0FBT0EsU0FBUztJQUNwQjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBSkk7SUFBQTdILEdBQUE7SUFBQWlFLEtBQUEsRUFLQSxTQUFBNEgsT0FBT25CLEdBQUcsRUFBRTtNQUFBLElBQUFvQixPQUFBO01BQ1IsSUFBSSxDQUFDakksSUFBSSxHQUFHNkcsR0FBRztNQUVmLElBQUksSUFBSSxDQUFDN0csSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDQSxJQUFJLENBQUM4QixJQUFJLEtBQUssVUFBVSxFQUFFO1FBQ25EO1FBQ0E7UUFDQSxJQUFJLENBQUNDLG9CQUFvQixHQUFHLFVBQUFDLEdBQUcsRUFBSTtVQUMvQmlHLE9BQUksQ0FBQ2pJLElBQUksQ0FBQ2lDLGNBQWMsQ0FBQyxPQUFPLEVBQUVnRyxPQUFJLENBQUNsRyxvQkFBb0IsQ0FBQztVQUM1RGtHLE9BQUksQ0FBQ2pJLElBQUksR0FBR2dDLEdBQUc7UUFDbkIsQ0FBQztRQUNELElBQUksQ0FBQ2hDLElBQUksQ0FBQ2tDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDSCxvQkFBb0IsQ0FBQztNQUN0RDtNQUVBLE9BQU8sSUFBSTtJQUNmOztJQUVBOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxJO0lBQUE1RixHQUFBO0lBQUFpRSxLQUFBLEVBTUEsU0FBQW1HLFdBQVczRSxPQUFPLEVBQUU7TUFDaEIsSUFBSThELGFBQWE7TUFFakIsSUFBSTlELE9BQU8sQ0FBQ2dGLGNBQWMsRUFBRTtRQUN4QjtRQUNBbEIsYUFBYSxHQUFHLElBQUlwSSxXQUFXLENBQUMsQ0FBQztRQUVqQzRJLFlBQVksQ0FBQyxZQUFNO1VBQ2YsSUFBSTtZQUNBUixhQUFhLENBQUNOLEdBQUcsQ0FBQ3hELE9BQU8sQ0FBQ2dGLGNBQWMsQ0FBQztVQUM3QyxDQUFDLENBQUMsT0FBTzVFLEdBQUcsRUFBRTtZQUNWMEQsYUFBYSxDQUFDUCxJQUFJLENBQUMsT0FBTyxFQUFFbkQsR0FBRyxDQUFDO1VBQ3BDO1FBQ0osQ0FBQyxDQUFDO1FBRUYsT0FBTzBELGFBQWE7TUFDeEIsQ0FBQyxNQUFNLElBQUksT0FBTzlELE9BQU8sQ0FBQ0UsSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUMzQztRQUNBLE9BQU9GLE9BQU87TUFDbEIsQ0FBQyxNQUFNLElBQUlBLE9BQU8sSUFBSSxPQUFPQSxPQUFPLENBQUNzRyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUN0RyxPQUFPLENBQUN1RyxJQUFJLEVBQUU7UUFDckUsSUFBSSxJQUFJLENBQUMzSixpQkFBaUIsRUFBRTtVQUN4QmtILGFBQWEsR0FBRyxJQUFJcEksV0FBVyxDQUFDLENBQUM7VUFDakM0SSxZQUFZLENBQUM7WUFBQSxPQUFNUixhQUFhLENBQUNQLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSWlELEtBQUssQ0FBQywyQkFBMkIsR0FBR3hHLE9BQU8sQ0FBQ3NHLElBQUksQ0FBQyxDQUFDO1VBQUEsRUFBQztVQUN0RyxPQUFPeEMsYUFBYTtRQUN4QjtRQUNBO1FBQ0EsT0FBT3RJLEVBQUUsQ0FBQ3lGLGdCQUFnQixDQUFDakIsT0FBTyxDQUFDc0csSUFBSSxDQUFDO01BQzVDLENBQUMsTUFBTSxJQUFJdEcsT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ3VHLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDcEQsSUFBSSxJQUFJLENBQUMxSixnQkFBZ0IsRUFBRTtVQUN2QmlILGFBQWEsR0FBRyxJQUFJcEksV0FBVyxDQUFDLENBQUM7VUFDakM0SSxZQUFZLENBQUM7WUFBQSxPQUFNUixhQUFhLENBQUNQLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSWlELEtBQUssQ0FBQywwQkFBMEIsR0FBR3hHLE9BQU8sQ0FBQ3VHLElBQUksQ0FBQyxDQUFDO1VBQUEsRUFBQztVQUNyRyxPQUFPekMsYUFBYTtRQUN4QjtRQUNBO1FBQ0EsT0FBTzlILE9BQU8sQ0FBQ2dFLE9BQU8sQ0FBQ3VHLElBQUksRUFBRTtVQUFFckUsT0FBTyxFQUFFbEMsT0FBTyxDQUFDeUc7UUFBWSxDQUFDLENBQUM7TUFDbEUsQ0FBQyxNQUFNO1FBQ0g7UUFDQTNDLGFBQWEsR0FBRyxJQUFJcEksV0FBVyxDQUFDLENBQUM7UUFFakM0SSxZQUFZLENBQUMsWUFBTTtVQUNmLElBQUk7WUFDQVIsYUFBYSxDQUFDTixHQUFHLENBQUN4RCxPQUFPLElBQUksRUFBRSxDQUFDO1VBQ3BDLENBQUMsQ0FBQyxPQUFPSSxHQUFHLEVBQUU7WUFDVjBELGFBQWEsQ0FBQ1AsSUFBSSxDQUFDLE9BQU8sRUFBRW5ELEdBQUcsQ0FBQztVQUNwQztRQUNKLENBQUMsQ0FBQztRQUNGLE9BQU8wRCxhQUFhO01BQ3hCO0lBQ0o7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFOSTtJQUFBdkosR0FBQTtJQUFBaUUsS0FBQSxFQU9BLFNBQUFpSCxnQkFBZ0JPLFNBQVMsRUFBRTtNQUFBLElBQUFVLE9BQUE7TUFDdkIsT0FBTyxFQUFFLENBQUNqRixNQUFNLENBQUNrRixLQUFLLENBQ2xCLEVBQUUsRUFDRixFQUFFLENBQUNsRixNQUFNLENBQUN1RSxTQUFTLENBQUMsQ0FBQ0osR0FBRyxDQUFDLFVBQUFELE9BQU8sRUFBSTtRQUNoQztRQUNBLElBQUlBLE9BQU8sSUFBSUEsT0FBTyxDQUFDQSxPQUFPLEVBQUU7VUFDNUJBLE9BQU8sQ0FBQ0EsT0FBTyxHQUFHZSxPQUFJLENBQUNFLGlCQUFpQixDQUFDakIsT0FBTyxDQUFDQSxPQUFPLENBQUM7VUFDekRBLE9BQU8sQ0FBQ2tCLElBQUksR0FBR2xCLE9BQU8sQ0FBQ2tCLElBQUksSUFBSSxFQUFFO1VBQ2pDLE9BQU8sQ0FBQ2xCLE9BQU8sQ0FBQztRQUNwQjtRQUNBLE9BQU81SixhQUFhLENBQUM0SixPQUFPLENBQUM7TUFDakMsQ0FBQyxDQUNMLENBQUM7SUFDTDs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMSTtJQUFBcEwsR0FBQTtJQUFBaUUsS0FBQSxFQU1BLFNBQUFpQixvQkFBb0JsRixHQUFHLEVBQUU7TUFDckJBLEdBQUcsR0FBRyxDQUFDQSxHQUFHLElBQUksRUFBRSxFQUNYbUMsUUFBUSxDQUFDO01BQ1Y7TUFBQSxDQUNDb0MsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FDekJ0QixJQUFJLENBQUMsQ0FBQyxDQUNOb0UsV0FBVyxDQUFDO01BQ2I7TUFBQSxDQUNDOUMsT0FBTyxDQUFDLHdFQUF3RSxFQUFFLFVBQUFnSSxDQUFDO1FBQUEsT0FBSUEsQ0FBQyxDQUFDcEosV0FBVyxDQUFDLENBQUM7TUFBQTtNQUN2RztNQUFBLENBQ0NvQixPQUFPLENBQUMscUJBQXFCLEVBQUUsa0JBQWtCLENBQUM7TUFFdkQsT0FBT3ZFLEdBQUc7SUFDZDs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMSTtJQUFBQSxHQUFBO0lBQUFpRSxLQUFBLEVBTUEsU0FBQXNFLG1CQUFtQlIsVUFBVSxFQUFFO01BQzNCLElBQUksQ0FBQ2pHLFdBQVcsR0FBR2lHLFVBQVUsQ0FBQzlELEtBQUssQ0FBQ2hCLElBQUksQ0FBQyxDQUFDLENBQUNvRSxXQUFXLENBQUMsQ0FBQztNQUV4RCxJQUFJLENBQUMyQyxTQUFTLEdBQUcsZUFBZSxDQUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQ3pGLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQ0EsV0FBVyxDQUFDMEssTUFBTSxDQUFDLElBQUksQ0FBQzFLLFdBQVcsQ0FBQzJLLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLO01BRTVILElBQUksSUFBSSxDQUFDekMsU0FBUyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0gsUUFBUSxHQUFHOUIsVUFBVSxDQUFDTSxNQUFNLENBQUN3QixRQUFRLEdBQUc5QixVQUFVLENBQUNNLE1BQU0sQ0FBQ3dCLFFBQVEsSUFBSSxJQUFJLENBQUNBLFFBQVEsSUFBSSxJQUFJLENBQUM2QyxpQkFBaUIsQ0FBQyxDQUFDO01BQ3hILENBQUMsTUFBTTtRQUNILElBQUksQ0FBQzdDLFFBQVEsR0FBRyxLQUFLO01BQ3pCO0lBQ0o7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUpJO0lBQUE3SixHQUFBO0lBQUFpRSxLQUFBLEVBS0EsU0FBQXlJLGtCQUFBLEVBQW9CO01BQ2hCLE9BQU8sSUFBSSxDQUFDaEssUUFBUSxDQUFDTixjQUFjLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQ00sUUFBUSxDQUFDVCxZQUFZLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQ3VCLE9BQU87SUFDcEc7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBTEk7SUFBQXhELEdBQUE7SUFBQWlFLEtBQUEsRUFNQSxTQUFBMEUsbUJBQW1CM0ksR0FBRyxFQUFFaUUsS0FBSyxFQUFFO01BQzNCakUsR0FBRyxHQUFHLElBQUksQ0FBQ2tGLG1CQUFtQixDQUFDbEYsR0FBRyxDQUFDO01BRW5DLFFBQVFBLEdBQUc7UUFDUDtRQUNBLEtBQUssTUFBTTtRQUNYLEtBQUssUUFBUTtRQUNiLEtBQUssSUFBSTtRQUNULEtBQUssSUFBSTtRQUNULEtBQUssS0FBSztRQUNWLEtBQUssVUFBVTtVQUNYLE9BQU8sSUFBSSxDQUFDaUwsaUJBQWlCLENBQUMsSUFBSSxDQUFDQyxlQUFlLENBQUNqSCxLQUFLLENBQUMsQ0FBQzs7UUFFOUQ7UUFDQSxLQUFLLFlBQVk7UUFDakIsS0FBSyxhQUFhO1FBQ2xCLEtBQUssWUFBWTtVQUNiQSxLQUFLLEdBQUcsQ0FBQ0EsS0FBSyxJQUFJLEVBQUUsRUFBRTlCLFFBQVEsQ0FBQyxDQUFDLENBQUNvQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQztVQUUxRCxJQUFJTixLQUFLLENBQUNmLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDekJlLEtBQUssR0FBRyxHQUFHLEdBQUdBLEtBQUs7VUFDdkI7VUFFQSxJQUFJQSxLQUFLLENBQUNmLE1BQU0sQ0FBQ2UsS0FBSyxDQUFDekUsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUN4Q3lFLEtBQUssR0FBR0EsS0FBSyxHQUFHLEdBQUc7VUFDdkI7VUFDQSxPQUFPQSxLQUFLOztRQUVoQjtRQUNBLEtBQUssWUFBWTtVQUNiQSxLQUFLLEdBQUcsRUFBRSxDQUFDaUQsTUFBTSxDQUNaa0YsS0FBSyxDQUNGLEVBQUUsRUFDRixFQUFFLENBQUNsRixNQUFNLENBQUNqRCxLQUFLLElBQUksRUFBRSxDQUFDLENBQUNvSCxHQUFHLENBQUMsVUFBQXNCLEdBQUcsRUFBSTtZQUM5QjtZQUNBQSxHQUFHLEdBQUcsQ0FBQ0EsR0FBRyxJQUFJLEVBQUUsRUFDWHhLLFFBQVEsQ0FBQyxDQUFDLENBQ1ZvQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUN6QnRCLElBQUksQ0FBQyxDQUFDO1lBQ1gsT0FBTzBKLEdBQUcsQ0FBQ3BJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBQXFJLEdBQUc7Y0FBQSxPQUFJQSxHQUFHLENBQUNySSxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUFBLEVBQUMsQ0FBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUM7VUFDOUUsQ0FBQyxDQUNMLENBQUMsQ0FDQXVJLEdBQUcsQ0FBQyxVQUFBc0IsR0FBRyxFQUFJO1lBQ1IsSUFBSUEsR0FBRyxDQUFDekosTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtjQUN2QnlKLEdBQUcsR0FBRyxHQUFHLEdBQUdBLEdBQUc7WUFDbkI7WUFDQSxJQUFJQSxHQUFHLENBQUN6SixNQUFNLENBQUN5SixHQUFHLENBQUNuTixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2NBQ3BDbU4sR0FBRyxHQUFHQSxHQUFHLEdBQUcsR0FBRztZQUNuQjtZQUNBLE9BQU9BLEdBQUc7VUFDZCxDQUFDLENBQUM7VUFFTixPQUFPMUksS0FBSyxDQUFDNEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDNUYsSUFBSSxDQUFDLENBQUM7UUFFakMsS0FBSyxNQUFNO1VBQ1AsSUFBSXBELE1BQU0sQ0FBQ2QsU0FBUyxDQUFDb0QsUUFBUSxDQUFDdEIsSUFBSSxDQUFDb0QsS0FBSyxDQUFDLEtBQUssZUFBZSxFQUFFO1lBQzNELE9BQU9BLEtBQUssQ0FBQzJELFdBQVcsQ0FBQyxDQUFDLENBQUNyRCxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztVQUN0RDtVQUVBTixLQUFLLEdBQUcsQ0FBQ0EsS0FBSyxJQUFJLEVBQUUsRUFBRTlCLFFBQVEsQ0FBQyxDQUFDLENBQUNvQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQztVQUMxRCxPQUFPLElBQUksQ0FBQ21FLFlBQVksQ0FBQ3pFLEtBQUssQ0FBQztRQUVuQyxLQUFLLGNBQWM7UUFDbkIsS0FBSyxxQkFBcUI7VUFDdEI7VUFDQSxPQUFPLENBQUNBLEtBQUssSUFBSSxFQUFFLEVBQUU5QixRQUFRLENBQUMsQ0FBQyxDQUFDb0MsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUM7UUFFN0Q7VUFDSU4sS0FBSyxHQUFHLENBQUNBLEtBQUssSUFBSSxFQUFFLEVBQUU5QixRQUFRLENBQUMsQ0FBQyxDQUFDb0MsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUM7VUFDMUQ7VUFDQSxPQUFPLElBQUksQ0FBQ21FLFlBQVksQ0FBQ3pFLEtBQUssQ0FBQztNQUN2QztJQUNKOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBTkk7SUFBQWpFLEdBQUE7SUFBQWlFLEtBQUEsRUFPQSxTQUFBZ0gsa0JBQWtCUSxTQUFTLEVBQUVvQixVQUFVLEVBQUU7TUFBQSxJQUFBQyxPQUFBO01BQ3JDLElBQUlDLE1BQU0sR0FBRyxFQUFFO01BRWZGLFVBQVUsR0FBR0EsVUFBVSxJQUFJLEVBQUU7TUFFN0IsRUFBRSxDQUFDM0YsTUFBTSxDQUFDdUUsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDaEgsT0FBTyxDQUFDLFVBQUEyRyxPQUFPLEVBQUk7UUFDMUMsSUFBSUEsT0FBTyxDQUFDQSxPQUFPLEVBQUU7VUFDakJBLE9BQU8sQ0FBQ0EsT0FBTyxHQUFHMEIsT0FBSSxDQUFDVCxpQkFBaUIsQ0FBQ2pCLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDO1VBRXpELElBQUksQ0FBQ0EsT0FBTyxDQUFDa0IsSUFBSSxFQUFFO1lBQ2ZTLE1BQU0sQ0FBQ3pJLElBQUksQ0FBQzhHLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDcUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBQXZGLE1BQUEsQ0FBT2tFLE9BQU8sQ0FBQ0EsT0FBTyxZQUFBbEUsTUFBQSxDQUFTa0UsT0FBTyxDQUFDQSxPQUFPLENBQUUsQ0FBQztVQUNsRyxDQUFDLE1BQU0sSUFBSUEsT0FBTyxDQUFDa0IsSUFBSSxFQUFFO1lBQ3JCUyxNQUFNLENBQUN6SSxJQUFJLElBQUE0QyxNQUFBLENBQUk0RixPQUFJLENBQUNFLGtCQUFrQixDQUFDNUIsT0FBTyxDQUFDa0IsSUFBSSxDQUFDLFFBQUFwRixNQUFBLENBQUtrRSxPQUFPLENBQUNBLE9BQU8sTUFBRyxDQUFDO1VBQ2hGO1VBRUEsSUFBSUEsT0FBTyxDQUFDQSxPQUFPLEVBQUU7WUFDakIsSUFBSSxDQUFDeUIsVUFBVSxDQUFDMUIsTUFBTSxDQUFDLFVBQUE4QixDQUFDO2NBQUEsT0FBSUEsQ0FBQyxDQUFDN0IsT0FBTyxLQUFLQSxPQUFPLENBQUNBLE9BQU87WUFBQSxFQUFDLENBQUM1TCxNQUFNLEVBQUU7Y0FDL0RxTixVQUFVLENBQUN2SSxJQUFJLENBQUM4RyxPQUFPLENBQUM7WUFDNUI7VUFDSjtRQUNKLENBQUMsTUFBTSxJQUFJQSxPQUFPLENBQUM4QixLQUFLLEVBQUU7VUFDdEIsSUFBSUMsa0JBQWtCLEdBQUcsQ0FBQy9CLE9BQU8sQ0FBQzhCLEtBQUssQ0FBQzFOLE1BQU0sR0FBR3NOLE9BQUksQ0FBQzdCLGlCQUFpQixDQUFDRyxPQUFPLENBQUM4QixLQUFLLEVBQUVMLFVBQVUsQ0FBQyxHQUFHLEVBQUUsRUFBRTVKLElBQUksQ0FBQyxDQUFDO1VBQy9HOEosTUFBTSxDQUFDekksSUFBSSxJQUFBNEMsTUFBQSxDQUFJNEYsT0FBSSxDQUFDRSxrQkFBa0IsQ0FBQzVCLE9BQU8sQ0FBQ2tCLElBQUksQ0FBQyxPQUFBcEYsTUFBQSxDQUFJaUcsa0JBQWtCLE1BQUcsQ0FBQztRQUNsRjtNQUNKLENBQUMsQ0FBQztNQUVGLE9BQU9KLE1BQU0sQ0FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDNUI7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBTEk7SUFBQTdJLEdBQUE7SUFBQWlFLEtBQUEsRUFNQSxTQUFBb0ksa0JBQWtCakIsT0FBTyxFQUFFO01BQ3ZCQSxPQUFPLEdBQUcsQ0FBQ0EsT0FBTyxJQUFJLEVBQUUsRUFDbkJqSixRQUFRLENBQUMsQ0FBQyxDQUNWb0MsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDO01BQUEsQ0FDaEN0QixJQUFJLENBQUMsQ0FBQztNQUVYLElBQUltSyxNQUFNLEdBQUdoQyxPQUFPLENBQUNpQyxXQUFXLENBQUMsR0FBRyxDQUFDO01BQ3JDLElBQUlELE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDWjtRQUNBLE9BQU9oQyxPQUFPO01BQ2xCO01BRUEsSUFBSWtDLElBQUksR0FBR2xDLE9BQU8sQ0FBQ29CLE1BQU0sQ0FBQyxDQUFDLEVBQUVZLE1BQU0sQ0FBQztNQUNwQyxJQUFJRyxNQUFNLEdBQUduQyxPQUFPLENBQUNvQixNQUFNLENBQUNZLE1BQU0sR0FBRyxDQUFDLENBQUM7O01BRXZDO01BQ0E7TUFDQTtNQUNBOztNQUVBLElBQUlJLGFBQWE7TUFFakIsSUFBSTtRQUNBQSxhQUFhLEdBQUd0TSxRQUFRLENBQUN1TSxPQUFPLENBQUNGLE1BQU0sQ0FBQ2xHLFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDMUQsQ0FBQyxDQUFDLE9BQU94QixHQUFHLEVBQUU7UUFDVjtNQUFBO01BR0osSUFBSXlILElBQUksQ0FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN4QixJQUFJYSxJQUFJLENBQUNwSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1VBQ3hCb0ssSUFBSSxHQUFHLEdBQUcsR0FBR0EsSUFBSTtRQUNyQjtRQUNBLElBQUlBLElBQUksQ0FBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1VBQ3pCYyxJQUFJLEdBQUdBLElBQUksR0FBRyxHQUFHO1FBQ3JCO01BQ0o7TUFFQSxVQUFBcEcsTUFBQSxDQUFVb0csSUFBSSxPQUFBcEcsTUFBQSxDQUFJc0csYUFBYTtJQUNuQzs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMSTtJQUFBeE4sR0FBQTtJQUFBaUUsS0FBQSxFQU1BLFNBQUErSSxtQkFBbUJWLElBQUksRUFBRTtNQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDL0UsSUFBSSxDQUFDK0UsSUFBSSxDQUFDLEVBQUU7UUFDeEIsSUFBSSxnQkFBZ0IsQ0FBQy9FLElBQUksQ0FBQytFLElBQUksQ0FBQyxFQUFFO1VBQzdCLE9BQU8sR0FBRyxHQUFHQSxJQUFJLENBQUMvSCxPQUFPLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUc7UUFDdkQsQ0FBQyxNQUFNO1VBQ0gsT0FBT2xELFNBQVMsQ0FBQ3FNLFVBQVUsQ0FBQ3BCLElBQUksRUFBRSxJQUFJLENBQUM5RSxnQkFBZ0IsQ0FBQzhFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN0RTtNQUNKO01BQ0EsT0FBT0EsSUFBSTtJQUNmOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxJO0lBQUF0TSxHQUFBO0lBQUFpRSxLQUFBLEVBTUEsU0FBQXlFLGFBQWF6RSxLQUFLLEVBQUU7TUFDaEI7TUFDQTtNQUNBO01BQ0EsT0FBTzVDLFNBQVMsQ0FBQ3NNLFdBQVcsQ0FBQzFKLEtBQUssRUFBRSxJQUFJLENBQUN1RCxnQkFBZ0IsQ0FBQ3ZELEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUM7SUFDL0U7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBTEk7SUFBQWpFLEdBQUE7SUFBQWlFLEtBQUEsRUFNQSxTQUFBdUQsaUJBQWlCdkQsS0FBSyxFQUFFO01BQ3BCQSxLQUFLLEdBQUcsQ0FBQ0EsS0FBSyxJQUFJLEVBQUUsRUFBRTlCLFFBQVEsQ0FBQyxDQUFDO01BRWhDLElBQUl5TCxRQUFRLEdBQUcsSUFBSSxDQUFDNUssWUFBWTtNQUNoQyxJQUFJNkssUUFBUTtNQUNaLElBQUlDLFdBQVc7TUFFZixJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUNYO1FBQ0E7UUFDQTtRQUNBRSxXQUFXLEdBQUcsQ0FBQzdKLEtBQUssQ0FBQ3VFLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxJQUFJLEVBQUUsRUFBRWhKLE1BQU0sQ0FBQyxDQUFDO1FBQ3hGcU8sUUFBUSxHQUFHLENBQUM1SixLQUFLLENBQUN1RSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxFQUFFaEosTUFBTTtRQUNoRDtRQUNBb08sUUFBUSxHQUFHRSxXQUFXLEdBQUdELFFBQVEsR0FBRyxHQUFHLEdBQUcsR0FBRztNQUNqRDtNQUNBLE9BQU9ELFFBQVE7SUFDbkI7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUpJO0lBQUE1TixHQUFBO0lBQUFpRSxLQUFBLEVBS0EsU0FBQTJILG1CQUFBLEVBQXFCO01BQ2pCLE9BQ0ksR0FBRyxHQUNILENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUNtQyxNQUFNO01BQ2Y7TUFDQSxVQUFDQyxJQUFJLEVBQUU3SSxHQUFHO1FBQUEsT0FBSzZJLElBQUksR0FBRyxHQUFHLEdBQUdqTixNQUFNLENBQUNtQixXQUFXLENBQUNpRCxHQUFHLENBQUMsQ0FBQ2hELFFBQVEsQ0FBQyxLQUFLLENBQUM7TUFBQSxHQUNuRXBCLE1BQU0sQ0FBQ21CLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLEtBQUssQ0FDeEMsQ0FBQyxHQUNELEdBQUc7TUFDSDtNQUNBLENBQUMsSUFBSSxDQUFDdUosV0FBVyxDQUFDLENBQUMsQ0FBQ1gsSUFBSSxJQUFJLElBQUksQ0FBQzFILFFBQVEsSUFBSSxXQUFXLEVBQUVQLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FDMUUsR0FBRztJQUVYO0VBQUM7QUFBQTtBQUdMa0wsTUFBTSxDQUFDQyxPQUFPLEdBQUdyTSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlkdmlkLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2luZGV4LmpzPzM2N2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLXVuZGVmaW5lZDogMCwgcHJlZmVyLXNwcmVhZDogMCwgbm8tY29udHJvbC1yZWdleDogMCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcHVueWNvZGUgPSByZXF1aXJlKCcuLi9wdW55Y29kZScpO1xuY29uc3QgUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdzdHJlYW0nKS5QYXNzVGhyb3VnaDtcbmNvbnN0IHNoYXJlZCA9IHJlcXVpcmUoJy4uL3NoYXJlZCcpO1xuXG5jb25zdCBtaW1lRnVuY3MgPSByZXF1aXJlKCcuLi9taW1lLWZ1bmNzJyk7XG5jb25zdCBxcCA9IHJlcXVpcmUoJy4uL3FwJyk7XG5jb25zdCBiYXNlNjQgPSByZXF1aXJlKCcuLi9iYXNlNjQnKTtcbmNvbnN0IGFkZHJlc3NwYXJzZXIgPSByZXF1aXJlKCcuLi9hZGRyZXNzcGFyc2VyJyk7XG5jb25zdCBubWZldGNoID0gcmVxdWlyZSgnLi4vZmV0Y2gnKTtcbmNvbnN0IExhc3ROZXdsaW5lID0gcmVxdWlyZSgnLi9sYXN0LW5ld2xpbmUnKTtcblxuY29uc3QgTGVXaW5kb3dzID0gcmVxdWlyZSgnLi9sZS13aW5kb3dzJyk7XG5jb25zdCBMZVVuaXggPSByZXF1aXJlKCcuL2xlLXVuaXgnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1pbWUgdHJlZSBub2RlLiBBc3N1bWVzICdtdWx0aXBhcnQvKicgYXMgdGhlIGNvbnRlbnQgdHlwZVxuICogaWYgaXQgaXMgYSBicmFuY2gsIGFueXRoaW5nIGVsc2UgY291bnRzIGFzIGxlYWYuIElmIHJvb3ROb2RlIGlzIG1pc3NpbmcgZnJvbVxuICogdGhlIG9wdGlvbnMsIGFzc3VtZXMgdGhpcyBpcyB0aGUgcm9vdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY29udGVudFR5cGUgRGVmaW5lIHRoZSBjb250ZW50IHR5cGUgZm9yIHRoZSBub2RlLiBDYW4gYmUgbGVmdCBibGFuayBmb3IgYXR0YWNobWVudHMgKGRlcml2ZWQgZnJvbSBmaWxlbmFtZSlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gb3B0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnJvb3ROb2RlXSByb290IG5vZGUgZm9yIHRoaXMgdHJlZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnBhcmVudE5vZGVdIGltbWVkaWF0ZSBwYXJlbnQgZm9yIHRoaXMgbm9kZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmZpbGVuYW1lXSBmaWxlbmFtZSBmb3IgYW4gYXR0YWNobWVudCBub2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYmFzZUJvdW5kYXJ5XSBzaGFyZWQgcGFydCBvZiB0aGUgdW5pcXVlIG11bHRpcGFydCBib3VuZGFyeVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5rZWVwQmNjXSBJZiB0cnVlLCBkbyBub3QgZXhjbHVkZSBCY2MgZnJvbSB0aGUgZ2VuZXJhdGVkIGhlYWRlcnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLm5vcm1hbGl6ZUhlYWRlcktleV0gbWV0aG9kIHRvIG5vcm1hbGl6ZSBoZWFkZXIga2V5cyBmb3IgY3VzdG9tIGNhc2VpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy50ZXh0RW5jb2RpbmddIGVpdGhlciAnUScgKHRoZSBkZWZhdWx0KSBvciAnQidcbiAqL1xuY2xhc3MgTWltZU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubm9kZUNvdW50ZXIgPSAwO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzaGFyZWQgcGFydCBvZiB0aGUgdW5pcXVlIG11bHRpcGFydCBib3VuZGFyeVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5iYXNlQm91bmRhcnkgPSBvcHRpb25zLmJhc2VCb3VuZGFyeSB8fCBjcnlwdG8ucmFuZG9tQnl0ZXMoOCkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICB0aGlzLmJvdW5kYXJ5UHJlZml4ID0gb3B0aW9ucy5ib3VuZGFyeVByZWZpeCB8fCAnLS1fTm1QJztcblxuICAgICAgICB0aGlzLmRpc2FibGVGaWxlQWNjZXNzID0gISFvcHRpb25zLmRpc2FibGVGaWxlQWNjZXNzO1xuICAgICAgICB0aGlzLmRpc2FibGVVcmxBY2Nlc3MgPSAhIW9wdGlvbnMuZGlzYWJsZVVybEFjY2VzcztcblxuICAgICAgICB0aGlzLm5vcm1hbGl6ZUhlYWRlcktleSA9IG9wdGlvbnMubm9ybWFsaXplSGVhZGVyS2V5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBkYXRlIGhlYWRlcnMgaXMgbWlzc2luZyBhbmQgY3VycmVudCBub2RlIGlzIHRoZSByb290LCB0aGlzIHZhbHVlIGlzIHVzZWQgaW5zdGVhZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUm9vdCBub2RlIGZvciBjdXJyZW50IG1pbWUgdHJlZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yb290Tm9kZSA9IG9wdGlvbnMucm9vdE5vZGUgfHwgdGhpcztcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdHJ1ZSBpbmNsdWRlIEJjYyBpbiBnZW5lcmF0ZWQgaGVhZGVycyAoaWYgYXZhaWxhYmxlKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5rZWVwQmNjID0gISFvcHRpb25zLmtlZXBCY2M7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGZpbGVuYW1lIGlzIHNwZWNpZmllZCBidXQgY29udGVudFR5cGUgaXMgbm90IChwcm9iYWJseSBhbiBhdHRhY2htZW50KVxuICAgICAgICAgKiBkZXRlY3QgdGhlIGNvbnRlbnQgdHlwZSBmcm9tIGZpbGVuYW1lIGV4dGVuc2lvblxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsZW5hbWUpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmlsZW5hbWUgZm9yIHRoaXMgbm9kZS4gVXNlZnVsIHdpdGggYXR0YWNobWVudHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5maWxlbmFtZSA9IG9wdGlvbnMuZmlsZW5hbWU7XG4gICAgICAgICAgICBpZiAoIWNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29udGVudFR5cGUgPSBtaW1lRnVuY3MuZGV0ZWN0TWltZVR5cGUodGhpcy5maWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hpY2ggZW5jb2Rpbmcgc2hvdWxkIGJlIHVzZWQgZm9yIGhlYWRlciBzdHJpbmdzOiBcIlFcIiBvciBcIkJcIlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50ZXh0RW5jb2RpbmcgPSAob3B0aW9ucy50ZXh0RW5jb2RpbmcgfHwgJycpLnRvU3RyaW5nKCkudHJpbSgpLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbW1lZGlhdGUgcGFyZW50IGZvciB0aGlzIG5vZGUgKG9yIHVuZGVmaW5lZCBpZiBub3Qgc2V0KVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gb3B0aW9ucy5wYXJlbnROb2RlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3N0bmFtZSBmb3IgZGVmYXVsdCBtZXNzYWdlLWlkIHZhbHVlc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ob3N0bmFtZSA9IG9wdGlvbnMuaG9zdG5hbWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCB0byAnd2luJyB0aGVuIHVzZXMgXFxyXFxuLCBpZiAnbGludXgnIHRoZW4gXFxuLiBJZiBub3Qgc2V0IChvciBgcmF3YCBpcyB1c2VkKSB0aGVuIG5ld2xpbmVzIGFyZSBrZXB0IGFzIGlzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uZXdsaW5lID0gb3B0aW9ucy5uZXdsaW5lO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBhcnJheSBmb3IgcG9zc2libGUgY2hpbGQgbm9kZXNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hpbGROb2RlcyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIGZvciBnZW5lcmF0aW5nIHVuaXF1ZSBib3VuZGFyaWVzIChwcmVwZW5kZWQgdG8gdGhlIHNoYXJlZCBiYXNlKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbm9kZUlkID0gKyt0aGlzLnJvb3ROb2RlLm5vZGVDb3VudGVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgaGVhZGVyIHZhbHVlcyBmb3IgdGhpcyBub2RlIGluIHRoZSBmb3JtIG9mIFt7a2V5OicnLCB2YWx1ZTonJ31dXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9oZWFkZXJzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRydWUgaWYgdGhlIGNvbnRlbnQgb25seSB1c2VzIEFTQ0lJIHByaW50YWJsZSBjaGFyYWN0ZXJzXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faXNQbGFpblRleHQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJ1ZSBpZiB0aGUgY29udGVudCBpcyBwbGFpbiB0ZXh0IGJ1dCBoYXMgbG9uZ2VyIGxpbmVzIHRoYW4gYWxsb3dlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2hhc0xvbmdMaW5lcyA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBzZXQsIHVzZSBpbnN0ZWFkIHRoaXMgdmFsdWUgZm9yIGVudmVsb3BlcyBpbnN0ZWFkIG9mIGdlbmVyYXRpbmcgb25lXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZW52ZWxvcGUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0IHRoZW4gdXNlIHRoaXMgdmFsdWUgYXMgdGhlIHN0cmVhbSBjb250ZW50IGluc3RlYWQgb2YgYnVpbGRpbmcgaXRcbiAgICAgICAgICogQHR5cGUge1N0cmluZ3xCdWZmZXJ8U3RyZWFtfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcmF3ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZGl0aW9uYWwgdHJhbnNmb3JtIHN0cmVhbXMgdGhhdCB0aGUgbWVzc2FnZSB3aWxsIGJlIHBpcGVkIGJlZm9yZVxuICAgICAgICAgKiBleHBvc2luZyBieSBjcmVhdGVSZWFkU3RyZWFtXG4gICAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkaXRpb25hbCBwcm9jZXNzIGZ1bmN0aW9ucyB0aGF0IHRoZSBtZXNzYWdlIHdpbGwgYmUgcGlwZWQgdGhyb3VnaCBiZWZvcmVcbiAgICAgICAgICogZXhwb3NpbmcgYnkgY3JlYXRlUmVhZFN0cmVhbS4gVGhlc2UgZnVuY3Rpb25zIGFyZSBydW4gYWZ0ZXIgdHJhbnNmb3Jtc1xuICAgICAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wcm9jZXNzRnVuY3MgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgY29udGVudCB0eXBlIGlzIHNldCAob3IgZGVyaXZlZCBmcm9tIHRoZSBmaWxlbmFtZSkgYWRkIGl0IHRvIGhlYWRlcnNcbiAgICAgICAgICovXG4gICAgICAgIGlmIChjb250ZW50VHlwZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLy8vLy8gUFVCTElDIE1FVEhPRFNcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGFwcGVuZHMgYSBjaGlsZCBub2RlLkFyZ3VtZW50cyBwcm92aWRlZCBhcmUgcGFzc2VkIHRvIE1pbWVOb2RlIGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbnRlbnRUeXBlXSBPcHRpb25hbCBjb250ZW50IHR5cGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDcmVhdGVkIG5vZGUgb2JqZWN0XG4gICAgICovXG4gICAgY3JlYXRlQ2hpbGQoY29udGVudFR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zICYmIHR5cGVvZiBjb250ZW50VHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb250ZW50VHlwZTtcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBub2RlID0gbmV3IE1pbWVOb2RlKGNvbnRlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBhbiBleGlzdGluZyBub2RlIHRvIHRoZSBtaW1lIHRyZWUuIFJlbW92ZXMgdGhlIG5vZGUgZnJvbSBhbiBleGlzdGluZ1xuICAgICAqIHRyZWUgaWYgbmVlZGVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2hpbGROb2RlIG5vZGUgdG8gYmUgYXBwZW5kZWRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFwcGVuZGVkIG5vZGUgb2JqZWN0XG4gICAgICovXG4gICAgYXBwZW5kQ2hpbGQoY2hpbGROb2RlKSB7XG4gICAgICAgIGlmIChjaGlsZE5vZGUucm9vdE5vZGUgIT09IHRoaXMucm9vdE5vZGUpIHtcbiAgICAgICAgICAgIGNoaWxkTm9kZS5yb290Tm9kZSA9IHRoaXMucm9vdE5vZGU7XG4gICAgICAgICAgICBjaGlsZE5vZGUuX25vZGVJZCA9ICsrdGhpcy5yb290Tm9kZS5ub2RlQ291bnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkTm9kZS5wYXJlbnROb2RlID0gdGhpcztcblxuICAgICAgICB0aGlzLmNoaWxkTm9kZXMucHVzaChjaGlsZE5vZGUpO1xuICAgICAgICByZXR1cm4gY2hpbGROb2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGN1cnJlbnQgbm9kZSB3aXRoIGFub3RoZXIgbm9kZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG5vZGUgUmVwbGFjZW1lbnQgbm9kZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gUmVwbGFjZW1lbnQgbm9kZVxuICAgICAqL1xuICAgIHJlcGxhY2Uobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhcmVudE5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZE5vZGUsIGkpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJvb3ROb2RlID0gdGhpcy5yb290Tm9kZTtcbiAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZS5fbm9kZUlkID0gdGhpcy5fbm9kZUlkO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yb290Tm9kZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGN1cnJlbnQgbm9kZSBmcm9tIHRoZSBtaW1lIHRyZWVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcmVtb3ZlZCBub2RlXG4gICAgICovXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBpZiAoIXRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUuY2hpbGROb2Rlc1tpXSA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5jaGlsZE5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yb290Tm9kZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgaGVhZGVyIHZhbHVlLiBJZiB0aGUgdmFsdWUgZm9yIHNlbGVjdGVkIGtleSBleGlzdHMsIGl0IGlzIG92ZXJ3cml0dGVuLlxuICAgICAqIFlvdSBjYW4gc2V0IG11bHRpcGxlIHZhbHVlcyBhcyB3ZWxsIGJ5IHVzaW5nIFt7a2V5OicnLCB2YWx1ZTonJ31dIG9yXG4gICAgICoge2tleTogJ3ZhbHVlJ30gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl8T2JqZWN0fSBrZXkgSGVhZGVyIGtleSBvciBhIGxpc3Qgb2Yga2V5IHZhbHVlIHBhaXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIEhlYWRlciB2YWx1ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gY3VycmVudCBub2RlXG4gICAgICovXG4gICAgc2V0SGVhZGVyKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGFkZGVkID0gZmFsc2UsXG4gICAgICAgICAgICBoZWFkZXJWYWx1ZTtcblxuICAgICAgICAvLyBBbGxvdyBzZXR0aW5nIG11bHRpcGxlIGhlYWRlcnMgYXQgb25jZVxuICAgICAgICBpZiAoIXZhbHVlICYmIGtleSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gYWxsb3cge2tleTonY29udGVudC10eXBlJywgdmFsdWU6ICd0ZXh0L3BsYWluJ31cbiAgICAgICAgICAgIGlmIChrZXkua2V5ICYmICd2YWx1ZScgaW4ga2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXIoa2V5LmtleSwga2V5LnZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAgICAgLy8gYWxsb3cgW3trZXk6J2NvbnRlbnQtdHlwZScsIHZhbHVlOiAndGV4dC9wbGFpbid9XVxuICAgICAgICAgICAgICAgIGtleS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEhlYWRlcihpLmtleSwgaS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IHsnY29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nfVxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGtleSkuZm9yRWFjaChpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXIoaSwga2V5W2ldKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5ID0gdGhpcy5fbm9ybWFsaXplSGVhZGVyS2V5KGtleSk7XG5cbiAgICAgICAgaGVhZGVyVmFsdWUgPSB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSB2YWx1ZSBleGlzdHMgYW5kIG92ZXJ3cml0ZVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5faGVhZGVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hlYWRlcnNbaV0ua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFkZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZpcnN0IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnNbaV0gPSBoZWFkZXJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBmb2xsb3dpbmcgbWF0Y2hlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgICAgICBsZW4tLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYXRjaCBub3QgZm91bmQsIGFwcGVuZCB0aGUgdmFsdWVcbiAgICAgICAgaWYgKCFhZGRlZCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZGVycy5wdXNoKGhlYWRlclZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBoZWFkZXIgdmFsdWUuIElmIHRoZSB2YWx1ZSBmb3Igc2VsZWN0ZWQga2V5IGV4aXN0cywgdGhlIHZhbHVlIGlzIGFwcGVuZGVkXG4gICAgICogYXMgYSBuZXcgZmllbGQgYW5kIG9sZCBvbmUgaXMgbm90IHRvdWNoZWQuXG4gICAgICogWW91IGNhbiBzZXQgbXVsdGlwbGUgdmFsdWVzIGFzIHdlbGwgYnkgdXNpbmcgW3trZXk6JycsIHZhbHVlOicnfV0gb3JcbiAgICAgKiB7a2V5OiAndmFsdWUnfSBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheXxPYmplY3R9IGtleSBIZWFkZXIga2V5IG9yIGEgbGlzdCBvZiBrZXkgdmFsdWUgcGFpcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgSGVhZGVyIHZhbHVlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjdXJyZW50IG5vZGVcbiAgICAgKi9cbiAgICBhZGRIZWFkZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICAvLyBBbGxvdyBzZXR0aW5nIG11bHRpcGxlIGhlYWRlcnMgYXQgb25jZVxuICAgICAgICBpZiAoIXZhbHVlICYmIGtleSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gYWxsb3cge2tleTonY29udGVudC10eXBlJywgdmFsdWU6ICd0ZXh0L3BsYWluJ31cbiAgICAgICAgICAgIGlmIChrZXkua2V5ICYmIGtleS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkSGVhZGVyKGtleS5rZXksIGtleS52YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IFt7a2V5Oidjb250ZW50LXR5cGUnLCB2YWx1ZTogJ3RleHQvcGxhaW4nfV1cbiAgICAgICAgICAgICAgICBrZXkuZm9yRWFjaChpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRIZWFkZXIoaS5rZXksIGkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhbGxvdyB7J2NvbnRlbnQtdHlwZSc6ICd0ZXh0L3BsYWluJ31cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhrZXkpLmZvckVhY2goaSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkSGVhZGVyKGksIGtleVtpXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCh2YWwgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkSGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oZWFkZXJzLnB1c2goe1xuICAgICAgICAgICAga2V5OiB0aGlzLl9ub3JtYWxpemVIZWFkZXJLZXkoa2V5KSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZmlyc3QgbWF0aGNpbmcgdmFsdWUgb2YgYSBzZWxlY3RlZCBrZXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5IHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcmV0dW4ge1N0cmluZ30gVmFsdWUgZm9yIHRoZSBrZXlcbiAgICAgKi9cbiAgICBnZXRIZWFkZXIoa2V5KSB7XG4gICAgICAgIGtleSA9IHRoaXMuX25vcm1hbGl6ZUhlYWRlcktleShrZXkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5faGVhZGVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hlYWRlcnNbaV0ua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGVhZGVyc1tpXS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYm9keSBjb250ZW50IGZvciBjdXJyZW50IG5vZGUuIElmIHRoZSB2YWx1ZSBpcyBhIHN0cmluZywgY2hhcnNldCBpcyBhZGRlZCBhdXRvbWF0aWNhbGx5XG4gICAgICogdG8gQ29udGVudC1UeXBlIChpZiBpdCBpcyB0ZXh0LyopLiBJZiB0aGUgdmFsdWUgaXMgYSBCdWZmZXIsIHlvdSBuZWVkIHRvIHNwZWNpZnlcbiAgICAgKiB0aGUgY2hhcnNldCB5b3Vyc2VsZlxuICAgICAqXG4gICAgICogQHBhcmFtIChTdHJpbmd8QnVmZmVyKSBjb250ZW50IEJvZHkgY29udGVudFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gY3VycmVudCBub2RlXG4gICAgICovXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250ZW50LnBpcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIHByZS1zdHJlYW0gaGFuZGxlci4gbWlnaHQgYmUgdHJpZ2dlcmVkIGlmIGEgc3RyZWFtIGlzIHNldCBhcyBjb250ZW50XG4gICAgICAgICAgICAvLyBhbmQgJ2Vycm9yJyBmaXJlcyBiZWZvcmUgYW55dGhpbmcgaXMgZG9uZSB3aXRoIHRoaXMgc3RyZWFtXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50RXJyb3JIYW5kbGVyID0gZXJyID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fY29udGVudEVycm9ySGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gZXJyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5vbmNlKCdlcnJvcicsIHRoaXMuX2NvbnRlbnRFcnJvckhhbmRsZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1BsYWluVGV4dCA9IG1pbWVGdW5jcy5pc1BsYWluVGV4dCh0aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUGxhaW5UZXh0ICYmIG1pbWVGdW5jcy5oYXNMb25nZXJMaW5lcyh0aGlzLmNvbnRlbnQsIDc2KSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBsaW5lcyBsb25nZXIgdGhhbiA3NiBzeW1ib2xzL2J5dGVzIGRvIG5vdCB1c2UgN2JpdFxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0xvbmdMaW5lcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYnVpbGQoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHByb21pc2U7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHNoYXJlZC5jYWxsYmFja1Byb21pc2UocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0cmVhbSA9IHRoaXMuY3JlYXRlUmVhZFN0cmVhbSgpO1xuICAgICAgICBsZXQgYnVmID0gW107XG4gICAgICAgIGxldCBidWZsZW4gPSAwO1xuICAgICAgICBsZXQgcmV0dXJuZWQgPSBmYWxzZTtcblxuICAgICAgICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNodW5rO1xuXG4gICAgICAgICAgICB3aGlsZSAoKGNodW5rID0gc3RyZWFtLnJlYWQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBidWYucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgYnVmbGVuICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RyZWFtLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgIGlmIChyZXR1cm5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybmVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0cmVhbS5vbmNlKCdlbmQnLCBjaHVuayA9PiB7XG4gICAgICAgICAgICBpZiAocmV0dXJuZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm5lZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBidWYucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgYnVmbGVuICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBCdWZmZXIuY29uY2F0KGJ1ZiwgYnVmbGVuKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGdldFRyYW5zZmVyRW5jb2RpbmcoKSB7XG4gICAgICAgIGxldCB0cmFuc2ZlckVuY29kaW5nID0gZmFsc2U7XG4gICAgICAgIGxldCBjb250ZW50VHlwZSA9ICh0aGlzLmdldEhlYWRlcignQ29udGVudC1UeXBlJykgfHwgJycpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS50cmltKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdHJhbnNmZXJFbmNvZGluZyA9ICh0aGlzLmdldEhlYWRlcignQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZycpIHx8ICcnKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKCF0cmFuc2ZlckVuY29kaW5nIHx8ICFbJ2Jhc2U2NCcsICdxdW90ZWQtcHJpbnRhYmxlJ10uaW5jbHVkZXModHJhbnNmZXJFbmNvZGluZykpIHtcbiAgICAgICAgICAgICAgICBpZiAoL150ZXh0XFwvL2kudGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHNwZWNpYWwgc3ltYm9scywgbm8gbmVlZCB0byBtb2RpZnkgdGhlIHRleHRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzUGxhaW5UZXh0ICYmICF0aGlzLl9oYXNMb25nTGluZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyRW5jb2RpbmcgPSAnN2JpdCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuY29udGVudCA9PT0gJ3N0cmluZycgfHwgdGhpcy5jb250ZW50IGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZXRlY3QgcHJlZmVycmVkIGVuY29kaW5nIGZvciBzdHJpbmcgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyRW5jb2RpbmcgPSB0aGlzLl9nZXRUZXh0RW5jb2RpbmcodGhpcy5jb250ZW50KSA9PT0gJ1EnID8gJ3F1b3RlZC1wcmludGFibGUnIDogJ2Jhc2U2NCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gbm90IGNoZWNrIGNvbnRlbnQgZm9yIGEgc3RyZWFtLCBzbyBlaXRoZXIgdXNlIHByZWZlcnJlZCBlbmNvZGluZyBvciBmYWxsYmFjayB0byBRUFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJFbmNvZGluZyA9IHRoaXMudGV4dEVuY29kaW5nID09PSAnQicgPyAnYmFzZTY0JyA6ICdxdW90ZWQtcHJpbnRhYmxlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIS9eKG11bHRpcGFydHxtZXNzYWdlKVxcLy9pLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyRW5jb2RpbmcgPSB0cmFuc2ZlckVuY29kaW5nIHx8ICdiYXNlNjQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNmZXJFbmNvZGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgdGhlIGhlYWRlciBibG9jayBmb3IgdGhlIG1pbWUgbm9kZS4gQXBwZW5kIFxcclxcblxcclxcbiBiZWZvcmUgd3JpdGluZyB0aGUgY29udGVudFxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gSGVhZGVyc1xuICAgICAqL1xuICAgIGJ1aWxkSGVhZGVycygpIHtcbiAgICAgICAgbGV0IHRyYW5zZmVyRW5jb2RpbmcgPSB0aGlzLmdldFRyYW5zZmVyRW5jb2RpbmcoKTtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBbXTtcblxuICAgICAgICBpZiAodHJhbnNmZXJFbmNvZGluZykge1xuICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHJhbnNmZXItRW5jb2RpbmcnLCB0cmFuc2ZlckVuY29kaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbGVuYW1lICYmICF0aGlzLmdldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicpKSB7XG4gICAgICAgICAgICB0aGlzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbnN1cmUgbWFuZGF0b3J5IGhlYWRlciBmaWVsZHNcbiAgICAgICAgaWYgKHRoaXMucm9vdE5vZGUgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5nZXRIZWFkZXIoJ0RhdGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVyKCdEYXRlJywgdGhpcy5kYXRlLnRvVVRDU3RyaW5nKCkucmVwbGFjZSgvR01ULywgJyswMDAwJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBlbnN1cmUgdGhhdCBNZXNzYWdlLUlkIGlzIHByZXNlbnRcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUlkKCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5nZXRIZWFkZXIoJ01JTUUtVmVyc2lvbicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXIoJ01JTUUtVmVyc2lvbicsICcxLjAnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgQ29udGVudC1UeXBlIGlzIHRoZSBsYXN0IGhlYWRlciBmb3IgdGhlIHJvb3Qgbm9kZVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2hlYWRlcnMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBsZXQgaGVhZGVyID0gdGhpcy5faGVhZGVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyLmtleSA9PT0gJ0NvbnRlbnQtVHlwZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnMucHVzaChoZWFkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4ge1xuICAgICAgICAgICAgbGV0IGtleSA9IGhlYWRlci5rZXk7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBoZWFkZXIudmFsdWU7XG4gICAgICAgICAgICBsZXQgc3RydWN0dXJlZDtcbiAgICAgICAgICAgIGxldCBwYXJhbTtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0ge307XG4gICAgICAgICAgICBsZXQgZm9ybWF0dGVkSGVhZGVycyA9IFsnRnJvbScsICdTZW5kZXInLCAnVG8nLCAnQ2MnLCAnQmNjJywgJ1JlcGx5LVRvJywgJ0RhdGUnLCAnUmVmZXJlbmNlcyddO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhZm9ybWF0dGVkSGVhZGVycy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlLnZhbHVlIHx8ICcnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmICghdmFsdWUudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnByZXBhcmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gaGVhZGVyIHZhbHVlIGlzXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9sZExpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMucHVzaChtaW1lRnVuY3MuZm9sZExpbmVzKGtleSArICc6ICcgKyB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoaGVhZGVyLmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVkID0gbWltZUZ1bmNzLnBhcnNlSGVhZGVyVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlZC5wYXJhbXMuZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbWltZUZ1bmNzLmJ1aWxkSGVhZGVyVmFsdWUoc3RydWN0dXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnQ29udGVudC1UeXBlJzpcbiAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlZCA9IG1pbWVGdW5jcy5wYXJzZUhlYWRlclZhbHVlKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVDb250ZW50VHlwZShzdHJ1Y3R1cmVkKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RydWN0dXJlZC52YWx1ZS5tYXRjaCgvXnRleHRcXC9wbGFpblxcYi8pICYmIHR5cGVvZiB0aGlzLmNvbnRlbnQgPT09ICdzdHJpbmcnICYmIC9bXFx1MDA4MC1cXHVGRkZGXS8udGVzdCh0aGlzLmNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVkLnBhcmFtcy5jaGFyc2V0ID0gJ3V0Zi04JztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbWltZUZ1bmNzLmJ1aWxkSGVhZGVyVmFsdWUoc3RydWN0dXJlZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBzdXBwb3J0IGZvciBub24tY29tcGxpYW50IGNsaWVudHMgbGlrZSBRUSB3ZWJtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCBidWlsZCB0aGUgdmFsdWUgd2l0aCBidWlsZEhlYWRlclZhbHVlIGFzIHRoZSB2YWx1ZSBpcyBub24gc3RhbmRhcmQgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3b3VsZCBiZSBjb252ZXJ0ZWQgdG8gcGFyYW1ldGVyIGNvbnRpbnVhdGlvbiBlbmNvZGluZyB0aGF0IHdlIGRvIG5vdCB3YW50XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSA9IHRoaXMuX2VuY29kZVdvcmRzKHRoaXMuZmlsZW5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW0gIT09IHRoaXMuZmlsZW5hbWUgfHwgL1tcXHMnXCJcXFxcOzovPSgpLDw+QFtcXF0/XXxeLS8udGVzdChwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmNsdWRlIHZhbHVlIGluIHF1b3RlcyBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSA9ICdcIicgKyBwYXJhbSArICdcIic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSAnOyBuYW1lPScgKyBwYXJhbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ0JjYyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5rZWVwQmNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBza2lwIEJDQyB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9lbmNvZGVIZWFkZXJWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgICAgICAgICAgLy8gc2tpcCBlbXB0eSBsaW5lc1xuICAgICAgICAgICAgaWYgKCEodmFsdWUgfHwgJycpLnRvU3RyaW5nKCkudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubm9ybWFsaXplSGVhZGVyS2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZWQgPSB0aGlzLm5vcm1hbGl6ZUhlYWRlcktleShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZCAmJiB0eXBlb2Ygbm9ybWFsaXplZCA9PT0gJ3N0cmluZycgJiYgbm9ybWFsaXplZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gbm9ybWFsaXplZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhlYWRlcnMucHVzaChtaW1lRnVuY3MuZm9sZExpbmVzKGtleSArICc6ICcgKyB2YWx1ZSwgNzYpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGhlYWRlcnMuam9pbignXFxyXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyZWFtcyB0aGUgcmZjMjgyMiBtZXNzYWdlIGZyb20gdGhlIGN1cnJlbnQgbm9kZS4gSWYgdGhpcyBpcyBhIHJvb3Qgbm9kZSxcbiAgICAgKiBtYW5kYXRvcnkgaGVhZGVyIGZpZWxkcyBhcmUgc2V0IGlmIG1pc3NpbmcgKERhdGUsIE1lc3NhZ2UtSWQsIE1JTUUtVmVyc2lvbilcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gQ29tcGlsZWQgbWVzc2FnZVxuICAgICAqL1xuICAgIGNyZWF0ZVJlYWRTdHJlYW0ob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBsZXQgc3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuICAgICAgICBsZXQgb3V0cHV0U3RyZWFtID0gc3RyZWFtO1xuICAgICAgICBsZXQgdHJhbnNmb3JtO1xuXG4gICAgICAgIHRoaXMuc3RyZWFtKHN0cmVhbSwgb3B0aW9ucywgZXJyID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRTdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmVhbS5lbmQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX3RyYW5zZm9ybXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IHR5cGVvZiB0aGlzLl90cmFuc2Zvcm1zW2ldID09PSAnZnVuY3Rpb24nID8gdGhpcy5fdHJhbnNmb3Jtc1tpXSgpIDogdGhpcy5fdHJhbnNmb3Jtc1tpXTtcbiAgICAgICAgICAgIG91dHB1dFN0cmVhbS5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3V0cHV0U3RyZWFtID0gb3V0cHV0U3RyZWFtLnBpcGUodHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuc3VyZSB0ZXJtaW5hdGluZyBuZXdsaW5lIGFmdGVyIHBvc3NpYmxlIHVzZXIgdHJhbnNmb3Jtc1xuICAgICAgICB0cmFuc2Zvcm0gPSBuZXcgTGFzdE5ld2xpbmUoKTtcbiAgICAgICAgb3V0cHV0U3RyZWFtLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgIHRyYW5zZm9ybS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICBvdXRwdXRTdHJlYW0gPSBvdXRwdXRTdHJlYW0ucGlwZSh0cmFuc2Zvcm0pO1xuXG4gICAgICAgIC8vIGRraW0gYW5kIHN0dWZmXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9wcm9jZXNzRnVuY3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuX3Byb2Nlc3NGdW5jc1tpXTtcbiAgICAgICAgICAgIG91dHB1dFN0cmVhbSA9IHRyYW5zZm9ybShvdXRwdXRTdHJlYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubmV3bGluZSkge1xuICAgICAgICAgICAgY29uc3Qgd2luYnJlYWsgPSBbJ3dpbicsICd3aW5kb3dzJywgJ2RvcycsICdcXHJcXG4nXS5pbmNsdWRlcyh0aGlzLm5ld2xpbmUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld2xpbmVUcmFuc2Zvcm0gPSB3aW5icmVhayA/IG5ldyBMZVdpbmRvd3MoKSA6IG5ldyBMZVVuaXgoKTtcblxuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gb3V0cHV0U3RyZWFtLnBpcGUobmV3bGluZVRyYW5zZm9ybSk7XG4gICAgICAgICAgICBvdXRwdXRTdHJlYW0ub24oJ2Vycm9yJywgZXJyID0+IHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycikpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXRTdHJlYW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBhIHRyYW5zZm9ybSBzdHJlYW0gb2JqZWN0IHRvIHRoZSB0cmFuc2Zvcm1zIGxpc3QuIEZpbmFsIG91dHB1dFxuICAgICAqIGlzIHBhc3NlZCB0aHJvdWdoIHRoaXMgc3RyZWFtIGJlZm9yZSBleHBvc2luZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBSZWFkLVdyaXRlIHN0cmVhbVxuICAgICAqL1xuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3Jtcy5wdXNoKHRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBhIHBvc3QgcHJvY2VzcyBmdW5jdGlvbi4gVGhlIGZ1bmN0b24gaXMgcnVuIGFmdGVyIHRyYW5zZm9ybXMgYW5kXG4gICAgICogdXNlcyB0aGUgZm9sbG93aW5nIHN5bnRheFxuICAgICAqXG4gICAgICogICBwcm9jZXNzRnVuYyhpbnB1dCkgLT4gb3V0cHV0U3RyZWFtXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvY2Vzc0Z1bmMgUmVhZC1Xcml0ZSBzdHJlYW1cbiAgICAgKi9cbiAgICBwcm9jZXNzRnVuYyhwcm9jZXNzRnVuYykge1xuICAgICAgICB0aGlzLl9wcm9jZXNzRnVuY3MucHVzaChwcm9jZXNzRnVuYyk7XG4gICAgfVxuXG4gICAgc3RyZWFtKG91dHB1dFN0cmVhbSwgb3B0aW9ucywgZG9uZSkge1xuICAgICAgICBsZXQgdHJhbnNmZXJFbmNvZGluZyA9IHRoaXMuZ2V0VHJhbnNmZXJFbmNvZGluZygpO1xuICAgICAgICBsZXQgY29udGVudFN0cmVhbTtcbiAgICAgICAgbGV0IGxvY2FsU3RyZWFtO1xuXG4gICAgICAgIC8vIHByb3RlY3QgYWN0dWFsIGNhbGxiYWNrIGFnYWluc3QgbXVsdGlwbGUgdHJpZ2dlcmluZ1xuICAgICAgICBsZXQgcmV0dXJuZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGNhbGxiYWNrID0gZXJyID0+IHtcbiAgICAgICAgICAgIGlmIChyZXR1cm5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvbmUoZXJyKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmb3IgbXVsdGlwYXJ0IG5vZGVzLCBwdXNoIGNoaWxkIG5vZGVzXG4gICAgICAgIC8vIGZvciBjb250ZW50IG5vZGVzIGVuZCB0aGUgc3RyZWFtXG4gICAgICAgIGxldCBmaW5hbGl6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjaGlsZElkID0gMDtcbiAgICAgICAgICAgIGxldCBwcm9jZXNzQ2hpbGROb2RlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZElkID49IHRoaXMuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0U3RyZWFtLndyaXRlKCdcXHJcXG4tLScgKyB0aGlzLmJvdW5kYXJ5ICsgJy0tXFxyXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkTm9kZXNbY2hpbGRJZCsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRTdHJlYW0ud3JpdGUoKGNoaWxkSWQgPiAxID8gJ1xcclxcbicgOiAnJykgKyAnLS0nICsgdGhpcy5ib3VuZGFyeSArICdcXHJcXG4nKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5zdHJlYW0ob3V0cHV0U3RyZWFtLCBvcHRpb25zLCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUocHJvY2Vzc0NoaWxkTm9kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5tdWx0aXBhcnQpIHtcbiAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUocHJvY2Vzc0NoaWxkTm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1c2hlcyBub2RlIGNvbnRlbnRcbiAgICAgICAgbGV0IHNlbmRDb250ZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5jb250ZW50KSA9PT0gJ1tvYmplY3QgRXJyb3JdJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb250ZW50IGlzIGFscmVhZHkgZXJyb3JlZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5jb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udGVudC5waXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9jb250ZW50RXJyb3JIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGVudEVycm9ySGFuZGxlciA9IGVyciA9PiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQub25jZSgnZXJyb3InLCB0aGlzLl9jb250ZW50RXJyb3JIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgY3JlYXRlU3RyZWFtID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoWydxdW90ZWQtcHJpbnRhYmxlJywgJ2Jhc2U2NCddLmluY2x1ZGVzKHRyYW5zZmVyRW5jb2RpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtID0gbmV3ICh0cmFuc2ZlckVuY29kaW5nID09PSAnYmFzZTY0JyA/IGJhc2U2NCA6IHFwKS5FbmNvZGVyKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtLnBpcGUob3V0cHV0U3RyZWFtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtLm9uY2UoJ2VuZCcsIGZpbmFsaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRTdHJlYW0ub25jZSgnZXJyb3InLCBlcnIgPT4gY2FsbGJhY2soZXJyKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RyZWFtID0gdGhpcy5fZ2V0U3RyZWFtKHRoaXMuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0cmVhbS5waXBlKGNvbnRlbnRTdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55dGhpbmcgdGhhdCBpcyBub3QgUVAgb3IgQmFzZTU0IHBhc3NlcyBhcy1pc1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdHJlYW0gPSB0aGlzLl9nZXRTdHJlYW0odGhpcy5jb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RyZWFtLnBpcGUob3V0cHV0U3RyZWFtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0cmVhbS5vbmNlKCdlbmQnLCBmaW5hbGl6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0cmVhbS5vbmNlKCdlcnJvcicsIGVyciA9PiBjYWxsYmFjayhlcnIpKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudC5fcmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2h1bmtzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaHVua2xlbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXR1cm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc291cmNlU3RyZWFtID0gdGhpcy5fZ2V0U3RyZWFtKHRoaXMuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVN0cmVhbS5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVybmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVN0cmVhbS5vbigncmVhZGFibGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2h1bms7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGNodW5rID0gc291cmNlU3RyZWFtLnJlYWQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gY2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlU3RyZWFtLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuX3Jlc29sdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5fcmVzb2x2ZWRWYWx1ZSA9IEJ1ZmZlci5jb25jYXQoY2h1bmtzLCBjaHVua2xlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUoY3JlYXRlU3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGNyZWF0ZVN0cmVhbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZShmaW5hbGl6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuX3Jhdykge1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMuX3JhdykgPT09ICdbb2JqZWN0IEVycm9yXScpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGVudCBpcyBhbHJlYWR5IGVycm9yZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuX3Jhdyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGRlZmF1bHQgZXJyb3IgaGFuZGxlciAoaWYgc2V0KVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fcmF3LnBpcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmF3LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHRoaXMuX2NvbnRlbnRFcnJvckhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCByYXcgPSB0aGlzLl9nZXRTdHJlYW0odGhpcy5fcmF3KTtcbiAgICAgICAgICAgICAgICByYXcucGlwZShvdXRwdXRTdHJlYW0sIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJhdy5vbignZXJyb3InLCBlcnIgPT4gb3V0cHV0U3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKSk7XG4gICAgICAgICAgICAgICAgcmF3Lm9uKCdlbmQnLCBmaW5hbGl6ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dFN0cmVhbS53cml0ZSh0aGlzLmJ1aWxkSGVhZGVycygpICsgJ1xcclxcblxcclxcbicpO1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHNlbmRDb250ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgZW52ZWxvcGUgdG8gYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBnZW5lcmF0ZWQgb25lXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFNNVFAgZW52ZWxvcGUgaW4gdGhlIGZvcm0gb2Yge2Zyb206ICdmcm9tQGV4YW1wbGUuY29tJywgdG86IFsndG9AZXhhbXBsZS5jb20nXX1cbiAgICAgKi9cbiAgICBzZXRFbnZlbG9wZShlbnZlbG9wZSkge1xuICAgICAgICBsZXQgbGlzdDtcblxuICAgICAgICB0aGlzLl9lbnZlbG9wZSA9IHtcbiAgICAgICAgICAgIGZyb206IGZhbHNlLFxuICAgICAgICAgICAgdG86IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGVudmVsb3BlLmZyb20pIHtcbiAgICAgICAgICAgIGxpc3QgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRBZGRyZXNzZXModGhpcy5fcGFyc2VBZGRyZXNzZXMoZW52ZWxvcGUuZnJvbSksIGxpc3QpO1xuICAgICAgICAgICAgbGlzdCA9IGxpc3QuZmlsdGVyKGFkZHJlc3MgPT4gYWRkcmVzcyAmJiBhZGRyZXNzLmFkZHJlc3MpO1xuICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoICYmIGxpc3RbMF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbnZlbG9wZS5mcm9tID0gbGlzdFswXS5hZGRyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFsndG8nLCAnY2MnLCAnYmNjJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudmVsb3BlW2tleV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb252ZXJ0QWRkcmVzc2VzKHRoaXMuX3BhcnNlQWRkcmVzc2VzKGVudmVsb3BlW2tleV0pLCB0aGlzLl9lbnZlbG9wZS50byk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2VudmVsb3BlLnRvID0gdGhpcy5fZW52ZWxvcGUudG8ubWFwKHRvID0+IHRvLmFkZHJlc3MpLmZpbHRlcihhZGRyZXNzID0+IGFkZHJlc3MpO1xuXG4gICAgICAgIGxldCBzdGFuZGFyZEZpZWxkcyA9IFsndG8nLCAnY2MnLCAnYmNjJywgJ2Zyb20nXTtcbiAgICAgICAgT2JqZWN0LmtleXMoZW52ZWxvcGUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmICghc3RhbmRhcmRGaWVsZHMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VudmVsb3BlW2tleV0gPSBlbnZlbG9wZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgYW4gb2JqZWN0IHdpdGggcGFyc2VkIGFkZHJlc3MgZmllbGRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFkZHJlc3Mgb2JqZWN0XG4gICAgICovXG4gICAgZ2V0QWRkcmVzc2VzKCkge1xuICAgICAgICBsZXQgYWRkcmVzc2VzID0ge307XG5cbiAgICAgICAgdGhpcy5faGVhZGVycy5mb3JFYWNoKGhlYWRlciA9PiB7XG4gICAgICAgICAgICBsZXQga2V5ID0gaGVhZGVyLmtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKFsnZnJvbScsICdzZW5kZXInLCAncmVwbHktdG8nLCAndG8nLCAnY2MnLCAnYmNjJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhZGRyZXNzZXNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2VzW2tleV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jb252ZXJ0QWRkcmVzc2VzKHRoaXMuX3BhcnNlQWRkcmVzc2VzKGhlYWRlci52YWx1ZSksIGFkZHJlc3Nlc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGFkZHJlc3NlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgU01UUCBlbnZlbG9wZSB3aXRoIHRoZSBzZW5kZXIgYWRkcmVzcyBhbmQgYSBsaXN0IG9mIHJlY2lwaWVudHMgYWRkcmVzc2VzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFNNVFAgZW52ZWxvcGUgaW4gdGhlIGZvcm0gb2Yge2Zyb206ICdmcm9tQGV4YW1wbGUuY29tJywgdG86IFsndG9AZXhhbXBsZS5jb20nXX1cbiAgICAgKi9cbiAgICBnZXRFbnZlbG9wZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VudmVsb3BlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW52ZWxvcGU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZW52ZWxvcGUgPSB7XG4gICAgICAgICAgICBmcm9tOiBmYWxzZSxcbiAgICAgICAgICAgIHRvOiBbXVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9oZWFkZXJzLmZvckVhY2goaGVhZGVyID0+IHtcbiAgICAgICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgICAgICBpZiAoaGVhZGVyLmtleSA9PT0gJ0Zyb20nIHx8ICghZW52ZWxvcGUuZnJvbSAmJiBbJ1JlcGx5LVRvJywgJ1NlbmRlciddLmluY2x1ZGVzKGhlYWRlci5rZXkpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRBZGRyZXNzZXModGhpcy5fcGFyc2VBZGRyZXNzZXMoaGVhZGVyLnZhbHVlKSwgbGlzdCk7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoICYmIGxpc3RbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUuZnJvbSA9IGxpc3RbMF0uYWRkcmVzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFsnVG8nLCAnQ2MnLCAnQmNjJ10uaW5jbHVkZXMoaGVhZGVyLmtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb252ZXJ0QWRkcmVzc2VzKHRoaXMuX3BhcnNlQWRkcmVzc2VzKGhlYWRlci52YWx1ZSksIGVudmVsb3BlLnRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW52ZWxvcGUudG8gPSBlbnZlbG9wZS50by5tYXAodG8gPT4gdG8uYWRkcmVzcyk7XG5cbiAgICAgICAgcmV0dXJuIGVudmVsb3BlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgTWVzc2FnZS1JZCB2YWx1ZS4gSWYgaXQgZG9lcyBub3QgZXhpc3QsIHRoZW4gY3JlYXRlcyBvbmVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gTWVzc2FnZS1JZCB2YWx1ZVxuICAgICAqL1xuICAgIG1lc3NhZ2VJZCgpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2VJZCA9IHRoaXMuZ2V0SGVhZGVyKCdNZXNzYWdlLUlEJyk7XG4gICAgICAgIC8vIFlvdSByZWFsbHkgc2hvdWxkIGRlZmluZSB5b3VyIG93biBNZXNzYWdlLUlkIGZpZWxkIVxuICAgICAgICBpZiAoIW1lc3NhZ2VJZCkge1xuICAgICAgICAgICAgbWVzc2FnZUlkID0gdGhpcy5fZ2VuZXJhdGVNZXNzYWdlSWQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVyKCdNZXNzYWdlLUlEJywgbWVzc2FnZUlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZUlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgcHJlZ2VuZXJhdGVkIGNvbnRlbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIG91dHB1dCBvZiB0aGlzIG5vZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEJ1ZmZlcnxTdHJlYW19IFJhdyBNSU1FIGNvbnRlbnRzXG4gICAgICovXG4gICAgc2V0UmF3KHJhdykge1xuICAgICAgICB0aGlzLl9yYXcgPSByYXc7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JhdyAmJiB0eXBlb2YgdGhpcy5fcmF3LnBpcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIHByZS1zdHJlYW0gaGFuZGxlci4gbWlnaHQgYmUgdHJpZ2dlcmVkIGlmIGEgc3RyZWFtIGlzIHNldCBhcyBjb250ZW50XG4gICAgICAgICAgICAvLyBhbmQgJ2Vycm9yJyBmaXJlcyBiZWZvcmUgYW55dGhpbmcgaXMgZG9uZSB3aXRoIHRoaXMgc3RyZWFtXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50RXJyb3JIYW5kbGVyID0gZXJyID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yYXcucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fY29udGVudEVycm9ySGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmF3ID0gZXJyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3Jhdy5vbmNlKCdlcnJvcicsIHRoaXMuX2NvbnRlbnRFcnJvckhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8vLy8vLyBQUklWQVRFIE1FVEhPRFNcblxuICAgIC8qKlxuICAgICAqIERldGVjdHMgYW5kIHJldHVybnMgaGFuZGxlIHRvIGEgc3RyZWFtIHJlbGF0ZWQgd2l0aCB0aGUgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRlbnQgTm9kZSBjb250ZW50XG4gICAgICogQHJldHVybnMge09iamVjdH0gU3RyZWFtIG9iamVjdFxuICAgICAqL1xuICAgIF9nZXRTdHJlYW0oY29udGVudCkge1xuICAgICAgICBsZXQgY29udGVudFN0cmVhbTtcblxuICAgICAgICBpZiAoY29udGVudC5fcmVzb2x2ZWRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gcGFzcyBzdHJpbmcgb3IgYnVmZmVyIGNvbnRlbnQgYXMgYSBzdHJlYW1cbiAgICAgICAgICAgIGNvbnRlbnRTdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTtcblxuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtLmVuZChjb250ZW50Ll9yZXNvbHZlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjb250ZW50U3RyZWFtO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50LnBpcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIGFzc3VtZSBhcyBzdHJlYW1cbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQgJiYgdHlwZW9mIGNvbnRlbnQucGF0aCA9PT0gJ3N0cmluZycgJiYgIWNvbnRlbnQuaHJlZikge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZUZpbGVBY2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IGNvbnRlbnRTdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0ZpbGUgYWNjZXNzIHJlamVjdGVkIGZvciAnICsgY29udGVudC5wYXRoKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50U3RyZWFtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVhZCBmaWxlXG4gICAgICAgICAgICByZXR1cm4gZnMuY3JlYXRlUmVhZFN0cmVhbShjb250ZW50LnBhdGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQgJiYgdHlwZW9mIGNvbnRlbnQuaHJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVVcmxBY2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IGNvbnRlbnRTdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1VybCBhY2Nlc3MgcmVqZWN0ZWQgZm9yICcgKyBjb250ZW50LmhyZWYpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRTdHJlYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmZXRjaCBVUkxcbiAgICAgICAgICAgIHJldHVybiBubWZldGNoKGNvbnRlbnQuaHJlZiwgeyBoZWFkZXJzOiBjb250ZW50Lmh0dHBIZWFkZXJzIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBzdHJpbmcgb3IgYnVmZmVyIGNvbnRlbnQgYXMgYSBzdHJlYW1cbiAgICAgICAgICAgIGNvbnRlbnRTdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTtcblxuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50U3RyZWFtLmVuZChjb250ZW50IHx8ICcnKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudFN0cmVhbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhZGRyZXNzZXMuIFRha2VzIGluIGEgc2luZ2xlIGFkZHJlc3Mgb3IgYW4gYXJyYXkgb3IgYW5cbiAgICAgKiBhcnJheSBvZiBhZGRyZXNzIGFycmF5cyAoZWcuIFRvOiBbW2ZpcnN0IGdyb3VwXSwgW3NlY29uZCBncm91cF0sLi4uXSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGFkZHJlc3NlcyBBZGRyZXNzZXMgdG8gYmUgcGFyc2VkXG4gICAgICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIGFkZHJlc3Mgb2JqZWN0c1xuICAgICAqL1xuICAgIF9wYXJzZUFkZHJlc3NlcyhhZGRyZXNzZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShcbiAgICAgICAgICAgIFtdLFxuICAgICAgICAgICAgW10uY29uY2F0KGFkZHJlc3NlcykubWFwKGFkZHJlc3MgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzICYmIGFkZHJlc3MuYWRkcmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmFkZHJlc3MgPSB0aGlzLl9ub3JtYWxpemVBZGRyZXNzKGFkZHJlc3MuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MubmFtZSA9IGFkZHJlc3MubmFtZSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFthZGRyZXNzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3NwYXJzZXIoYWRkcmVzcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZXMgYSBoZWFkZXIga2V5LCB1c2VzIENhbWVsLUNhc2UgZm9ybSwgZXhjZXB0IGZvciB1cHBlcmNhc2UgTUlNRS1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5IHRvIGJlIG5vcm1hbGl6ZWRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGtleSBpbiBDYW1lbC1DYXNlIGZvcm1cbiAgICAgKi9cbiAgICBfbm9ybWFsaXplSGVhZGVyS2V5KGtleSkge1xuICAgICAgICBrZXkgPSAoa2V5IHx8ICcnKVxuICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgIC8vIG5vIG5ld2xpbmVzIGluIGtleXNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpXG4gICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgLy8gdXNlIHVwcGVyY2FzZSB3b3JkcywgZXhjZXB0IE1JTUVcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eWC1TTVRQQVBJJHxeKE1JTUV8REtJTXxBUkN8QklNSSlcXGJ8XlthLXpdfC0oU1BGfEZCTHxJRHxNRDUpJHwtW2Etel0vZ2ksIGMgPT4gYy50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlXG4gICAgICAgICAgICAucmVwbGFjZSgvXkNvbnRlbnQtRmVhdHVyZXMkL2ksICdDb250ZW50LWZlYXR1cmVzJyk7XG5cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbnRlbnQgdHlwZSBpcyBtdWx0aXBhcnQgYW5kIGRlZmluZXMgYm91bmRhcnkgaWYgbmVlZGVkLlxuICAgICAqIERvZXNuJ3QgcmV0dXJuIGFueXRoaW5nLCBtb2RpZmllcyBvYmplY3QgYXJndW1lbnQgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHJ1Y3R1cmVkIFBhcnNlZCBoZWFkZXIgdmFsdWUgZm9yICdDb250ZW50LVR5cGUnIGtleVxuICAgICAqL1xuICAgIF9oYW5kbGVDb250ZW50VHlwZShzdHJ1Y3R1cmVkKSB7XG4gICAgICAgIHRoaXMuY29udGVudFR5cGUgPSBzdHJ1Y3R1cmVkLnZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHRoaXMubXVsdGlwYXJ0ID0gL15tdWx0aXBhcnRcXC8vaS50ZXN0KHRoaXMuY29udGVudFR5cGUpID8gdGhpcy5jb250ZW50VHlwZS5zdWJzdHIodGhpcy5jb250ZW50VHlwZS5pbmRleE9mKCcvJykgKyAxKSA6IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLm11bHRpcGFydCkge1xuICAgICAgICAgICAgdGhpcy5ib3VuZGFyeSA9IHN0cnVjdHVyZWQucGFyYW1zLmJvdW5kYXJ5ID0gc3RydWN0dXJlZC5wYXJhbXMuYm91bmRhcnkgfHwgdGhpcy5ib3VuZGFyeSB8fCB0aGlzLl9nZW5lcmF0ZUJvdW5kYXJ5KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kYXJ5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBtdWx0aXBhcnQgYm91bmRhcnkgdmFsdWVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gYm91bmRhcnkgdmFsdWVcbiAgICAgKi9cbiAgICBfZ2VuZXJhdGVCb3VuZGFyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdE5vZGUuYm91bmRhcnlQcmVmaXggKyAnLScgKyB0aGlzLnJvb3ROb2RlLmJhc2VCb3VuZGFyeSArICctUGFydF8nICsgdGhpcy5fbm9kZUlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgYSBoZWFkZXIgdmFsdWUgZm9yIHVzZSBpbiB0aGUgZ2VuZXJhdGVkIHJmYzI4MjIgZW1haWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IEhlYWRlciBrZXlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgSGVhZGVyIHZhbHVlXG4gICAgICovXG4gICAgX2VuY29kZUhlYWRlclZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAga2V5ID0gdGhpcy5fbm9ybWFsaXplSGVhZGVyS2V5KGtleSk7XG5cbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIC8vIFN0cnVjdHVyZWQgaGVhZGVyc1xuICAgICAgICAgICAgY2FzZSAnRnJvbSc6XG4gICAgICAgICAgICBjYXNlICdTZW5kZXInOlxuICAgICAgICAgICAgY2FzZSAnVG8nOlxuICAgICAgICAgICAgY2FzZSAnQ2MnOlxuICAgICAgICAgICAgY2FzZSAnQmNjJzpcbiAgICAgICAgICAgIGNhc2UgJ1JlcGx5LVRvJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udmVydEFkZHJlc3Nlcyh0aGlzLl9wYXJzZUFkZHJlc3Nlcyh2YWx1ZSkpO1xuXG4gICAgICAgICAgICAvLyB2YWx1ZXMgZW5jbG9zZWQgaW4gPD5cbiAgICAgICAgICAgIGNhc2UgJ01lc3NhZ2UtSUQnOlxuICAgICAgICAgICAgY2FzZSAnSW4tUmVwbHktVG8nOlxuICAgICAgICAgICAgY2FzZSAnQ29udGVudC1JZCc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgfHwgJycpLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxyP1xcbnxcXHIvZywgJyAnKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoMCkgIT09ICc8Jykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICc8JyArIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgIT09ICc+Jykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgJz4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgICAgIC8vIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIHZhbHVlcyBlbmNsb3NlZCBpbiA8PlxuICAgICAgICAgICAgY2FzZSAnUmVmZXJlbmNlcyc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBbXS5jb25jYXRcbiAgICAgICAgICAgICAgICAgICAgLmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXS5jb25jYXQodmFsdWUgfHwgJycpLm1hcChlbG0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsbSA9IChlbG0gfHwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsbS5yZXBsYWNlKC88W14+XSo+L2csIHN0ciA9PiBzdHIucmVwbGFjZSgvXFxzL2csICcnKSkuc3BsaXQoL1xccysvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlbG0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsbS5jaGFyQXQoMCkgIT09ICc8Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsbSA9ICc8JyArIGVsbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbG0uY2hhckF0KGVsbS5sZW5ndGggLSAxKSAhPT0gJz4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtID0gZWxtICsgJz4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsbTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuam9pbignICcpLnRyaW0oKTtcblxuICAgICAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9VVENTdHJpbmcoKS5yZXBsYWNlKC9HTVQvLCAnKzAwMDAnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8fCAnJykudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmNvZGVXb3Jkcyh2YWx1ZSk7XG5cbiAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnQtVHlwZSc6XG4gICAgICAgICAgICBjYXNlICdDb250ZW50LURpc3Bvc2l0aW9uJzpcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBpbmNsdWRlcyBhIGZpbGVuYW1lIHRoZW4gaXQgaXMgYWxyZWFkeSBlbmNvZGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSB8fCAnJykudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIHx8ICcnKS50b1N0cmluZygpLnJlcGxhY2UoL1xccj9cXG58XFxyL2csICcgJyk7XG4gICAgICAgICAgICAgICAgLy8gZW5jb2RlV29yZHMgb25seSBlbmNvZGVzIGlmIG5lZWRlZCwgb3RoZXJ3aXNlIHRoZSBvcmlnaW5hbCBzdHJpbmcgaXMgcmV0dXJuZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5jb2RlV29yZHModmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVidWlsZHMgYWRkcmVzcyBvYmplY3QgdXNpbmcgcHVueWNvZGUgYW5kIG90aGVyIGFkanVzdG1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzcyBvYmplY3RzXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3VuaXF1ZUxpc3RdIEFuIGFycmF5IHRvIGJlIHBvcHVsYXRlZCB3aXRoIGFkZHJlc3Nlc1xuICAgICAqIEByZXR1cm4ge1N0cmluZ30gYWRkcmVzcyBzdHJpbmdcbiAgICAgKi9cbiAgICBfY29udmVydEFkZHJlc3NlcyhhZGRyZXNzZXMsIHVuaXF1ZUxpc3QpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xuXG4gICAgICAgIHVuaXF1ZUxpc3QgPSB1bmlxdWVMaXN0IHx8IFtdO1xuXG4gICAgICAgIFtdLmNvbmNhdChhZGRyZXNzZXMgfHwgW10pLmZvckVhY2goYWRkcmVzcyA9PiB7XG4gICAgICAgICAgICBpZiAoYWRkcmVzcy5hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzcy5hZGRyZXNzID0gdGhpcy5fbm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzLmFkZHJlc3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFhZGRyZXNzLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goYWRkcmVzcy5hZGRyZXNzLmluZGV4T2YoJyAnKSA+PSAwID8gYDwke2FkZHJlc3MuYWRkcmVzc30+YCA6IGAke2FkZHJlc3MuYWRkcmVzc31gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFkZHJlc3MubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChgJHt0aGlzLl9lbmNvZGVBZGRyZXNzTmFtZShhZGRyZXNzLm5hbWUpfSA8JHthZGRyZXNzLmFkZHJlc3N9PmApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1bmlxdWVMaXN0LmZpbHRlcihhID0+IGEuYWRkcmVzcyA9PT0gYWRkcmVzcy5hZGRyZXNzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZUxpc3QucHVzaChhZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkcmVzcy5ncm91cCkge1xuICAgICAgICAgICAgICAgIGxldCBncm91cExpc3RBZGRyZXNzZXMgPSAoYWRkcmVzcy5ncm91cC5sZW5ndGggPyB0aGlzLl9jb252ZXJ0QWRkcmVzc2VzKGFkZHJlc3MuZ3JvdXAsIHVuaXF1ZUxpc3QpIDogJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChgJHt0aGlzLl9lbmNvZGVBZGRyZXNzTmFtZShhZGRyZXNzLm5hbWUpfToke2dyb3VwTGlzdEFkZHJlc3Nlc307YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZXMuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemVzIGFuIGVtYWlsIGFkZHJlc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFkZHJlc3MgQW4gYXJyYXkgb2YgYWRkcmVzcyBvYmplY3RzXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBhZGRyZXNzIHN0cmluZ1xuICAgICAqL1xuICAgIF9ub3JtYWxpemVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAgICAgYWRkcmVzcyA9IChhZGRyZXNzIHx8ICcnKVxuICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MUY8Pl0rL2csICcgJykgLy8gcmVtb3ZlIHVuYWxsb3dlZCBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAudHJpbSgpO1xuXG4gICAgICAgIGxldCBsYXN0QXQgPSBhZGRyZXNzLmxhc3RJbmRleE9mKCdAJyk7XG4gICAgICAgIGlmIChsYXN0QXQgPCAwKSB7XG4gICAgICAgICAgICAvLyBCYXJlIHVzZXJuYW1lXG4gICAgICAgICAgICByZXR1cm4gYWRkcmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1c2VyID0gYWRkcmVzcy5zdWJzdHIoMCwgbGFzdEF0KTtcbiAgICAgICAgbGV0IGRvbWFpbiA9IGFkZHJlc3Muc3Vic3RyKGxhc3RBdCArIDEpO1xuXG4gICAgICAgIC8vIFVzZXJuYW1lcyBhcmUgbm90IHRvdWNoZWQgYW5kIGFyZSBrZXB0IGFzIGlzIGV2ZW4gaWYgdGhlc2UgaW5jbHVkZSB1bmljb2RlXG4gICAgICAgIC8vIERvbWFpbnMgYXJlIHB1bnljb2RlZCBieSBkZWZhdWx0XG4gICAgICAgIC8vICdqw7VnZXZhLmVlJyB3aWxsIGJlIGNvbnZlcnRlZCB0byAneG4tLWpnZXZhLWR1YS5lZSdcbiAgICAgICAgLy8gbm9uLXVuaWNvZGUgZG9tYWlucyBhcmUgbGVmdCBhcyBpc1xuXG4gICAgICAgIGxldCBlbmNvZGVkRG9tYWluO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbmNvZGVkRG9tYWluID0gcHVueWNvZGUudG9BU0NJSShkb21haW4udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8ga2VlcCBhcyBpcz9cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VyLmluZGV4T2YoJyAnKSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAodXNlci5jaGFyQXQoMCkgIT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICB1c2VyID0gJ1wiJyArIHVzZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXNlci5zdWJzdHIoLTEpICE9PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgdXNlciA9IHVzZXIgKyAnXCInO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGAke3VzZXJ9QCR7ZW5jb2RlZERvbWFpbn1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIG5lZWRlZCwgbWltZSBlbmNvZGVzIHRoZSBuYW1lIHBhcnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgcGFydCBvZiBhbiBhZGRyZXNzXG4gICAgICogQHJldHVybnMge1N0cmluZ30gTWltZSB3b3JkIGVuY29kZWQgc3RyaW5nIGlmIG5lZWRlZFxuICAgICAqL1xuICAgIF9lbmNvZGVBZGRyZXNzTmFtZShuYW1lKSB7XG4gICAgICAgIGlmICghL15bXFx3IF0qJC8udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgaWYgKC9eW1xceDIwLVxceDdlXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdcIicgKyBuYW1lLnJlcGxhY2UoLyhbXFxcXFwiXSkvZywgJ1xcXFwkMScpICsgJ1wiJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pbWVGdW5jcy5lbmNvZGVXb3JkKG5hbWUsIHRoaXMuX2dldFRleHRFbmNvZGluZyhuYW1lKSwgNTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIG5lZWRlZCwgbWltZSBlbmNvZGVzIHRoZSBuYW1lIHBhcnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgcGFydCBvZiBhbiBhZGRyZXNzXG4gICAgICogQHJldHVybnMge1N0cmluZ30gTWltZSB3b3JkIGVuY29kZWQgc3RyaW5nIGlmIG5lZWRlZFxuICAgICAqL1xuICAgIF9lbmNvZGVXb3Jkcyh2YWx1ZSkge1xuICAgICAgICAvLyBzZXQgZW5jb2RlQWxsIHBhcmFtZXRlciB0byB0cnVlIGV2ZW4gdGhvdWdoIGl0IGlzIGFnYWluc3QgdGhlIHJlY29tbWVuZGF0aW9uIG9mIFJGQzIwNDcsXG4gICAgICAgIC8vIGJ5IGRlZmF1bHQgb25seSB3b3JkcyB0aGF0IGluY2x1ZGUgbm9uLWFzY2lpIHNob3VsZCBiZSBjb252ZXJ0ZWQgaW50byBlbmNvZGVkIHdvcmRzXG4gICAgICAgIC8vIGJ1dCBzb21lIGNsaWVudHMgKGVnLiBaaW1icmEpIGRvIG5vdCBoYW5kbGUgaXQgcHJvcGVybHkgYW5kIHJlbW92ZSBzdXJyb3VuZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgIHJldHVybiBtaW1lRnVuY3MuZW5jb2RlV29yZHModmFsdWUsIHRoaXMuX2dldFRleHRFbmNvZGluZyh2YWx1ZSksIDUyLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3RzIGJlc3QgbWltZSBlbmNvZGluZyBmb3IgYSB0ZXh0IHZhbHVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVmFsdWUgdG8gY2hlY2sgZm9yXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBlaXRoZXIgJ1EnIG9yICdCJ1xuICAgICAqL1xuICAgIF9nZXRUZXh0RW5jb2RpbmcodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfHwgJycpLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgbGV0IGVuY29kaW5nID0gdGhpcy50ZXh0RW5jb2Rpbmc7XG4gICAgICAgIGxldCBsYXRpbkxlbjtcbiAgICAgICAgbGV0IG5vbkxhdGluTGVuO1xuXG4gICAgICAgIGlmICghZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIC8vIGNvdW50IGxhdGluIGFscGhhYmV0IHN5bWJvbHMgYW5kIDgtYml0IHJhbmdlIHN5bWJvbHMgKyBjb250cm9sIHN5bWJvbHNcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBtb3JlIGxhdGluIGNoYXJhY3RlcnMsIHRoZW4gdXNlIHF1b3RlZC1wcmludGFibGVcbiAgICAgICAgICAgIC8vIGVuY29kaW5nLCBvdGhlcndpc2UgdXNlIGJhc2U2NFxuICAgICAgICAgICAgbm9uTGF0aW5MZW4gPSAodmFsdWUubWF0Y2goL1tcXHgwMC1cXHgwOFxceDBCXFx4MENcXHgwRS1cXHgxRlxcdTAwODAtXFx1RkZGRl0vZykgfHwgW10pLmxlbmd0aDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgICAgICAgICBsYXRpbkxlbiA9ICh2YWx1ZS5tYXRjaCgvW2Etel0vZ2kpIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgbW9yZSBsYXRpbiBzeW1ib2xzIHRoYW4gYmluYXJ5L3VuaWNvZGUsIHRoZW4gcHJlZmVyIFEsIG90aGVyd2lzZSBCXG4gICAgICAgICAgICBlbmNvZGluZyA9IG5vbkxhdGluTGVuIDwgbGF0aW5MZW4gPyAnUScgOiAnQic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIG1lc3NhZ2UgaWRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUmFuZG9tIE1lc3NhZ2UtSUQgdmFsdWVcbiAgICAgKi9cbiAgICBfZ2VuZXJhdGVNZXNzYWdlSWQoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnPCcgK1xuICAgICAgICAgICAgWzIsIDIsIDIsIDZdLnJlZHVjZShcbiAgICAgICAgICAgICAgICAvLyBjcnV4IHRvIGdlbmVyYXRlIFVVSUQtbGlrZSByYW5kb20gc3RyaW5nc1xuICAgICAgICAgICAgICAgIChwcmV2LCBsZW4pID0+IHByZXYgKyAnLScgKyBjcnlwdG8ucmFuZG9tQnl0ZXMobGVuKS50b1N0cmluZygnaGV4JyksXG4gICAgICAgICAgICAgICAgY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnRvU3RyaW5nKCdoZXgnKVxuICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAnQCcgK1xuICAgICAgICAgICAgLy8gdHJ5IHRvIHVzZSB0aGUgZG9tYWluIG9mIHRoZSBGUk9NIGFkZHJlc3Mgb3IgZmFsbGJhY2sgdG8gc2VydmVyIGhvc3RuYW1lXG4gICAgICAgICAgICAodGhpcy5nZXRFbnZlbG9wZSgpLmZyb20gfHwgdGhpcy5ob3N0bmFtZSB8fCAnbG9jYWxob3N0Jykuc3BsaXQoJ0AnKS5wb3AoKSArXG4gICAgICAgICAgICAnPidcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWltZU5vZGU7XG4iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiTnVtYmVyIiwiY3J5cHRvIiwicmVxdWlyZSIsImZzIiwicHVueWNvZGUiLCJQYXNzVGhyb3VnaCIsInNoYXJlZCIsIm1pbWVGdW5jcyIsInFwIiwiYmFzZTY0IiwiYWRkcmVzc3BhcnNlciIsIm5tZmV0Y2giLCJMYXN0TmV3bGluZSIsIkxlV2luZG93cyIsIkxlVW5peCIsIk1pbWVOb2RlIiwiY29udGVudFR5cGUiLCJvcHRpb25zIiwibm9kZUNvdW50ZXIiLCJiYXNlQm91bmRhcnkiLCJyYW5kb21CeXRlcyIsInRvU3RyaW5nIiwiYm91bmRhcnlQcmVmaXgiLCJkaXNhYmxlRmlsZUFjY2VzcyIsImRpc2FibGVVcmxBY2Nlc3MiLCJub3JtYWxpemVIZWFkZXJLZXkiLCJkYXRlIiwiRGF0ZSIsInJvb3ROb2RlIiwia2VlcEJjYyIsImZpbGVuYW1lIiwiZGV0ZWN0TWltZVR5cGUiLCJzcGxpdCIsInBvcCIsInRleHRFbmNvZGluZyIsInRyaW0iLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInBhcmVudE5vZGUiLCJob3N0bmFtZSIsIm5ld2xpbmUiLCJjaGlsZE5vZGVzIiwiX25vZGVJZCIsIl9oZWFkZXJzIiwiX2lzUGxhaW5UZXh0IiwiX2hhc0xvbmdMaW5lcyIsIl9lbnZlbG9wZSIsIl9yYXciLCJfdHJhbnNmb3JtcyIsIl9wcm9jZXNzRnVuY3MiLCJzZXRIZWFkZXIiLCJ2YWx1ZSIsImNyZWF0ZUNoaWxkIiwibm9kZSIsImFwcGVuZENoaWxkIiwiY2hpbGROb2RlIiwicHVzaCIsInJlcGxhY2UiLCJfdGhpcyIsImZvckVhY2giLCJyZW1vdmUiLCJzcGxpY2UiLCJfdGhpczIiLCJhZGRlZCIsImhlYWRlclZhbHVlIiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5cyIsIl9ub3JtYWxpemVIZWFkZXJLZXkiLCJsZW4iLCJhZGRIZWFkZXIiLCJfdGhpczMiLCJ2YWwiLCJnZXRIZWFkZXIiLCJzZXRDb250ZW50IiwiY29udGVudCIsIl90aGlzNCIsInBpcGUiLCJfY29udGVudEVycm9ySGFuZGxlciIsImVyciIsInJlbW92ZUxpc3RlbmVyIiwib25jZSIsImlzUGxhaW5UZXh0IiwiaGFzTG9uZ2VyTGluZXMiLCJidWlsZCIsImNhbGxiYWNrIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbGJhY2tQcm9taXNlIiwic3RyZWFtIiwiY3JlYXRlUmVhZFN0cmVhbSIsImJ1ZiIsImJ1ZmxlbiIsInJldHVybmVkIiwib24iLCJjaHVuayIsInJlYWQiLCJCdWZmZXIiLCJjb25jYXQiLCJnZXRUcmFuc2ZlckVuY29kaW5nIiwidHJhbnNmZXJFbmNvZGluZyIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJ0ZXN0IiwiX2dldFRleHRFbmNvZGluZyIsImJ1aWxkSGVhZGVycyIsIl90aGlzNSIsImhlYWRlcnMiLCJ0b1VUQ1N0cmluZyIsIm1lc3NhZ2VJZCIsImhlYWRlciIsInN0cnVjdHVyZWQiLCJwYXJhbSIsImZvcm1hdHRlZEhlYWRlcnMiLCJwcmVwYXJlZCIsImZvbGRMaW5lcyIsInBhcnNlSGVhZGVyVmFsdWUiLCJwYXJhbXMiLCJidWlsZEhlYWRlclZhbHVlIiwiX2hhbmRsZUNvbnRlbnRUeXBlIiwibWF0Y2giLCJjaGFyc2V0IiwiX2VuY29kZVdvcmRzIiwiX2VuY29kZUhlYWRlclZhbHVlIiwibm9ybWFsaXplZCIsImpvaW4iLCJvdXRwdXRTdHJlYW0iLCJ0cmFuc2Zvcm0iLCJlbWl0IiwiZW5kIiwid2luYnJlYWsiLCJuZXdsaW5lVHJhbnNmb3JtIiwicHJvY2Vzc0Z1bmMiLCJkb25lIiwiX3RoaXM2IiwiY29udGVudFN0cmVhbSIsImxvY2FsU3RyZWFtIiwiZmluYWxpemUiLCJjaGlsZElkIiwicHJvY2Vzc0NoaWxkTm9kZSIsIndyaXRlIiwiYm91bmRhcnkiLCJjaGlsZCIsInNldEltbWVkaWF0ZSIsIm11bHRpcGFydCIsInNlbmRDb250ZW50IiwiY3JlYXRlU3RyZWFtIiwiRW5jb2RlciIsIl9nZXRTdHJlYW0iLCJfcmVzb2x2ZSIsImNodW5rcyIsImNodW5rbGVuIiwic291cmNlU3RyZWFtIiwiX3Jlc29sdmVkVmFsdWUiLCJyYXciLCJzZXRFbnZlbG9wZSIsImVudmVsb3BlIiwiX3RoaXM3IiwibGlzdCIsImZyb20iLCJ0byIsIl9jb252ZXJ0QWRkcmVzc2VzIiwiX3BhcnNlQWRkcmVzc2VzIiwiZmlsdGVyIiwiYWRkcmVzcyIsIm1hcCIsInN0YW5kYXJkRmllbGRzIiwiZ2V0QWRkcmVzc2VzIiwiX3RoaXM4IiwiYWRkcmVzc2VzIiwiZ2V0RW52ZWxvcGUiLCJfdGhpczkiLCJfZ2VuZXJhdGVNZXNzYWdlSWQiLCJzZXRSYXciLCJfdGhpczEwIiwicGF0aCIsImhyZWYiLCJFcnJvciIsImh0dHBIZWFkZXJzIiwiX3RoaXMxMSIsImFwcGx5IiwiX25vcm1hbGl6ZUFkZHJlc3MiLCJuYW1lIiwiYyIsInN1YnN0ciIsImluZGV4T2YiLCJfZ2VuZXJhdGVCb3VuZGFyeSIsImVsbSIsInN0ciIsInVuaXF1ZUxpc3QiLCJfdGhpczEyIiwidmFsdWVzIiwiX2VuY29kZUFkZHJlc3NOYW1lIiwiYSIsImdyb3VwIiwiZ3JvdXBMaXN0QWRkcmVzc2VzIiwibGFzdEF0IiwibGFzdEluZGV4T2YiLCJ1c2VyIiwiZG9tYWluIiwiZW5jb2RlZERvbWFpbiIsInRvQVNDSUkiLCJlbmNvZGVXb3JkIiwiZW5jb2RlV29yZHMiLCJlbmNvZGluZyIsImxhdGluTGVuIiwibm9uTGF0aW5MZW4iLCJyZWR1Y2UiLCJwcmV2IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/last-newline.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nvar LastNewline = /*#__PURE__*/function (_Transform) {\n  function LastNewline() {\n    var _this2;\n    _classCallCheck(this, LastNewline);\n    _this2 = _callSuper(this, LastNewline);\n    _this2.lastByte = false;\n    return _this2;\n  }\n  _inherits(LastNewline, _Transform);\n  return _createClass(LastNewline, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      if (chunk.length) {\n        this.lastByte = chunk[chunk.length - 1];\n      }\n      this.push(chunk);\n      done();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(done) {\n      if (this.lastByte === 0x0a) {\n        return done();\n      }\n      if (this.lastByte === 0x0d) {\n        this.push(Buffer.from('\\n'));\n        return done();\n      }\n      this.push(Buffer.from('\\r\\n'));\n      return done();\n    }\n  }]);\n}(Transform);\nmodule.exports = LastNewline;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xhc3QtbmV3bGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFBQSxTQUFBQSxRQUFBQyxDQUFBLHNDQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxrQkFBQUEsQ0FBQSxnQkFBQUEsQ0FBQSxXQUFBQSxDQUFBLHlCQUFBQyxNQUFBLElBQUFELENBQUEsQ0FBQUcsV0FBQSxLQUFBRixNQUFBLElBQUFELENBQUEsS0FBQUMsTUFBQSxDQUFBRyxTQUFBLHFCQUFBSixDQUFBLEtBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUFBLFNBQUFLLGdCQUFBQyxRQUFBLEVBQUFDLFdBQUEsVUFBQUQsUUFBQSxZQUFBQyxXQUFBLGVBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQUMsTUFBQSxFQUFBQyxLQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxLQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxVQUFBLEdBQUFILEtBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxVQUFBLENBQUFDLFVBQUEsR0FBQUQsVUFBQSxDQUFBQyxVQUFBLFdBQUFELFVBQUEsQ0FBQUUsWUFBQSx3QkFBQUYsVUFBQSxFQUFBQSxVQUFBLENBQUFHLFFBQUEsU0FBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFULE1BQUEsRUFBQVUsY0FBQSxDQUFBTixVQUFBLENBQUFPLEdBQUEsR0FBQVAsVUFBQTtBQUFBLFNBQUFRLGFBQUFmLFdBQUEsRUFBQWdCLFVBQUEsRUFBQUMsV0FBQSxRQUFBRCxVQUFBLEVBQUFkLGlCQUFBLENBQUFGLFdBQUEsQ0FBQUgsU0FBQSxFQUFBbUIsVUFBQSxPQUFBQyxXQUFBLEVBQUFmLGlCQUFBLENBQUFGLFdBQUEsRUFBQWlCLFdBQUEsR0FBQU4sTUFBQSxDQUFBQyxjQUFBLENBQUFaLFdBQUEsaUJBQUFVLFFBQUEsbUJBQUFWLFdBQUE7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QSxFQXpCcUJULFNBQVM7QUE0Qm5DYyxNQUFNLENBQUNDLE9BQU8sR0FBR2IsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZHZpZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtbm9kZS9sYXN0LW5ld2xpbmUuanM/YTM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybTtcblxuY2xhc3MgTGFzdE5ld2xpbmUgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxhc3RCeXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgaWYgKGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0Qnl0ZSA9IGNodW5rW2NodW5rLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH1cblxuICAgIF9mbHVzaChkb25lKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBhKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmZyb20oJ1xcbicpKTtcbiAgICAgICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5mcm9tKCdcXHJcXG4nKSk7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExhc3ROZXdsaW5lO1xuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIk51bWJlciIsIl9jYWxsU3VwZXIiLCJfdGhpcyIsImRlcml2ZWQiLCJhcmdzIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiYXBwbHkiLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ2YWx1ZSIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJUcmFuc2Zvcm0iLCJyZXF1aXJlIiwiTGFzdE5ld2xpbmUiLCJfVHJhbnNmb3JtIiwiX3RoaXMyIiwibGFzdEJ5dGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImRvbmUiLCJwdXNoIiwiX2ZsdXNoIiwiQnVmZmVyIiwiZnJvbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-unix.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar Transform = stream.Transform;\n\n/**\n * Ensures that only <LF> is used for linebreaks\n *\n * @param {Object} options Stream options\n */\nvar LeWindows = /*#__PURE__*/function (_Transform) {\n  function LeWindows(options) {\n    var _this2;\n    _classCallCheck(this, LeWindows);\n    _this2 = _callSuper(this, LeWindows, [options]);\n    // init Transform\n    _this2.options = options || {};\n    return _this2;\n  }\n\n  /**\n   * Escapes dots\n   */\n  _inherits(LeWindows, _Transform);\n  return _createClass(LeWindows, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      var buf;\n      var lastPos = 0;\n      for (var i = 0, len = chunk.length; i < len; i++) {\n        if (chunk[i] === 0x0d) {\n          // \\n\n          buf = chunk.slice(lastPos, i);\n          lastPos = i + 1;\n          this.push(buf);\n        }\n      }\n      if (lastPos && lastPos < chunk.length) {\n        buf = chunk.slice(lastPos);\n        this.push(buf);\n      } else if (!lastPos) {\n        this.push(chunk);\n      }\n      done();\n    }\n  }]);\n}(Transform);\nmodule.exports = LeWindows;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXVuaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQUEsU0FBQUEsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxLQUFBRCxPQUFBLENBQUFDLENBQUE7QUFBQSxTQUFBSyxnQkFBQUMsUUFBQSxFQUFBQyxXQUFBLFVBQUFELFFBQUEsWUFBQUMsV0FBQSxlQUFBQyxTQUFBO0FBQUEsU0FBQUMsa0JBQUFDLE1BQUEsRUFBQUMsS0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsS0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsVUFBQSxHQUFBSCxLQUFBLENBQUFDLENBQUEsR0FBQUUsVUFBQSxDQUFBQyxVQUFBLEdBQUFELFVBQUEsQ0FBQUMsVUFBQSxXQUFBRCxVQUFBLENBQUFFLFlBQUEsd0JBQUFGLFVBQUEsRUFBQUEsVUFBQSxDQUFBRyxRQUFBLFNBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBVCxNQUFBLEVBQUFVLGNBQUEsQ0FBQU4sVUFBQSxDQUFBTyxHQUFBLEdBQUFQLFVBQUE7QUFBQSxTQUFBUSxhQUFBZixXQUFBLEVBQUFnQixVQUFBLEVBQUFDLFdBQUEsUUFBQUQsVUFBQSxFQUFBZCxpQkFBQSxDQUFBRixXQUFBLENBQUFILFNBQUEsRUFBQW1CLFVBQUEsT0FBQUMsV0FBQSxFQUFBZixpQkFBQSxDQUFBRixXQUFBLEVBQUFpQixXQUFBLEdBQUFOLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWixXQUFBLGlCQUFBVSxRQUFBLG1CQUFBVixXQUFBO0FBQUEs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RCxHQUFHLEdBQUdILEtBQUssQ0FBQ00sS0FBSyxDQUFDRixPQUFPLENBQUM7UUFDMUIsSUFBSSxDQUFDRyxJQUFJLENBQUNKLEdBQUcsQ0FBQztNQUNsQixDQUFDLE1BQU0sSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDakIsSUFBSSxDQUFDRyxJQUFJLENBQUNQLEtBQUssQ0FBQztNQUNwQjtNQUNBRSxJQUFJLENBQUMsQ0FBQztJQUNWO0VBQUM7QUFBQSxFQTdCbUJSLFNBQVM7QUFnQ2pDYyxNQUFNLENBQUNDLE9BQU8sR0FBR2QsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZHZpZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtbm9kZS9sZS11bml4LmpzPzlhMGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IFRyYW5zZm9ybSA9IHN0cmVhbS5UcmFuc2Zvcm07XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IG9ubHkgPExGPiBpcyB1c2VkIGZvciBsaW5lYnJlYWtzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3RyZWFtIG9wdGlvbnNcbiAqL1xuY2xhc3MgTGVXaW5kb3dzIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICAvLyBpbml0IFRyYW5zZm9ybVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgZG90c1xuICAgICAqL1xuICAgIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBkb25lKSB7XG4gICAgICAgIGxldCBidWY7XG4gICAgICAgIGxldCBsYXN0UG9zID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaHVua1tpXSA9PT0gMHgwZCkge1xuICAgICAgICAgICAgICAgIC8vIFxcblxuICAgICAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MsIGkpO1xuICAgICAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdFBvcyAmJiBsYXN0UG9zIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zKTtcbiAgICAgICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICB9IGVsc2UgaWYgKCFsYXN0UG9zKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIGRvbmUoKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGVXaW5kb3dzO1xuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIk51bWJlciIsIl9jYWxsU3VwZXIiLCJfdGhpcyIsImRlcml2ZWQiLCJhcmdzIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiYXBwbHkiLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ2YWx1ZSIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJzdHJlYW0iLCJyZXF1aXJlIiwiVHJhbnNmb3JtIiwiTGVXaW5kb3dzIiwiX1RyYW5zZm9ybSIsIm9wdGlvbnMiLCJfdGhpczIiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImRvbmUiLCJidWYiLCJsYXN0UG9zIiwibGVuIiwic2xpY2UiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-windows.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar Transform = stream.Transform;\n\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nvar LeWindows = /*#__PURE__*/function (_Transform) {\n  function LeWindows(options) {\n    var _this2;\n    _classCallCheck(this, LeWindows);\n    _this2 = _callSuper(this, LeWindows, [options]);\n    // init Transform\n    _this2.options = options || {};\n    _this2.lastByte = false;\n    return _this2;\n  }\n\n  /**\n   * Escapes dots\n   */\n  _inherits(LeWindows, _Transform);\n  return _createClass(LeWindows, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      var buf;\n      var lastPos = 0;\n      for (var i = 0, len = chunk.length; i < len; i++) {\n        if (chunk[i] === 0x0a) {\n          // \\n\n          if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n            if (i > lastPos) {\n              buf = chunk.slice(lastPos, i);\n              this.push(buf);\n            }\n            this.push(Buffer.from('\\r\\n'));\n            lastPos = i + 1;\n          }\n        }\n      }\n      if (lastPos && lastPos < chunk.length) {\n        buf = chunk.slice(lastPos);\n        this.push(buf);\n      } else if (!lastPos) {\n        this.push(chunk);\n      }\n      this.lastByte = chunk[chunk.length - 1];\n      done();\n    }\n  }]);\n}(Transform);\nmodule.exports = LeWindows;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/nodemailer.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/nodemailer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar Mailer = __webpack_require__(/*! ./mailer */ \"(rsc)/./node_modules/nodemailer/lib/mailer/index.js\");\nvar shared = __webpack_require__(/*! ./shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar SMTPPool = __webpack_require__(/*! ./smtp-pool */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\");\nvar SMTPTransport = __webpack_require__(/*! ./smtp-transport */ \"(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\");\nvar SendmailTransport = __webpack_require__(/*! ./sendmail-transport */ \"(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\");\nvar StreamTransport = __webpack_require__(/*! ./stream-transport */ \"(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\");\nvar JSONTransport = __webpack_require__(/*! ./json-transport */ \"(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\");\nvar SESTransport = __webpack_require__(/*! ./ses-transport */ \"(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\");\nvar nmfetch = __webpack_require__(/*! ./fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nvar packageData = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nvar ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nvar ETHEREAL_API_KEY = (process.env.ETHEREAL_API_KEY || '').replace(/\\s*/g, '') || null;\nvar ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\nvar testAccount = false;\nmodule.exports.createTransport = function (transporter, defaults) {\n  var urlConfig;\n  var options;\n  var mailer;\n  if (\n  // provided transporter is a configuration object, not transporter plugin\n  _typeof(transporter) === 'object' && typeof transporter.send !== 'function' ||\n  // provided transporter looks like a connection url\n  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {\n    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {\n      // parse a configuration URL into configuration options\n      options = shared.parseConnectionUrl(urlConfig);\n    } else {\n      options = transporter;\n    }\n    if (options.pool) {\n      transporter = new SMTPPool(options);\n    } else if (options.sendmail) {\n      transporter = new SendmailTransport(options);\n    } else if (options.streamTransport) {\n      transporter = new StreamTransport(options);\n    } else if (options.jsonTransport) {\n      transporter = new JSONTransport(options);\n    } else if (options.SES) {\n      transporter = new SESTransport(options);\n    } else {\n      transporter = new SMTPTransport(options);\n    }\n  }\n  mailer = new Mailer(transporter, options, defaults);\n  return mailer;\n};\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n  var promise;\n  if (!callback && typeof apiUrl === 'function') {\n    callback = apiUrl;\n    apiUrl = false;\n  }\n  if (!callback) {\n    promise = new Promise(function (resolve, reject) {\n      callback = shared.callbackPromise(resolve, reject);\n    });\n  }\n  if (ETHEREAL_CACHE && testAccount) {\n    setImmediate(function () {\n      return callback(null, testAccount);\n    });\n    return promise;\n  }\n  apiUrl = apiUrl || ETHEREAL_API;\n  var chunks = [];\n  var chunklen = 0;\n  var requestHeaders = {};\n  var requestBody = {\n    requestor: packageData.name,\n    version: packageData.version\n  };\n  if (ETHEREAL_API_KEY) {\n    requestHeaders.Authorization = 'Bearer ' + ETHEREAL_API_KEY;\n  }\n  var req = nmfetch(apiUrl + '/user', {\n    contentType: 'application/json',\n    method: 'POST',\n    headers: requestHeaders,\n    body: Buffer.from(JSON.stringify(requestBody))\n  });\n  req.on('readable', function () {\n    var chunk;\n    while ((chunk = req.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  req.once('error', function (err) {\n    return callback(err);\n  });\n  req.once('end', function () {\n    var res = Buffer.concat(chunks, chunklen);\n    var data;\n    var err;\n    try {\n      data = JSON.parse(res.toString());\n    } catch (E) {\n      err = E;\n    }\n    if (err) {\n      return callback(err);\n    }\n    if (data.status !== 'success' || data.error) {\n      return callback(new Error(data.error || 'Request failed'));\n    }\n    delete data.status;\n    testAccount = data;\n    callback(null, testAccount);\n  });\n  return promise;\n};\nmodule.exports.getTestMessageUrl = function (info) {\n  if (!info || !info.response) {\n    return false;\n  }\n  var infoProps = new Map();\n  info.response.replace(/\\[([^\\]]+)\\]$/, function (m, props) {\n    props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, function (m, key, value) {\n      infoProps.set(key, value);\n    });\n  });\n  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n  }\n  return false;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/nodemailer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/punycode/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/nodemailer/lib/punycode/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("/*\n\nCopied from https://github.com/mathiasbynens/punycode.js/blob/ef3505c8abb5143a00d53ce59077c9f7f4b2ac47/punycode.js\n\nCopyright Mathias Bynens <https://mathiasbynens.be/>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n/* eslint callback-return: 0, no-bitwise: 0, eqeqeq: 0, prefer-arrow-callback: 0, object-shorthand: 0 */\n\n\n\n/** Highest positive signed 32-bit float value */\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\nvar delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nvar regexPunycode = /^xn--/;\nvar regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nvar errors = {\n  overflow: 'Overflow: input needs wider integers to process',\n  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n  'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n  throw new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n  var result = [];\n  var length = array.length;\n  while (length--) {\n    result[length] = callback(array[length]);\n  }\n  return result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n  var parts = domain.split('@');\n  var result = '';\n  if (parts.length > 1) {\n    // In email addresses, only the domain name should be punycoded. Leave\n    // the local part (i.e. everything up to `@`) intact.\n    result = parts[0] + '@';\n    domain = parts[1];\n  }\n  // Avoid `split(regex)` for IE8 compatibility. See #17.\n  domain = domain.replace(regexSeparators, '\\x2E');\n  var labels = domain.split('.');\n  var encoded = map(labels, callback).join('.');\n  return result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n  var output = [];\n  var counter = 0;\n  var length = string.length;\n  while (counter < length) {\n    var value = string.charCodeAt(counter++);\n    if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n      // It's a high surrogate, and there is a next character.\n      var extra = string.charCodeAt(counter++);\n      if ((extra & 0xfc00) == 0xdc00) {\n        // Low surrogate.\n        output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n      } else {\n        // It's an unmatched surrogate; only append this code unit, in case the\n        // next code unit is the high surrogate of a surrogate pair.\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n  return output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nvar ucs2encode = function ucs2encode(codePoints) {\n  return String.fromCodePoint.apply(String, _toConsumableArray(codePoints));\n};\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nvar basicToDigit = function basicToDigit(codePoint) {\n  if (codePoint >= 0x30 && codePoint < 0x3a) {\n    return 26 + (codePoint - 0x30);\n  }\n  if (codePoint >= 0x41 && codePoint < 0x5b) {\n    return codePoint - 0x41;\n  }\n  if (codePoint >= 0x61 && codePoint < 0x7b) {\n    return codePoint - 0x61;\n  }\n  return base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nvar digitToBasic = function digitToBasic(digit, flag) {\n  //  0..25 map to ASCII a..z or A..Z\n  // 26..35 map to ASCII 0..9\n  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nvar adapt = function adapt(delta, numPoints, firstTime) {\n  var k = 0;\n  delta = firstTime ? floor(delta / damp) : delta >> 1;\n  delta += floor(delta / numPoints);\n  for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n    delta = floor(delta / baseMinusTMin);\n  }\n  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nvar decode = function decode(input) {\n  // Don't use UCS-2.\n  var output = [];\n  var inputLength = input.length;\n  var i = 0;\n  var n = initialN;\n  var bias = initialBias;\n\n  // Handle the basic code points: let `basic` be the number of input code\n  // points before the last delimiter, or `0` if there is none, then copy\n  // the first basic code points to the output.\n\n  var basic = input.lastIndexOf(delimiter);\n  if (basic < 0) {\n    basic = 0;\n  }\n  for (var j = 0; j < basic; ++j) {\n    // if it's not a basic code point\n    if (input.charCodeAt(j) >= 0x80) {\n      error('not-basic');\n    }\n    output.push(input.charCodeAt(j));\n  }\n\n  // Main decoding loop: start just after the last delimiter if any basic code\n  // points were copied; start at the beginning otherwise.\n\n  for (var index = basic > 0 ? basic + 1 : 0; index < inputLength /* no final expression */;) {\n    // `index` is the index of the next character to be consumed.\n    // Decode a generalized variable-length integer into `delta`,\n    // which gets added to `i`. The overflow checking is easier\n    // if we increase `i` as we go, then subtract off its starting\n    // value at the end to obtain `delta`.\n    var oldi = i;\n    for (var w = 1, k = base /* no condition */;; k += base) {\n      if (index >= inputLength) {\n        error('invalid-input');\n      }\n      var digit = basicToDigit(input.charCodeAt(index++));\n      if (digit >= base) {\n        error('invalid-input');\n      }\n      if (digit > floor((maxInt - i) / w)) {\n        error('overflow');\n      }\n      i += digit * w;\n      var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n      if (digit < t) {\n        break;\n      }\n      var baseMinusT = base - t;\n      if (w > floor(maxInt / baseMinusT)) {\n        error('overflow');\n      }\n      w *= baseMinusT;\n    }\n    var out = output.length + 1;\n    bias = adapt(i - oldi, out, oldi == 0);\n\n    // `i` was supposed to wrap around from `out` to `0`,\n    // incrementing `n` each time, so we'll fix that now:\n    if (floor(i / out) > maxInt - n) {\n      error('overflow');\n    }\n    n += floor(i / out);\n    i %= out;\n\n    // Insert `n` at position `i` of the output.\n    output.splice(i++, 0, n);\n  }\n  return String.fromCodePoint.apply(String, output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nvar encode = function encode(input) {\n  var output = [];\n\n  // Convert the input in UCS-2 to an array of Unicode code points.\n  input = ucs2decode(input);\n\n  // Cache the length.\n  var inputLength = input.length;\n\n  // Initialize the state.\n  var n = initialN;\n  var delta = 0;\n  var bias = initialBias;\n\n  // Handle the basic code points.\n  var _iterator = _createForOfIteratorHelper(input),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _currentValue2 = _step.value;\n      if (_currentValue2 < 0x80) {\n        output.push(stringFromCharCode(_currentValue2));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var basicLength = output.length;\n  var handledCPCount = basicLength;\n\n  // `handledCPCount` is the number of code points that have been handled;\n  // `basicLength` is the number of basic code points.\n\n  // Finish the basic string with a delimiter unless it's empty.\n  if (basicLength) {\n    output.push(delimiter);\n  }\n\n  // Main encoding loop:\n  while (handledCPCount < inputLength) {\n    // All non-basic code points < n have been handled already. Find the next\n    // larger one:\n    var m = maxInt;\n    var _iterator2 = _createForOfIteratorHelper(input),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var currentValue = _step2.value;\n        if (currentValue >= n && currentValue < m) {\n          m = currentValue;\n        }\n      }\n\n      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n      // but guard against overflow.\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var handledCPCountPlusOne = handledCPCount + 1;\n    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n      error('overflow');\n    }\n    delta += (m - n) * handledCPCountPlusOne;\n    n = m;\n    var _iterator3 = _createForOfIteratorHelper(input),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _currentValue = _step3.value;\n        if (_currentValue < n && ++delta > maxInt) {\n          error('overflow');\n        }\n        if (_currentValue === n) {\n          // Represent delta as a generalized variable-length integer.\n          var q = delta;\n          for (var k = base /* no condition */;; k += base) {\n            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n            if (q < t) {\n              break;\n            }\n            var qMinusT = q - t;\n            var baseMinusT = base - t;\n            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n            q = floor(qMinusT / baseMinusT);\n          }\n          output.push(stringFromCharCode(digitToBasic(q, 0)));\n          bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n          delta = 0;\n          ++handledCPCount;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    ++delta;\n    ++n;\n  }\n  return output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nvar toUnicode = function toUnicode(input) {\n  return mapDomain(input, function (string) {\n    return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n  });\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nvar toASCII = function toASCII(input) {\n  return mapDomain(input, function (string) {\n    return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n  });\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nvar punycode = {\n  /**\n   * A string representing the current Punycode.js version number.\n   * @memberOf punycode\n   * @type String\n   */\n  version: '2.3.1',\n  /**\n   * An object of methods to convert from JavaScript's internal character\n   * representation (UCS-2) to Unicode code points, and back.\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode\n   * @type Object\n   */\n  ucs2: {\n    decode: ucs2decode,\n    encode: ucs2encode\n  },\n  decode: decode,\n  encode: encode,\n  toASCII: toASCII,\n  toUnicode: toUnicode\n};\nmodule.exports = punycode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/punycode/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/qp/index.js":
/*!*************************************************!*\
  !*** ./node_modules/nodemailer/lib/qp/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer, 'utf-8');\n  }\n\n  // usable characters that do not need encoding\n  var ranges = [\n  // https://tools.ietf.org/html/rfc2045#section-6.7\n  [0x09],\n  // <TAB>\n  [0x0a],\n  // <LF>\n  [0x0d],\n  // <CR>\n  [0x20, 0x3c],\n  // <SP>!\"#$%&'()*+,-./0123456789:;\n  [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n  ];\n\n  var result = '';\n  var ord;\n  for (var i = 0, len = buffer.length; i < len; i++) {\n    ord = buffer[i];\n    // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n    if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n      result += String.fromCharCode(ord);\n      continue;\n    }\n    result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();\n  }\n  return result;\n}\n\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n  if (str.length <= lineLength) {\n    return str;\n  }\n  var pos = 0;\n  var len = str.length;\n  var match, code, line;\n  var lineMargin = Math.floor(lineLength / 3);\n  var result = '';\n\n  // insert soft linebreaks where needed\n  while (pos < len) {\n    line = str.substr(pos, lineLength);\n    if (match = line.match(/\\r\\n/)) {\n      line = line.substr(0, match.index + match[0].length);\n      result += line;\n      pos += line.length;\n      continue;\n    }\n    if (line.substr(-1) === '\\n') {\n      // nothing to change here\n      result += line;\n      pos += line.length;\n      continue;\n    } else if (match = line.substr(-lineMargin).match(/\\n.*?$/)) {\n      // truncate to nearest line break\n      line = line.substr(0, line.length - (match[0].length - 1));\n      result += line;\n      pos += line.length;\n      continue;\n    } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n      // truncate to nearest space\n      line = line.substr(0, line.length - (match[0].length - 1));\n    } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n      // push incomplete encoding sequences to the next line\n      if (match = line.match(/[=][\\da-f]{0,1}$/i)) {\n        line = line.substr(0, line.length - match[0].length);\n      }\n\n      // ensure that utf-8 sequences are not split\n      while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))) {\n        code = parseInt(match[0].substr(1, 2), 16);\n        if (code < 128) {\n          break;\n        }\n        line = line.substr(0, line.length - 3);\n        if (code >= 0xc0) {\n          break;\n        }\n      }\n    }\n    if (pos + line.length < len && line.substr(-1) !== '\\n') {\n      if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n        line = line.substr(0, line.length - 3);\n      } else if (line.length === lineLength) {\n        line = line.substr(0, line.length - 1);\n      }\n      pos += line.length;\n      line += '=\\r\\n';\n    } else {\n      pos += line.length;\n    }\n    result += line;\n  }\n  return result;\n}\n\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */\nfunction checkRanges(nr, ranges) {\n  for (var i = ranges.length - 1; i >= 0; i--) {\n    if (!ranges[i].length) {\n      continue;\n    }\n    if (ranges[i].length === 1 && nr === ranges[i][0]) {\n      return true;\n    }\n    if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nvar Encoder = /*#__PURE__*/function (_Transform) {\n  function Encoder(options) {\n    var _this2;\n    _classCallCheck(this, Encoder);\n    _this2 = _callSuper(this, Encoder);\n\n    // init Transform\n    _this2.options = options || {};\n    if (_this2.options.lineLength !== false) {\n      _this2.options.lineLength = _this2.options.lineLength || 76;\n    }\n    _this2._curLine = '';\n    _this2.inputBytes = 0;\n    _this2.outputBytes = 0;\n    return _this2;\n  }\n  _inherits(Encoder, _Transform);\n  return _createClass(Encoder, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      var _this3 = this;\n      var qp;\n      if (encoding !== 'buffer') {\n        chunk = Buffer.from(chunk, encoding);\n      }\n      if (!chunk || !chunk.length) {\n        return done();\n      }\n      this.inputBytes += chunk.length;\n      if (this.options.lineLength) {\n        qp = this._curLine + encode(chunk);\n        qp = wrap(qp, this.options.lineLength);\n        qp = qp.replace(/(^|\\n)([^\\n]*)$/, function (match, lineBreak, lastLine) {\n          _this3._curLine = lastLine;\n          return lineBreak;\n        });\n        if (qp) {\n          this.outputBytes += qp.length;\n          this.push(qp);\n        }\n      } else {\n        qp = encode(chunk);\n        this.outputBytes += qp.length;\n        this.push(qp, 'ascii');\n      }\n      done();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(done) {\n      if (this._curLine) {\n        this.outputBytes += this._curLine.length;\n        this.push(this._curLine, 'ascii');\n      }\n      done();\n    }\n  }]);\n}(Transform); // expose to the world\nmodule.exports = {\n  encode: encode,\n  wrap: wrap,\n  Encoder: Encoder\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/qp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/sendmail-transport/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\nvar SendmailTransport = /*#__PURE__*/function () {\n  function SendmailTransport(options) {\n    _classCallCheck(this, SendmailTransport);\n    options = options || {};\n\n    // use a reference to spawn for mocking purposes\n    this._spawn = spawn;\n    this.options = options || {};\n    this.name = 'Sendmail';\n    this.version = packageData.version;\n    this.path = 'sendmail';\n    this.args = false;\n    this.winbreak = false;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'sendmail'\n    });\n    if (options) {\n      if (typeof options === 'string') {\n        this.path = options;\n      } else if (_typeof(options) === 'object') {\n        if (options.path) {\n          this.path = options.path;\n        }\n        if (Array.isArray(options.args)) {\n          this.args = options.args;\n        }\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n      }\n    }\n  }\n\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  return _createClass(SendmailTransport, [{\n    key: \"send\",\n    value: function send(mail, done) {\n      var _this = this;\n      // Sendmail strips this header line by itself\n      mail.message.keepBcc = true;\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var args;\n      var sendmail;\n      var returned;\n      var hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some(function (addr) {\n        return /^-/.test(addr);\n      });\n      if (hasInvalidAddresses) {\n        return done(new Error('Can not send mail. Invalid envelope addresses.'));\n      }\n      if (this.args) {\n        // force -i to keep single dots\n        args = ['-i'].concat(this.args).concat(envelope.to);\n      } else {\n        args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n      }\n      var callback = function callback(err) {\n        if (returned) {\n          // ignore any additional responses, already done\n          return;\n        }\n        returned = true;\n        if (typeof done === 'function') {\n          if (err) {\n            return done(err);\n          } else {\n            return done(null, {\n              envelope: mail.data.envelope || mail.message.getEnvelope(),\n              messageId: messageId,\n              response: 'Messages queued for delivery'\n            });\n          }\n        }\n      };\n      try {\n        sendmail = this._spawn(this.path, args);\n      } catch (E) {\n        this.logger.error({\n          err: E,\n          tnx: 'spawn',\n          messageId: messageId\n        }, 'Error occurred while spawning sendmail. %s', E.message);\n        return callback(E);\n      }\n      if (sendmail) {\n        sendmail.on('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'spawn',\n            messageId: messageId\n          }, 'Error occurred when sending message %s. %s', messageId, err.message);\n          callback(err);\n        });\n        sendmail.once('exit', function (code) {\n          if (!code) {\n            return callback();\n          }\n          var err;\n          if (code === 127) {\n            err = new Error('Sendmail command not found, process exited with code ' + code);\n          } else {\n            err = new Error('Sendmail exited with code ' + code);\n          }\n          _this.logger.error({\n            err: err,\n            tnx: 'stdin',\n            messageId: messageId\n          }, 'Error sending message %s to sendmail. %s', messageId, err.message);\n          callback(err);\n        });\n        sendmail.once('close', callback);\n        sendmail.stdin.on('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'stdin',\n            messageId: messageId\n          }, 'Error occurred when piping message %s to sendmail. %s', messageId, err.message);\n          callback(err);\n        });\n        var recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n          recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info({\n          tnx: 'send',\n          messageId: messageId\n        }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n        var sourceStream = mail.message.createReadStream();\n        sourceStream.once('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'stdin',\n            messageId: messageId\n          }, 'Error occurred when generating message %s. %s', messageId, err.message);\n          sendmail.kill('SIGINT'); // do not deliver the message\n          callback(err);\n        });\n        sourceStream.pipe(sendmail.stdin);\n      } else {\n        return callback(new Error('sendmail was not found'));\n      }\n    }\n  }]);\n}();\nmodule.exports = SendmailTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/ses-transport/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar LeWindows = __webpack_require__(/*! ../mime-node/le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nvar SESTransport = /*#__PURE__*/function (_EventEmitter) {\n  function SESTransport(options) {\n    var _this2;\n    _classCallCheck(this, SESTransport);\n    _this2 = _callSuper(this, SESTransport);\n    options = options || {};\n    _this2.options = options || {};\n    _this2.ses = _this2.options.SES;\n    _this2.name = 'SESTransport';\n    _this2.version = packageData.version;\n    _this2.logger = shared.getLogger(_this2.options, {\n      component: _this2.options.component || 'ses-transport'\n    });\n\n    // parallel sending connections\n    _this2.maxConnections = Number(_this2.options.maxConnections) || Infinity;\n    _this2.connections = 0;\n\n    // max messages per second\n    _this2.sendingRate = Number(_this2.options.sendingRate) || Infinity;\n    _this2.sendingRateTTL = null;\n    _this2.rateInterval = 1000; // milliseconds\n    _this2.rateMessages = [];\n    _this2.pending = [];\n    _this2.idling = true;\n    setImmediate(function () {\n      if (_this2.idling) {\n        _this2.emit('idle');\n      }\n    });\n    return _this2;\n  }\n\n  /**\n   * Schedules a sending of a message\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  _inherits(SESTransport, _EventEmitter);\n  return _createClass(SESTransport, [{\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this3 = this;\n      if (this.connections >= this.maxConnections) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n      if (!this._checkSendingRate()) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n      this._send(mail, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        setImmediate(function () {\n          return callback.apply(void 0, args);\n        });\n        _this3._sent();\n      });\n    }\n  }, {\n    key: \"_checkRatedQueue\",\n    value: function _checkRatedQueue() {\n      var _this4 = this;\n      if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n        return;\n      }\n      if (!this.pending.length) {\n        if (!this.idling) {\n          this.idling = true;\n          this.emit('idle');\n        }\n        return;\n      }\n      var next = this.pending.shift();\n      this._send(next.mail, function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        setImmediate(function () {\n          return next.callback.apply(next, args);\n        });\n        _this4._sent();\n      });\n    }\n  }, {\n    key: \"_checkSendingRate\",\n    value: function _checkSendingRate() {\n      var _this5 = this;\n      clearTimeout(this.sendingRateTTL);\n      var now = Date.now();\n      var oldest = false;\n      // delete older messages\n      for (var i = this.rateMessages.length - 1; i >= 0; i--) {\n        if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n          oldest = this.rateMessages[i].ts;\n        }\n        if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n          this.rateMessages.splice(i, 1);\n        }\n      }\n      if (this.rateMessages.length < this.sendingRate) {\n        return true;\n      }\n      var delay = Math.max(oldest + 1001, now + 20);\n      this.sendingRateTTL = setTimeout(function () {\n        return _this5._checkRatedQueue();\n      }, now - delay);\n      try {\n        this.sendingRateTTL.unref();\n      } catch (E) {\n        // Ignore. Happens on envs with non-node timer implementation\n      }\n      return false;\n    }\n  }, {\n    key: \"_sent\",\n    value: function _sent() {\n      this.connections--;\n      this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n  }, {\n    key: \"_send\",\n    value: function _send(mail, callback) {\n      var _this6 = this;\n      var statObject = {\n        ts: Date.now(),\n        pending: true\n      };\n      this.connections++;\n      this.rateMessages.push(statObject);\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n      var getRawMessage = function getRawMessage(next) {\n        // do not use Message-ID and Date in DKIM signature\n        if (!mail.data._dkim) {\n          mail.data._dkim = {};\n        }\n        if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n          mail.data._dkim.skipFields += ':date:message-id';\n        } else {\n          mail.data._dkim.skipFields = 'date:message-id';\n        }\n        var sourceStream = mail.message.createReadStream();\n        var stream = sourceStream.pipe(new LeWindows());\n        var chunks = [];\n        var chunklen = 0;\n        stream.on('readable', function () {\n          var chunk;\n          while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n          }\n        });\n        sourceStream.once('error', function (err) {\n          return stream.emit('error', err);\n        });\n        stream.once('error', function (err) {\n          next(err);\n        });\n        stream.once('end', function () {\n          return next(null, Buffer.concat(chunks, chunklen));\n        });\n      };\n      setImmediate(function () {\n        return getRawMessage(function (err, raw) {\n          if (err) {\n            _this6.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed creating message for %s. %s', messageId, err.message);\n            statObject.pending = false;\n            return callback(err);\n          }\n          var sesMessage = {\n            RawMessage: {\n              // required\n              Data: raw // required\n            },\n\n            Source: envelope.from,\n            Destinations: envelope.to\n          };\n          Object.keys(mail.data.ses || {}).forEach(function (key) {\n            sesMessage[key] = mail.data.ses[key];\n          });\n          var ses = (_this6.ses.aws ? _this6.ses.ses : _this6.ses) || {};\n          var aws = _this6.ses.aws || {};\n          var getRegion = function getRegion(cb) {\n            if (ses.config && typeof ses.config.region === 'function') {\n              // promise\n              return ses.config.region().then(function (region) {\n                return cb(null, region);\n              })[\"catch\"](function (err) {\n                return cb(err);\n              });\n            }\n            return cb(null, ses.config && ses.config.region || 'us-east-1');\n          };\n          getRegion(function (err, region) {\n            if (err || !region) {\n              region = 'us-east-1';\n            }\n            var sendPromise;\n            if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n              // v3 API\n              sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n            } else {\n              // v2 API\n              sendPromise = ses.sendRawEmail(sesMessage).promise();\n            }\n            sendPromise.then(function (data) {\n              if (region === 'us-east-1') {\n                region = 'email';\n              }\n              statObject.pending = false;\n              callback(null, {\n                envelope: {\n                  from: envelope.from,\n                  to: envelope.to\n                },\n                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                response: data.MessageId,\n                raw: raw\n              });\n            })[\"catch\"](function (err) {\n              _this6.logger.error({\n                err: err,\n                tnx: 'send'\n              }, 'Send error for %s: %s', messageId, err.message);\n              statObject.pending = false;\n              callback(err);\n            });\n          });\n        });\n      });\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var promise;\n      var ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n      var aws = this.ses.aws || {};\n      var sesMessage = {\n        RawMessage: {\n          // required\n          Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n        },\n        Source: 'invalid@invalid',\n        Destinations: ['invalid@invalid']\n      };\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      var cb = function cb(err) {\n        if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n          return callback(err);\n        }\n        return callback(null, true);\n      };\n      if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n        // v3 API\n        sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n        ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n      } else {\n        // v2 API\n        ses.sendRawEmail(sesMessage, cb);\n      }\n      return promise;\n    }\n  }]);\n}(EventEmitter);\nmodule.exports = SESTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/shared/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/shared/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-console: 0 */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar urllib = __webpack_require__(/*! url */ \"url\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nvar dns = __webpack_require__(/*! dns */ \"dns\");\nvar net = __webpack_require__(/*! net */ \"net\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar DNS_TTL = 5 * 60 * 1000;\nvar networkInterfaces;\ntry {\n  networkInterfaces = os.networkInterfaces();\n} catch (err) {\n  // fails on some systems\n}\nmodule.exports.networkInterfaces = networkInterfaces;\nvar isFamilySupported = function isFamilySupported(family, allowInternal) {\n  var networkInterfaces = module.exports.networkInterfaces;\n  if (!networkInterfaces) {\n    // hope for the best\n    return true;\n  }\n  var familySupported =\n  // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n  Object.keys(networkInterfaces).map(function (key) {\n    return networkInterfaces[key];\n  })\n  // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n  .reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []).filter(function (i) {\n    return !i.internal || allowInternal;\n  }).filter(function (i) {\n    return i.family === 'IPv' + family || i.family === family;\n  }).length > 0;\n  return familySupported;\n};\nvar resolver = function resolver(family, hostname, options, callback) {\n  options = options || {};\n  var familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n  if (!familySupported) {\n    return callback(null, []);\n  }\n  var resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n  resolver['resolve' + family](hostname, function (err, addresses) {\n    if (err) {\n      switch (err.code) {\n        case dns.NODATA:\n        case dns.NOTFOUND:\n        case dns.NOTIMP:\n        case dns.SERVFAIL:\n        case dns.CONNREFUSED:\n        case dns.REFUSED:\n        case 'EAI_AGAIN':\n          return callback(null, []);\n      }\n      return callback(err);\n    }\n    return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n  });\n};\nvar dnsCache = module.exports.dnsCache = new Map();\nvar formatDNSValue = function formatDNSValue(value, extra) {\n  if (!value) {\n    return Object.assign({}, extra || {});\n  }\n  return Object.assign({\n    servername: value.servername,\n    host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n  }, extra || {});\n};\nmodule.exports.resolveHostname = function (options, callback) {\n  options = options || {};\n  if (!options.host && options.servername) {\n    options.host = options.servername;\n  }\n  if (!options.host || net.isIP(options.host)) {\n    // nothing to do here\n    var value = {\n      addresses: [options.host],\n      servername: options.servername || false\n    };\n    return callback(null, formatDNSValue(value, {\n      cached: false\n    }));\n  }\n  var cached;\n  if (dnsCache.has(options.host)) {\n    cached = dnsCache.get(options.host);\n    if (!cached.expires || cached.expires >= Date.now()) {\n      return callback(null, formatDNSValue(cached.value, {\n        cached: true\n      }));\n    }\n  }\n  resolver(4, options.host, options, function (err, addresses) {\n    if (err) {\n      if (cached) {\n        // ignore error, use expired value\n        return callback(null, formatDNSValue(cached.value, {\n          cached: true,\n          error: err\n        }));\n      }\n      return callback(err);\n    }\n    if (addresses && addresses.length) {\n      var _value = {\n        addresses: addresses,\n        servername: options.servername || options.host\n      };\n      dnsCache.set(options.host, {\n        value: _value,\n        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n      });\n      return callback(null, formatDNSValue(_value, {\n        cached: false\n      }));\n    }\n    resolver(6, options.host, options, function (err, addresses) {\n      if (err) {\n        if (cached) {\n          // ignore error, use expired value\n          return callback(null, formatDNSValue(cached.value, {\n            cached: true,\n            error: err\n          }));\n        }\n        return callback(err);\n      }\n      if (addresses && addresses.length) {\n        var _value2 = {\n          addresses: addresses,\n          servername: options.servername || options.host\n        };\n        dnsCache.set(options.host, {\n          value: _value2,\n          expires: Date.now() + (options.dnsTtl || DNS_TTL)\n        });\n        return callback(null, formatDNSValue(_value2, {\n          cached: false\n        }));\n      }\n      try {\n        dns.lookup(options.host, {\n          all: true\n        }, function (err, addresses) {\n          if (err) {\n            if (cached) {\n              // ignore error, use expired value\n              return callback(null, formatDNSValue(cached.value, {\n                cached: true,\n                error: err\n              }));\n            }\n            return callback(err);\n          }\n          var address = addresses ? addresses.filter(function (addr) {\n            return isFamilySupported(addr.family);\n          }).map(function (addr) {\n            return addr.address;\n          }).shift() : false;\n          if (addresses && addresses.length && !address) {\n            // there are addresses but none can be used\n            console.warn(\"Failed to resolve IPv\".concat(addresses[0].family, \" addresses with current network\"));\n          }\n          if (!address && cached) {\n            // nothing was found, fallback to cached value\n            return callback(null, formatDNSValue(cached.value, {\n              cached: true\n            }));\n          }\n          var value = {\n            addresses: address ? [address] : [options.host],\n            servername: options.servername || options.host\n          };\n          dnsCache.set(options.host, {\n            value: value,\n            expires: Date.now() + (options.dnsTtl || DNS_TTL)\n          });\n          return callback(null, formatDNSValue(value, {\n            cached: false\n          }));\n        });\n      } catch (err) {\n        if (cached) {\n          // ignore error, use expired value\n          return callback(null, formatDNSValue(cached.value, {\n            cached: true,\n            error: err\n          }));\n        }\n        return callback(err);\n      }\n    });\n  });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */\nmodule.exports.parseConnectionUrl = function (str) {\n  str = str || '';\n  var options = {};\n  [urllib.parse(str, true)].forEach(function (url) {\n    var auth;\n    switch (url.protocol) {\n      case 'smtp:':\n        options.secure = false;\n        break;\n      case 'smtps:':\n        options.secure = true;\n        break;\n      case 'direct:':\n        options.direct = true;\n        break;\n    }\n    if (!isNaN(url.port) && Number(url.port)) {\n      options.port = Number(url.port);\n    }\n    if (url.hostname) {\n      options.host = url.hostname;\n    }\n    if (url.auth) {\n      auth = url.auth.split(':');\n      if (!options.auth) {\n        options.auth = {};\n      }\n      options.auth.user = auth.shift();\n      options.auth.pass = auth.join(':');\n    }\n    Object.keys(url.query || {}).forEach(function (key) {\n      var obj = options;\n      var lKey = key;\n      var value = url.query[key];\n      if (!isNaN(value)) {\n        value = Number(value);\n      }\n      switch (value) {\n        case 'true':\n          value = true;\n          break;\n        case 'false':\n          value = false;\n          break;\n      }\n\n      // tls is nested object\n      if (key.indexOf('tls.') === 0) {\n        lKey = key.substr(4);\n        if (!options.tls) {\n          options.tls = {};\n        }\n        obj = options.tls;\n      } else if (key.indexOf('.') >= 0) {\n        // ignore nested properties besides tls\n        return;\n      }\n      if (!(lKey in obj)) {\n        obj[lKey] = value;\n      }\n    });\n  });\n  return options;\n};\nmodule.exports._logFunc = function (logger, level, defaults, data, message) {\n  var entry = {};\n  Object.keys(defaults || {}).forEach(function (key) {\n    if (key !== 'level') {\n      entry[key] = defaults[key];\n    }\n  });\n  Object.keys(data || {}).forEach(function (key) {\n    if (key !== 'level') {\n      entry[key] = data[key];\n    }\n  });\n  for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n    args[_key - 5] = arguments[_key];\n  }\n  logger[level].apply(logger, [entry, message].concat(args));\n};\n\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */\nmodule.exports.getLogger = function (options, defaults) {\n  options = options || {};\n  var response = {};\n  var levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n  if (!options.logger) {\n    // use vanity logger\n    levels.forEach(function (level) {\n      response[level] = function () {\n        return false;\n      };\n    });\n    return response;\n  }\n  var logger = options.logger;\n  if (options.logger === true) {\n    // create console logger\n    logger = createDefaultLogger(levels);\n  }\n  levels.forEach(function (level) {\n    response[level] = function (data, message) {\n      var _module$exports;\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n      (_module$exports = module.exports)._logFunc.apply(_module$exports, [logger, level, defaults, data, message].concat(args));\n    };\n  });\n  return response;\n};\n\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */\nmodule.exports.callbackPromise = function (resolve, reject) {\n  return function () {\n    var args = Array.from(arguments);\n    var err = args.shift();\n    if (err) {\n      reject(err);\n    } else {\n      resolve.apply(void 0, args);\n    }\n  };\n};\nmodule.exports.parseDataURI = function (uri) {\n  var input = uri;\n  var commaPos = input.indexOf(',');\n  if (!commaPos) {\n    return uri;\n  }\n  var data = input.substring(commaPos + 1);\n  var metaStr = input.substring('data:'.length, commaPos);\n  var encoding;\n  var metaEntries = metaStr.split(';');\n  var lastMetaEntry = metaEntries.length > 1 ? metaEntries[metaEntries.length - 1] : false;\n  if (lastMetaEntry && lastMetaEntry.indexOf('=') < 0) {\n    encoding = lastMetaEntry.toLowerCase();\n    metaEntries.pop();\n  }\n  var contentType = metaEntries.shift() || 'application/octet-stream';\n  var params = {};\n  var _iterator = _createForOfIteratorHelper(metaEntries),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      var sep = entry.indexOf('=');\n      if (sep >= 0) {\n        var key = entry.substring(0, sep);\n        var value = entry.substring(sep + 1);\n        params[key] = value;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  switch (encoding) {\n    case 'base64':\n      data = Buffer.from(data, 'base64');\n      break;\n    case 'utf8':\n      data = Buffer.from(data);\n      break;\n    default:\n      try {\n        data = Buffer.from(decodeURIComponent(data));\n      } catch (err) {\n        data = Buffer.from(data);\n      }\n      data = Buffer.from(data);\n  }\n  return {\n    data: data,\n    encoding: encoding,\n    contentType: contentType,\n    params: params\n  };\n};\n\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */\nmodule.exports.resolveContent = function (data, key, callback) {\n  var promise;\n  if (!callback) {\n    promise = new Promise(function (resolve, reject) {\n      callback = module.exports.callbackPromise(resolve, reject);\n    });\n  }\n  var content = data && data[key] && data[key].content || data[key];\n  var contentStream;\n  var encoding = (_typeof(data[key]) === 'object' && data[key].encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n  if (!content) {\n    return callback(null, content);\n  }\n  if (_typeof(content) === 'object') {\n    if (typeof content.pipe === 'function') {\n      return resolveStream(content, function (err, value) {\n        if (err) {\n          return callback(err);\n        }\n        // we can't stream twice the same content, so we need\n        // to replace the stream object with the streaming result\n        if (data[key].content) {\n          data[key].content = value;\n        } else {\n          data[key] = value;\n        }\n        callback(null, value);\n      });\n    } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n      contentStream = nmfetch(content.path || content.href);\n      return resolveStream(contentStream, callback);\n    } else if (/^data:/i.test(content.path || content.href)) {\n      var parsedDataUri = module.exports.parseDataURI(content.path || content.href);\n      if (!parsedDataUri || !parsedDataUri.data) {\n        return callback(null, Buffer.from(0));\n      }\n      return callback(null, parsedDataUri.data);\n    } else if (content.path) {\n      return resolveStream(fs.createReadStream(content.path), callback);\n    }\n  }\n  if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n    content = Buffer.from(data[key].content, encoding);\n  }\n\n  // default action, return as is\n  setImmediate(function () {\n    return callback(null, content);\n  });\n  return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nmodule.exports.assign = function /* target, ... sources */\n() {\n  var args = Array.from(arguments);\n  var target = args.shift() || {};\n  args.forEach(function (source) {\n    Object.keys(source || {}).forEach(function (key) {\n      if (['tls', 'auth'].includes(key) && source[key] && _typeof(source[key]) === 'object') {\n        // tls and auth are special keys that need to be enumerated separately\n        // other objects are passed as is\n        if (!target[key]) {\n          // ensure that target has this key\n          target[key] = {};\n        }\n        Object.keys(source[key]).forEach(function (subKey) {\n          target[key][subKey] = source[key][subKey];\n        });\n      } else {\n        target[key] = source[key];\n      }\n    });\n  });\n  return target;\n};\nmodule.exports.encodeXText = function (str) {\n  // ! 0x21\n  // + 0x2B\n  // = 0x3D\n  // ~ 0x7E\n  if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n    return str;\n  }\n  var buf = Buffer.from(str);\n  var result = '';\n  for (var i = 0, len = buf.length; i < len; i++) {\n    var c = buf[i];\n    if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n      result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();\n    } else {\n      result += String.fromCharCode(c);\n    }\n  }\n  return result;\n};\n\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */\nfunction resolveStream(stream, callback) {\n  var responded = false;\n  var chunks = [];\n  var chunklen = 0;\n  stream.on('error', function (err) {\n    if (responded) {\n      return;\n    }\n    responded = true;\n    callback(err);\n  });\n  stream.on('readable', function () {\n    var chunk;\n    while ((chunk = stream.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  stream.on('end', function () {\n    if (responded) {\n      return;\n    }\n    responded = true;\n    var value;\n    try {\n      value = Buffer.concat(chunks, chunklen);\n    } catch (E) {\n      return callback(E);\n    }\n    callback(null, value);\n  });\n}\n\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */\nfunction createDefaultLogger(levels) {\n  var levelMaxLen = 0;\n  var levelNames = new Map();\n  levels.forEach(function (level) {\n    if (level.length > levelMaxLen) {\n      levelMaxLen = level.length;\n    }\n  });\n  levels.forEach(function (level) {\n    var levelName = level.toUpperCase();\n    if (levelName.length < levelMaxLen) {\n      levelName += ' '.repeat(levelMaxLen - levelName.length);\n    }\n    levelNames.set(level, levelName);\n  });\n  var print = function print(level, entry, message) {\n    var prefix = '';\n    if (entry) {\n      if (entry.tnx === 'server') {\n        prefix = 'S: ';\n      } else if (entry.tnx === 'client') {\n        prefix = 'C: ';\n      }\n      if (entry.sid) {\n        prefix = '[' + entry.sid + '] ' + prefix;\n      }\n      if (entry.cid) {\n        prefix = '[#' + entry.cid + '] ' + prefix;\n      }\n    }\n    for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      args[_key3 - 3] = arguments[_key3];\n    }\n    message = util.format.apply(util, [message].concat(args));\n    message.split(/\\r?\\n/).forEach(function (line) {\n      console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);\n    });\n  };\n  var logger = {};\n  levels.forEach(function (level) {\n    logger[level] = print.bind(null, level);\n  });\n  return logger;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/shared/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js":
/*!********************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/data-stream.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar Transform = stream.Transform;\n\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nvar DataStream = /*#__PURE__*/function (_Transform) {\n  function DataStream(options) {\n    var _this2;\n    _classCallCheck(this, DataStream);\n    _this2 = _callSuper(this, DataStream, [options]);\n    // init Transform\n    _this2.options = options || {};\n    _this2._curLine = '';\n    _this2.inByteCount = 0;\n    _this2.outByteCount = 0;\n    _this2.lastByte = false;\n    return _this2;\n  }\n\n  /**\n   * Escapes dots\n   */\n  _inherits(DataStream, _Transform);\n  return _createClass(DataStream, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      var chunks = [];\n      var chunklen = 0;\n      var i,\n        len,\n        lastPos = 0;\n      var buf;\n      if (!chunk || !chunk.length) {\n        return done();\n      }\n      if (typeof chunk === 'string') {\n        chunk = Buffer.from(chunk);\n      }\n      this.inByteCount += chunk.length;\n      for (i = 0, len = chunk.length; i < len; i++) {\n        if (chunk[i] === 0x2e) {\n          // .\n          if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {\n            buf = chunk.slice(lastPos, i + 1);\n            chunks.push(buf);\n            chunks.push(Buffer.from('.'));\n            chunklen += buf.length + 1;\n            lastPos = i + 1;\n          }\n        } else if (chunk[i] === 0x0a) {\n          // .\n          if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n            if (i > lastPos) {\n              buf = chunk.slice(lastPos, i);\n              chunks.push(buf);\n              chunklen += buf.length + 2;\n            } else {\n              chunklen += 2;\n            }\n            chunks.push(Buffer.from('\\r\\n'));\n            lastPos = i + 1;\n          }\n        }\n      }\n      if (chunklen) {\n        // add last piece\n        if (lastPos < chunk.length) {\n          buf = chunk.slice(lastPos);\n          chunks.push(buf);\n          chunklen += buf.length;\n        }\n        this.outByteCount += chunklen;\n        this.push(Buffer.concat(chunks, chunklen));\n      } else {\n        this.outByteCount += chunk.length;\n        this.push(chunk);\n      }\n      this.lastByte = chunk[chunk.length - 1];\n      done();\n    }\n\n    /**\n     * Finalizes the stream with a dot on a single line\n     */\n  }, {\n    key: \"_flush\",\n    value: function _flush(done) {\n      var buf;\n      if (this.lastByte === 0x0a) {\n        buf = Buffer.from('.\\r\\n');\n      } else if (this.lastByte === 0x0d) {\n        buf = Buffer.from('\\n.\\r\\n');\n      } else {\n        buf = Buffer.from('\\r\\n.\\r\\n');\n      }\n      this.outByteCount += buf.length;\n      this.push(buf);\n      done();\n    }\n  }]);\n}(Transform);\nmodule.exports = DataStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js":
/*!**************************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * Minimal HTTP/S proxy client\n */\nvar net = __webpack_require__(/*! net */ \"net\");\nvar tls = __webpack_require__(/*! tls */ \"tls\");\nvar urllib = __webpack_require__(/*! url */ \"url\");\n\n/**\n * Establishes proxied connection to destinationPort\n *\n * httpProxyClient(\"http://localhost:3128/\", 80, \"google.com\", function(err, socket){\n *     socket.write(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n * });\n *\n * @param {String} proxyUrl proxy configuration, etg \"http://proxy.host:3128/\"\n * @param {Number} destinationPort Port to open in destination host\n * @param {String} destinationHost Destination hostname\n * @param {Function} callback Callback to run with the rocket object once connection is established\n */\nfunction httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {\n  var proxy = urllib.parse(proxyUrl);\n\n  // create a socket connection to the proxy server\n  var options;\n  var connect;\n  var socket;\n  options = {\n    host: proxy.hostname,\n    port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === 'https:' ? 443 : 80\n  };\n  if (proxy.protocol === 'https:') {\n    // we can use untrusted proxies as long as we verify actual SMTP certificates\n    options.rejectUnauthorized = false;\n    connect = tls.connect.bind(tls);\n  } else {\n    connect = net.connect.bind(net);\n  }\n\n  // Error harness for initial connection. Once connection is established, the responsibility\n  // to handle errors is passed to whoever uses this socket\n  var finished = false;\n  var tempSocketErr = function tempSocketErr(err) {\n    if (finished) {\n      return;\n    }\n    finished = true;\n    try {\n      socket.destroy();\n    } catch (E) {\n      // ignore\n    }\n    callback(err);\n  };\n  var timeoutErr = function timeoutErr() {\n    var err = new Error('Proxy socket timed out');\n    err.code = 'ETIMEDOUT';\n    tempSocketErr(err);\n  };\n  socket = connect(options, function () {\n    if (finished) {\n      return;\n    }\n    var reqHeaders = {\n      Host: destinationHost + ':' + destinationPort,\n      Connection: 'close'\n    };\n    if (proxy.auth) {\n      reqHeaders['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64');\n    }\n    socket.write(\n    // HTTP method\n    'CONNECT ' + destinationHost + ':' + destinationPort + ' HTTP/1.1\\r\\n' +\n    // HTTP request headers\n    Object.keys(reqHeaders).map(function (key) {\n      return key + ': ' + reqHeaders[key];\n    }).join('\\r\\n') +\n    // End request\n    '\\r\\n\\r\\n');\n    var headers = '';\n    var onSocketData = function onSocketData(chunk) {\n      var match;\n      var remainder;\n      if (finished) {\n        return;\n      }\n      headers += chunk.toString('binary');\n      if (match = headers.match(/\\r\\n\\r\\n/)) {\n        socket.removeListener('data', onSocketData);\n        remainder = headers.substr(match.index + match[0].length);\n        headers = headers.substr(0, match.index);\n        if (remainder) {\n          socket.unshift(Buffer.from(remainder, 'binary'));\n        }\n\n        // proxy connection is now established\n        finished = true;\n\n        // check response code\n        match = headers.match(/^HTTP\\/\\d+\\.\\d+ (\\d+)/i);\n        if (!match || (match[1] || '').charAt(0) !== '2') {\n          try {\n            socket.destroy();\n          } catch (E) {\n            // ignore\n          }\n          return callback(new Error('Invalid response from proxy' + (match && ': ' + match[1] || '')));\n        }\n        socket.removeListener('error', tempSocketErr);\n        socket.removeListener('timeout', timeoutErr);\n        socket.setTimeout(0);\n        return callback(null, socket);\n      }\n    };\n    socket.on('data', onSocketData);\n  });\n  socket.setTimeout(httpProxyClient.timeout || 30 * 1000);\n  socket.on('timeout', timeoutErr);\n  socket.once('error', tempSocketErr);\n}\nmodule.exports = httpProxyClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar packageInfo = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar net = __webpack_require__(/*! net */ \"net\");\nvar tls = __webpack_require__(/*! tls */ \"tls\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar DataStream = __webpack_require__(/*! ./data-stream */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\");\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n\n// default timeout values in ms\nvar CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nvar SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nvar GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\nvar DNS_TIMEOUT = 30 * 1000; // how much to wait for resolveHostname\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **dnsTimeout** - Time to wait in ms for the DNS requests to be resolved (defaults to 30 seconds)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nvar SMTPConnection = /*#__PURE__*/function (_EventEmitter) {\n  function SMTPConnection(options) {\n    var _this2;\n    _classCallCheck(this, SMTPConnection);\n    _this2 = _callSuper(this, SMTPConnection, [options]);\n    _this2.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n    _this2.stage = 'init';\n    _this2.options = options || {};\n    _this2.secureConnection = !!_this2.options.secure;\n    _this2.alreadySecured = !!_this2.options.secured;\n    _this2.port = Number(_this2.options.port) || (_this2.secureConnection ? 465 : 587);\n    _this2.host = _this2.options.host || 'localhost';\n    _this2.servername = _this2.options.servername ? _this2.options.servername : !net.isIP(_this2.host) ? _this2.host : false;\n    _this2.allowInternalNetworkInterfaces = _this2.options.allowInternalNetworkInterfaces || false;\n    if (typeof _this2.options.secure === 'undefined' && _this2.port === 465) {\n      // if secure option is not set but port is 465, then default to secure\n      _this2.secureConnection = true;\n    }\n    _this2.name = _this2.options.name || _this2._getHostname();\n    _this2.logger = shared.getLogger(_this2.options, {\n      component: _this2.options.component || 'smtp-connection',\n      sid: _this2.id\n    });\n    _this2.customAuth = new Map();\n    Object.keys(_this2.options.customAuth || {}).forEach(function (key) {\n      var mapKey = (key || '').toString().trim().toUpperCase();\n      if (!mapKey) {\n        return;\n      }\n      _this2.customAuth.set(mapKey, _this2.options.customAuth[key]);\n    });\n\n    /**\n     * Expose version nr, just for the reference\n     * @type {String}\n     */\n    _this2.version = packageInfo.version;\n\n    /**\n     * If true, then the user is authenticated\n     * @type {Boolean}\n     */\n    _this2.authenticated = false;\n\n    /**\n     * If set to true, this instance is no longer active\n     * @private\n     */\n    _this2.destroyed = false;\n\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n    _this2.secure = !!_this2.secureConnection;\n\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n    _this2._remainder = '';\n\n    /**\n     * Unprocessed responses from the server\n     * @type {Array}\n     */\n    _this2._responseQueue = [];\n    _this2.lastServerResponse = false;\n\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n    _this2._socket = false;\n\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n    _this2._supportedAuth = [];\n\n    /**\n     * Set to true, if EHLO response includes \"AUTH\".\n     * If false then authentication is not tried\n     */\n    _this2.allowsAuth = false;\n\n    /**\n     * Includes current envelope (from, to)\n     * @private\n     */\n    _this2._envelope = false;\n\n    /**\n     * Lists supported extensions\n     * @private\n     */\n    _this2._supportedExtensions = [];\n\n    /**\n     * Defines the maximum allowed size for a single message\n     * @private\n     */\n    _this2._maxAllowedSize = 0;\n\n    /**\n     * Function queue to run if a data chunk comes from the server\n     * @private\n     */\n    _this2._responseActions = [];\n    _this2._recipientQueue = [];\n\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n    _this2._greetingTimeout = false;\n\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n    _this2._connectionTimeout = false;\n\n    /**\n     * If the socket is deemed already closed\n     * @private\n     */\n    _this2._destroyed = false;\n\n    /**\n     * If the socket is already being closed\n     * @private\n     */\n    _this2._closing = false;\n\n    /**\n     * Callbacks for socket's listeners\n     */\n    _this2._onSocketData = function (chunk) {\n      return _this2._onData(chunk);\n    };\n    _this2._onSocketError = function (error) {\n      return _this2._onError(error, 'ESOCKET', false, 'CONN');\n    };\n    _this2._onSocketClose = function () {\n      return _this2._onClose();\n    };\n    _this2._onSocketEnd = function () {\n      return _this2._onEnd();\n    };\n    _this2._onSocketTimeout = function () {\n      return _this2._onTimeout();\n    };\n    return _this2;\n  }\n\n  /**\n   * Creates a connection to a SMTP server and sets up connection\n   * listener\n   */\n  _inherits(SMTPConnection, _EventEmitter);\n  return _createClass(SMTPConnection, [{\n    key: \"connect\",\n    value: function connect(connectCallback) {\n      var _this3 = this;\n      if (typeof connectCallback === 'function') {\n        this.once('connect', function () {\n          _this3.logger.debug({\n            tnx: 'smtp'\n          }, 'SMTP handshake finished');\n          connectCallback();\n        });\n        var isDestroyedMessage = this._isDestroyedMessage('connect');\n        if (isDestroyedMessage) {\n          return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));\n        }\n      }\n      var opts = {\n        port: this.port,\n        host: this.host,\n        allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces,\n        timeout: this.options.dnsTimeout || DNS_TIMEOUT\n      };\n      if (this.options.localAddress) {\n        opts.localAddress = this.options.localAddress;\n      }\n      var setupConnectionHandlers = function setupConnectionHandlers() {\n        _this3._connectionTimeout = setTimeout(function () {\n          _this3._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n        }, _this3.options.connectionTimeout || CONNECTION_TIMEOUT);\n        _this3._socket.on('error', _this3._onSocketError);\n      };\n      if (this.options.connection) {\n        // connection is already opened\n        this._socket = this.options.connection;\n        if (this.secureConnection && !this.alreadySecured) {\n          setImmediate(function () {\n            return _this3._upgradeConnection(function (err) {\n              if (err) {\n                _this3._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n                return;\n              }\n              _this3._onConnect();\n            });\n          });\n        } else {\n          setImmediate(function () {\n            return _this3._onConnect();\n          });\n        }\n        return;\n      } else if (this.options.socket) {\n        // socket object is set up but not yet connected\n        this._socket = this.options.socket;\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this3._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n          _this3.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved.cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n          try {\n            _this3._socket.connect(_this3.port, _this3.host, function () {\n              _this3._socket.setKeepAlive(true);\n              _this3._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this3._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      } else if (this.secureConnection) {\n        // connect using tls\n        if (this.options.tls) {\n          Object.keys(this.options.tls).forEach(function (key) {\n            opts[key] = _this3.options.tls[key];\n          });\n        }\n\n        // ensure servername for SNI\n        if (this.servername && !opts.servername) {\n          opts.servername = this.servername;\n        }\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this3._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n          _this3.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved.cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n          try {\n            _this3._socket = tls.connect(opts, function () {\n              _this3._socket.setKeepAlive(true);\n              _this3._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this3._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      } else {\n        // connect using plaintext\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this3._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n          _this3.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved.cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n          try {\n            _this3._socket = net.connect(opts, function () {\n              _this3._socket.setKeepAlive(true);\n              _this3._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this3._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      }\n    }\n\n    /**\n     * Sends QUIT\n     */\n  }, {\n    key: \"quit\",\n    value: function quit() {\n      this._sendCommand('QUIT');\n      this._responseActions.push(this.close);\n    }\n\n    /**\n     * Closes the connection to the server\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      clearTimeout(this._connectionTimeout);\n      clearTimeout(this._greetingTimeout);\n      this._responseActions = [];\n\n      // allow to run this function only once\n      if (this._closing) {\n        return;\n      }\n      this._closing = true;\n      var closeMethod = 'end';\n      if (this.stage === 'init') {\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n      }\n      this.logger.debug({\n        tnx: 'smtp'\n      }, 'Closing connection to the server using \"%s\"', closeMethod);\n      var socket = this._socket && this._socket.socket || this._socket;\n      if (socket && !socket.destroyed) {\n        try {\n          this._socket[closeMethod]();\n        } catch (E) {\n          // just ignore\n        }\n      }\n      this._destroy();\n    }\n\n    /**\n     * Authenticate user\n     */\n  }, {\n    key: \"login\",\n    value: function login(authData, callback) {\n      var _this4 = this;\n      var isDestroyedMessage = this._isDestroyedMessage('login');\n      if (isDestroyedMessage) {\n        return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n      }\n      this._auth = authData || {};\n      // Select SASL authentication method\n      this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;\n      if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n        this._authMethod = 'XOAUTH2';\n      } else if (!this._authMethod || this._authMethod === 'XOAUTH2' && !this._auth.oauth2) {\n        // use first supported\n        this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n      }\n      if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n        if (this._auth.user && this._auth.pass || this.customAuth.has(this._authMethod)) {\n          this._auth.credentials = {\n            user: this._auth.user,\n            pass: this._auth.pass,\n            options: this._auth.options\n          };\n        } else {\n          return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n        }\n      }\n      if (this.customAuth.has(this._authMethod)) {\n        var handler = this.customAuth.get(this._authMethod);\n        var lastResponse;\n        var returned = false;\n        var resolve = function resolve() {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          _this4.logger.info({\n            tnx: 'smtp',\n            username: _this4._auth.user,\n            action: 'authenticated',\n            method: _this4._authMethod\n          }, 'User %s authenticated', JSON.stringify(_this4._auth.user));\n          _this4.authenticated = true;\n          callback(null, true);\n        };\n        var reject = function reject(err) {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          callback(_this4._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + _this4._authMethod));\n        };\n        var handlerResponse = handler({\n          auth: this._auth,\n          method: this._authMethod,\n          extensions: [].concat(this._supportedExtensions),\n          authMethods: [].concat(this._supportedAuth),\n          maxAllowedSize: this._maxAllowedSize || false,\n          sendCommand: function sendCommand(cmd, done) {\n            var promise;\n            if (!done) {\n              promise = new Promise(function (resolve, reject) {\n                done = shared.callbackPromise(resolve, reject);\n              });\n            }\n            _this4._responseActions.push(function (str) {\n              lastResponse = str;\n              var codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n              var data = {\n                command: cmd,\n                response: str\n              };\n              if (codes) {\n                data.status = Number(codes[1]) || 0;\n                if (codes[2]) {\n                  data.code = codes[2];\n                }\n                data.text = str.substr(codes[0].length);\n              } else {\n                data.text = str;\n                data.status = 0; // just in case we need to perform numeric comparisons\n              }\n\n              done(null, data);\n            });\n            setImmediate(function () {\n              return _this4._sendCommand(cmd);\n            });\n            return promise;\n          },\n          resolve: resolve,\n          reject: reject\n        });\n        if (handlerResponse && typeof handlerResponse[\"catch\"] === 'function') {\n          // a promise was returned\n          handlerResponse.then(resolve)[\"catch\"](reject);\n        }\n        return;\n      }\n      switch (this._authMethod) {\n        case 'XOAUTH2':\n          this._handleXOauth2Token(false, callback);\n          return;\n        case 'LOGIN':\n          this._responseActions.push(function (str) {\n            _this4._actionAUTH_LOGIN_USER(str, callback);\n          });\n          this._sendCommand('AUTH LOGIN');\n          return;\n        case 'PLAIN':\n          this._responseActions.push(function (str) {\n            _this4._actionAUTHComplete(str, callback);\n          });\n          this._sendCommand('AUTH PLAIN ' + Buffer.from(\n          //this._auth.user+'\\u0000'+\n          \"\\0\" +\n          // skip authorization identity as it causes problems with some servers\n          this._auth.credentials.user + \"\\0\" + this._auth.credentials.pass, 'utf-8').toString('base64'),\n          // log entry without passwords\n          'AUTH PLAIN ' + Buffer.from(\n          //this._auth.user+'\\u0000'+\n          \"\\0\" +\n          // skip authorization identity as it causes problems with some servers\n          this._auth.credentials.user + \"\\0\" + '/* secret */', 'utf-8').toString('base64'));\n          return;\n        case 'CRAM-MD5':\n          this._responseActions.push(function (str) {\n            _this4._actionAUTH_CRAM_MD5(str, callback);\n          });\n          this._sendCommand('AUTH CRAM-MD5');\n          return;\n      }\n      return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n    }\n\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */\n  }, {\n    key: \"send\",\n    value: function send(envelope, message, done) {\n      var _this5 = this;\n      if (!message) {\n        return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n      }\n      var isDestroyedMessage = this._isDestroyedMessage('send message');\n      if (isDestroyedMessage) {\n        return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n      }\n\n      // reject larger messages than allowed\n      if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n        return setImmediate(function () {\n          done(_this5._formatError('Message size larger than allowed ' + _this5._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n        });\n      }\n\n      // ensure that callback is only called once\n      var returned = false;\n      var callback = function callback() {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        done.apply(void 0, arguments);\n      };\n      if (typeof message.on === 'function') {\n        message.on('error', function (err) {\n          return callback(_this5._formatError(err, 'ESTREAM', false, 'API'));\n        });\n      }\n      var startTime = Date.now();\n      this._setEnvelope(envelope, function (err, info) {\n        if (err) {\n          return callback(err);\n        }\n        var envelopeTime = Date.now();\n        var stream = _this5._createSendStream(function (err, str) {\n          if (err) {\n            return callback(err);\n          }\n          info.envelopeTime = envelopeTime - startTime;\n          info.messageTime = Date.now() - envelopeTime;\n          info.messageSize = stream.outByteCount;\n          info.response = str;\n          return callback(null, info);\n        });\n        if (typeof message.pipe === 'function') {\n          message.pipe(stream);\n        } else {\n          stream.write(message);\n          stream.end();\n        }\n      });\n    }\n\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */\n  }, {\n    key: \"reset\",\n    value: function reset(callback) {\n      var _this6 = this;\n      this._sendCommand('RSET');\n      this._responseActions.push(function (str) {\n        if (str.charAt(0) !== '2') {\n          return callback(_this6._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));\n        }\n        _this6._envelope = false;\n        return callback(null, true);\n      });\n    }\n\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */\n  }, {\n    key: \"_onConnect\",\n    value: function _onConnect() {\n      var _this7 = this;\n      clearTimeout(this._connectionTimeout);\n      this.logger.info({\n        tnx: 'network',\n        localAddress: this._socket.localAddress,\n        localPort: this._socket.localPort,\n        remoteAddress: this._socket.remoteAddress,\n        remotePort: this._socket.remotePort\n      }, '%s established to %s:%s', this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n      if (this._destroyed) {\n        // Connection was established after we already had canceled it\n        this.close();\n        return;\n      }\n      this.stage = 'connected';\n\n      // clear existing listeners for the socket\n      this._socket.removeListener('data', this._onSocketData);\n      this._socket.removeListener('timeout', this._onSocketTimeout);\n      this._socket.removeListener('close', this._onSocketClose);\n      this._socket.removeListener('end', this._onSocketEnd);\n      this._socket.on('data', this._onSocketData);\n      this._socket.once('close', this._onSocketClose);\n      this._socket.once('end', this._onSocketEnd);\n      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n      this._socket.on('timeout', this._onSocketTimeout);\n      this._greetingTimeout = setTimeout(function () {\n        // if still waiting for greeting, give up\n        if (_this7._socket && !_this7._destroyed && _this7._responseActions[0] === _this7._actionGreeting) {\n          _this7._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n        }\n      }, this.options.greetingTimeout || GREETING_TIMEOUT);\n      this._responseActions.push(this._actionGreeting);\n\n      // we have a 'data' listener set up so resume socket if it was paused\n      this._socket.resume();\n    }\n\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */\n  }, {\n    key: \"_onData\",\n    value: function _onData(chunk) {\n      if (this._destroyed || !chunk || !chunk.length) {\n        return;\n      }\n      var data = (chunk || '').toString('binary');\n      var lines = (this._remainder + data).split(/\\r?\\n/);\n      var lastline;\n      this._remainder = lines.pop();\n      for (var i = 0, len = lines.length; i < len; i++) {\n        if (this._responseQueue.length) {\n          lastline = this._responseQueue[this._responseQueue.length - 1];\n          if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n            this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n            continue;\n          }\n        }\n        this._responseQueue.push(lines[i]);\n      }\n      if (this._responseQueue.length) {\n        lastline = this._responseQueue[this._responseQueue.length - 1];\n        if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n          return;\n        }\n      }\n      this._processResponse();\n    }\n\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */\n  }, {\n    key: \"_onError\",\n    value: function _onError(err, type, data, command) {\n      clearTimeout(this._connectionTimeout);\n      clearTimeout(this._greetingTimeout);\n      if (this._destroyed) {\n        // just ignore, already closed\n        // this might happen when a socket is canceled because of reached timeout\n        // but the socket timeout error itself receives only after\n        return;\n      }\n      err = this._formatError(err, type, data, command);\n      this.logger.error(data, err.message);\n      this.emit('error', err);\n      this.close();\n    }\n  }, {\n    key: \"_formatError\",\n    value: function _formatError(message, type, response, command) {\n      var err;\n      if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n        err = message;\n      } else {\n        err = new Error(message);\n      }\n      if (type && type !== 'Error') {\n        err.code = type;\n      }\n      if (response) {\n        err.response = response;\n        err.message += ': ' + response;\n      }\n      var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n      if (responseCode) {\n        err.responseCode = responseCode;\n      }\n      if (command) {\n        err.command = command;\n      }\n      return err;\n    }\n\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */\n  }, {\n    key: \"_onClose\",\n    value: function _onClose() {\n      var serverResponse = false;\n      if (this._remainder && this._remainder.trim()) {\n        if (this.options.debug || this.options.transactionLog) {\n          this.logger.debug({\n            tnx: 'server'\n          }, this._remainder.replace(/\\r?\\n$/, ''));\n        }\n        this.lastServerResponse = serverResponse = this._remainder.trim();\n      }\n      this.logger.info({\n        tnx: 'network'\n      }, 'Connection closed');\n      if (this.upgrading && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', serverResponse, 'CONN');\n      } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', serverResponse, 'CONN');\n      } else if (/^[45]\\d{2}\\b/.test(serverResponse)) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', serverResponse, 'CONN');\n      }\n      this._destroy();\n    }\n\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */\n  }, {\n    key: \"_onEnd\",\n    value: function _onEnd() {\n      if (this._socket && !this._socket.destroyed) {\n        this._socket.destroy();\n      }\n    }\n\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */\n  }, {\n    key: \"_onTimeout\",\n    value: function _onTimeout() {\n      return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n    }\n\n    /**\n     * Destroys the client, emits 'end'\n     */\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      if (this._destroyed) {\n        return;\n      }\n      this._destroyed = true;\n      this.emit('end');\n    }\n\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */\n  }, {\n    key: \"_upgradeConnection\",\n    value: function _upgradeConnection(callback) {\n      var _this8 = this;\n      // do not remove all listeners or it breaks node v0.10 as there's\n      // apparently a 'finish' event set that would be cleared as well\n\n      // we can safely keep 'error', 'end', 'close' etc. events\n      this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards\n      this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object\n\n      var socketPlain = this._socket;\n      var opts = {\n        socket: this._socket,\n        host: this.host\n      };\n      Object.keys(this.options.tls || {}).forEach(function (key) {\n        opts[key] = _this8.options.tls[key];\n      });\n\n      // ensure servername for SNI\n      if (this.servername && !opts.servername) {\n        opts.servername = this.servername;\n      }\n      this.upgrading = true;\n      // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n      try {\n        this._socket = tls.connect(opts, function () {\n          _this8.secure = true;\n          _this8.upgrading = false;\n          _this8._socket.on('data', _this8._onSocketData);\n          socketPlain.removeListener('close', _this8._onSocketClose);\n          socketPlain.removeListener('end', _this8._onSocketEnd);\n          return callback(null, true);\n        });\n      } catch (err) {\n        return callback(err);\n      }\n      this._socket.on('error', this._onSocketError);\n      this._socket.once('close', this._onSocketClose);\n      this._socket.once('end', this._onSocketEnd);\n      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n      this._socket.on('timeout', this._onSocketTimeout);\n\n      // resume in case the socket was paused\n      socketPlain.resume();\n    }\n\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */\n  }, {\n    key: \"_processResponse\",\n    value: function _processResponse() {\n      var _this9 = this;\n      if (!this._responseQueue.length) {\n        return false;\n      }\n      var str = this.lastServerResponse = (this._responseQueue.shift() || '').toString();\n      if (/^\\d+-/.test(str.split('\\n').pop())) {\n        // keep waiting for the final part of multiline response\n        return;\n      }\n      if (this.options.debug || this.options.transactionLog) {\n        this.logger.debug({\n          tnx: 'server'\n        }, str.replace(/\\r?\\n$/, ''));\n      }\n      if (!str.trim()) {\n        // skip unexpected empty lines\n        setImmediate(function () {\n          return _this9._processResponse();\n        });\n      }\n      var action = this._responseActions.shift();\n      if (typeof action === 'function') {\n        action.call(this, str);\n        setImmediate(function () {\n          return _this9._processResponse();\n        });\n      } else {\n        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n      }\n    }\n\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */\n  }, {\n    key: \"_sendCommand\",\n    value: function _sendCommand(str, logStr) {\n      if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n      }\n      if (this._socket.destroyed) {\n        return this.close();\n      }\n      if (this.options.debug || this.options.transactionLog) {\n        this.logger.debug({\n          tnx: 'client'\n        }, (logStr || str || '').toString().replace(/\\r?\\n$/, ''));\n      }\n      this._socket.write(Buffer.from(str + '\\r\\n', 'utf-8'));\n    }\n\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */\n  }, {\n    key: \"_setEnvelope\",\n    value: function _setEnvelope(envelope, callback) {\n      var _this10 = this;\n      var args = [];\n      var useSmtpUtf8 = false;\n      this._envelope = envelope || {};\n      this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n      this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n        return (to && to.address || to || '').toString().trim();\n      });\n      if (!this._envelope.to.length) {\n        return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n      }\n      if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n      }\n\n      // check if the sender address uses only ASCII characters,\n      // otherwise require usage of SMTPUTF8 extension\n      if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n        useSmtpUtf8 = true;\n      }\n      for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n        if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n          return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n        }\n\n        // check if the recipients addresses use only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n          useSmtpUtf8 = true;\n        }\n      }\n\n      // clone the recipients array for latter manipulation\n      this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n      this._envelope.rejected = [];\n      this._envelope.rejectedErrors = [];\n      this._envelope.accepted = [];\n      if (this._envelope.dsn) {\n        try {\n          this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n        } catch (err) {\n          return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));\n        }\n      }\n      this._responseActions.push(function (str) {\n        _this10._actionMAIL(str, callback);\n      });\n\n      // If the server supports SMTPUTF8 and the envelope includes an internationalized\n      // email address then append SMTPUTF8 keyword to the MAIL FROM command\n      if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {\n        args.push('SMTPUTF8');\n        this._usingSmtpUtf8 = true;\n      }\n\n      // If the server supports 8BITMIME and the message might contain non-ascii bytes\n      // then append the 8BITMIME keyword to the MAIL FROM command\n      if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {\n        args.push('BODY=8BITMIME');\n        this._using8BitMime = true;\n      }\n      if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {\n        args.push('SIZE=' + this._envelope.size);\n      }\n\n      // If the server supports DSN and the envelope includes an DSN prop\n      // then append DSN params to the MAIL FROM command\n      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n        if (this._envelope.dsn.ret) {\n          args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));\n        }\n        if (this._envelope.dsn.envid) {\n          args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));\n        }\n      }\n      this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n    }\n  }, {\n    key: \"_setDsnEnvelope\",\n    value: function _setDsnEnvelope(params) {\n      var ret = (params.ret || params[\"return\"] || '').toString().toUpperCase() || null;\n      if (ret) {\n        switch (ret) {\n          case 'HDRS':\n          case 'HEADERS':\n            ret = 'HDRS';\n            break;\n          case 'FULL':\n          case 'BODY':\n            ret = 'FULL';\n            break;\n        }\n      }\n      if (ret && !['FULL', 'HDRS'].includes(ret)) {\n        throw new Error('ret: ' + JSON.stringify(ret));\n      }\n      var envid = (params.envid || params.id || '').toString() || null;\n      var notify = params.notify || null;\n      if (notify) {\n        if (typeof notify === 'string') {\n          notify = notify.split(',');\n        }\n        notify = notify.map(function (n) {\n          return n.trim().toUpperCase();\n        });\n        var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n        var invaliNotify = notify.filter(function (n) {\n          return !validNotify.includes(n);\n        });\n        if (invaliNotify.length || notify.length > 1 && notify.includes('NEVER')) {\n          throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n        }\n        notify = notify.join(',');\n      }\n      var orcpt = (params.recipient || params.orcpt || '').toString() || null;\n      if (orcpt && orcpt.indexOf(';') < 0) {\n        orcpt = 'rfc822;' + orcpt;\n      }\n      return {\n        ret: ret,\n        envid: envid,\n        notify: notify,\n        orcpt: orcpt\n      };\n    }\n  }, {\n    key: \"_getDsnRcptToArgs\",\n    value: function _getDsnRcptToArgs() {\n      var args = [];\n      // If the server supports DSN and the envelope includes an DSN prop\n      // then append DSN params to the RCPT TO command\n      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n        if (this._envelope.dsn.notify) {\n          args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));\n        }\n        if (this._envelope.dsn.orcpt) {\n          args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));\n        }\n      }\n      return args.length ? ' ' + args.join(' ') : '';\n    }\n  }, {\n    key: \"_createSendStream\",\n    value: function _createSendStream(callback) {\n      var _this11 = this;\n      var dataStream = new DataStream();\n      var logStream;\n      if (this.options.lmtp) {\n        this._envelope.accepted.forEach(function (recipient, i) {\n          var _final = i === _this11._envelope.accepted.length - 1;\n          _this11._responseActions.push(function (str) {\n            _this11._actionLMTPStream(recipient, _final, str, callback);\n          });\n        });\n      } else {\n        this._responseActions.push(function (str) {\n          _this11._actionSMTPStream(str, callback);\n        });\n      }\n      dataStream.pipe(this._socket, {\n        end: false\n      });\n      if (this.options.debug) {\n        logStream = new PassThrough();\n        logStream.on('readable', function () {\n          var chunk;\n          while (chunk = logStream.read()) {\n            _this11.logger.debug({\n              tnx: 'message'\n            }, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n          }\n        });\n        dataStream.pipe(logStream);\n      }\n      dataStream.once('end', function () {\n        _this11.logger.info({\n          tnx: 'message',\n          inByteCount: dataStream.inByteCount,\n          outByteCount: dataStream.outByteCount\n        }, '<%s bytes encoded mime message (source size %s bytes)>', dataStream.outByteCount, dataStream.inByteCount);\n      });\n      return dataStream;\n    }\n\n    /** ACTIONS **/\n\n    /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionGreeting\",\n    value: function _actionGreeting(str) {\n      clearTimeout(this._greetingTimeout);\n      if (str.substr(0, 3) !== '220') {\n        this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');\n        return;\n      }\n      if (this.options.lmtp) {\n        this._responseActions.push(this._actionLHLO);\n        this._sendCommand('LHLO ' + this.name);\n      } else {\n        this._responseActions.push(this._actionEHLO);\n        this._sendCommand('EHLO ' + this.name);\n      }\n    }\n\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionLHLO\",\n    value: function _actionLHLO(str) {\n      if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');\n        return;\n      }\n      this._actionEHLO(str);\n    }\n\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionEHLO\",\n    value: function _actionEHLO(str) {\n      var match;\n      if (str.substr(0, 3) === '421') {\n        this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');\n        return;\n      }\n      if (str.charAt(0) !== '2') {\n        if (this.options.requireTLS) {\n          this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');\n          return;\n        }\n\n        // Try HELO instead\n        this._responseActions.push(this._actionHELO);\n        this._sendCommand('HELO ' + this.name);\n        return;\n      }\n      this._ehloLines = str.split(/\\r?\\n/).map(function (line) {\n        return line.replace(/^\\d+[ -]/, '').trim();\n      }).filter(function (line) {\n        return line;\n      }).slice(1);\n\n      // Detect if the server supports STARTTLS\n      if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n        this._sendCommand('STARTTLS');\n        this._responseActions.push(this._actionSTARTTLS);\n        return;\n      }\n\n      // Detect if the server supports SMTPUTF8\n      if (/[ -]SMTPUTF8\\b/im.test(str)) {\n        this._supportedExtensions.push('SMTPUTF8');\n      }\n\n      // Detect if the server supports DSN\n      if (/[ -]DSN\\b/im.test(str)) {\n        this._supportedExtensions.push('DSN');\n      }\n\n      // Detect if the server supports 8BITMIME\n      if (/[ -]8BITMIME\\b/im.test(str)) {\n        this._supportedExtensions.push('8BITMIME');\n      }\n\n      // Detect if the server supports PIPELINING\n      if (/[ -]PIPELINING\\b/im.test(str)) {\n        this._supportedExtensions.push('PIPELINING');\n      }\n\n      // Detect if the server supports AUTH\n      if (/[ -]AUTH\\b/i.test(str)) {\n        this.allowsAuth = true;\n      }\n\n      // Detect if the server supports PLAIN auth\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n        this._supportedAuth.push('PLAIN');\n      }\n\n      // Detect if the server supports LOGIN auth\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n        this._supportedAuth.push('LOGIN');\n      }\n\n      // Detect if the server supports CRAM-MD5 auth\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n        this._supportedAuth.push('CRAM-MD5');\n      }\n\n      // Detect if the server supports XOAUTH2 auth\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n        this._supportedAuth.push('XOAUTH2');\n      }\n\n      // Detect if the server supports SIZE extensions (and the max allowed size)\n      if (match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im)) {\n        this._supportedExtensions.push('SIZE');\n        this._maxAllowedSize = Number(match[1]) || 0;\n      }\n      this.emit('connect');\n    }\n\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionHELO\",\n    value: function _actionHELO(str) {\n      if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');\n        return;\n      }\n\n      // assume that authentication is enabled (most probably is not though)\n      this.allowsAuth = true;\n      this.emit('connect');\n    }\n\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionSTARTTLS\",\n    value: function _actionSTARTTLS(str) {\n      var _this12 = this;\n      if (str.charAt(0) !== '2') {\n        if (this.options.opportunisticTLS) {\n          this.logger.info({\n            tnx: 'smtp'\n          }, 'Failed STARTTLS upgrade, continuing unencrypted');\n          return this.emit('connect');\n        }\n        this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n        return;\n      }\n      this._upgradeConnection(function (err, secured) {\n        if (err) {\n          _this12._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n          return;\n        }\n        _this12.logger.info({\n          tnx: 'smtp'\n        }, 'Connection upgraded with STARTTLS');\n        if (secured) {\n          // restart session\n          if (_this12.options.lmtp) {\n            _this12._responseActions.push(_this12._actionLHLO);\n            _this12._sendCommand('LHLO ' + _this12.name);\n          } else {\n            _this12._responseActions.push(_this12._actionEHLO);\n            _this12._sendCommand('EHLO ' + _this12.name);\n          }\n        } else {\n          _this12.emit('connect');\n        }\n      });\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionAUTH_LOGIN_USER\",\n    value: function _actionAUTH_LOGIN_USER(str, callback) {\n      var _this13 = this;\n      if (!/^334[ -]/.test(str)) {\n        // expecting '334 VXNlcm5hbWU6'\n        callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        return;\n      }\n      this._responseActions.push(function (str) {\n        _this13._actionAUTH_LOGIN_PASS(str, callback);\n      });\n      this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));\n    }\n\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionAUTH_CRAM_MD5\",\n    value: function _actionAUTH_CRAM_MD5(str, callback) {\n      var _this14 = this;\n      var challengeMatch = str.match(/^334\\s+(.+)$/);\n      var challengeString = '';\n      if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n      } else {\n        challengeString = challengeMatch[1];\n      }\n\n      // Decode from base64\n      var base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),\n        hmacMD5 = crypto.createHmac('md5', this._auth.credentials.pass);\n      hmacMD5.update(base64decoded);\n      var prepended = this._auth.credentials.user + ' ' + hmacMD5.digest('hex');\n      this._responseActions.push(function (str) {\n        _this14._actionAUTH_CRAM_MD5_PASS(str, callback);\n      });\n      this._sendCommand(Buffer.from(prepended).toString('base64'),\n      // hidden hash for logs\n      Buffer.from(this._auth.credentials.user + ' /* secret */').toString('base64'));\n    }\n\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionAUTH_CRAM_MD5_PASS\",\n    value: function _actionAUTH_CRAM_MD5_PASS(str, callback) {\n      if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n      }\n      this.logger.info({\n        tnx: 'smtp',\n        username: this._auth.user,\n        action: 'authenticated',\n        method: this._authMethod\n      }, 'User %s authenticated', JSON.stringify(this._auth.user));\n      this.authenticated = true;\n      callback(null, true);\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionAUTH_LOGIN_PASS\",\n    value: function _actionAUTH_LOGIN_PASS(str, callback) {\n      var _this15 = this;\n      if (!/^334[ -]/.test(str)) {\n        // expecting '334 UGFzc3dvcmQ6'\n        return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n      }\n      this._responseActions.push(function (str) {\n        _this15._actionAUTHComplete(str, callback);\n      });\n      this._sendCommand(Buffer.from((this._auth.credentials.pass || '').toString(), 'utf-8').toString('base64'),\n      // Hidden pass for logs\n      Buffer.from('/* secret */', 'utf-8').toString('base64'));\n    }\n\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionAUTHComplete\",\n    value: function _actionAUTHComplete(str, isRetry, callback) {\n      var _this16 = this;\n      if (!callback && typeof isRetry === 'function') {\n        callback = isRetry;\n        isRetry = false;\n      }\n      if (str.substr(0, 3) === '334') {\n        this._responseActions.push(function (str) {\n          if (isRetry || _this16._authMethod !== 'XOAUTH2') {\n            _this16._actionAUTHComplete(str, true, callback);\n          } else {\n            // fetch a new OAuth2 access token\n            setImmediate(function () {\n              return _this16._handleXOauth2Token(true, callback);\n            });\n          }\n        });\n        this._sendCommand('');\n        return;\n      }\n      if (str.charAt(0) !== '2') {\n        this.logger.info({\n          tnx: 'smtp',\n          username: this._auth.user,\n          action: 'authfail',\n          method: this._authMethod\n        }, 'User %s failed to authenticate', JSON.stringify(this._auth.user));\n        return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n      }\n      this.logger.info({\n        tnx: 'smtp',\n        username: this._auth.user,\n        action: 'authenticated',\n        method: this._authMethod\n      }, 'User %s authenticated', JSON.stringify(this._auth.user));\n      this.authenticated = true;\n      callback(null, true);\n    }\n\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionMAIL\",\n    value: function _actionMAIL(str, callback) {\n      var _this17 = this;\n      var message, curRecipient;\n      if (Number(str.charAt(0)) !== 2) {\n        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n          message = 'Internationalized mailbox name not allowed';\n        } else {\n          message = 'Mail command failed';\n        }\n        return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n      }\n      if (!this._envelope.rcptQueue.length) {\n        return callback(this._formatError('Can\\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n      } else {\n        this._recipientQueue = [];\n        if (this._supportedExtensions.includes('PIPELINING')) {\n          while (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push(function (str) {\n              _this17._actionRCPT(str, callback);\n            });\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n          }\n        } else {\n          curRecipient = this._envelope.rcptQueue.shift();\n          this._recipientQueue.push(curRecipient);\n          this._responseActions.push(function (str) {\n            _this17._actionRCPT(str, callback);\n          });\n          this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n      }\n    }\n\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionRCPT\",\n    value: function _actionRCPT(str, callback) {\n      var _this18 = this;\n      var message,\n        err,\n        curRecipient = this._recipientQueue.shift();\n      if (Number(str.charAt(0)) !== 2) {\n        // this is a soft error\n        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n          message = 'Internationalized mailbox name not allowed';\n        } else {\n          message = 'Recipient command failed';\n        }\n        this._envelope.rejected.push(curRecipient);\n        // store error for the failed recipient\n        err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n        err.recipient = curRecipient;\n        this._envelope.rejectedErrors.push(err);\n      } else {\n        this._envelope.accepted.push(curRecipient);\n      }\n      if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n        if (this._envelope.rejected.length < this._envelope.to.length) {\n          this._responseActions.push(function (str) {\n            _this18._actionDATA(str, callback);\n          });\n          this._sendCommand('DATA');\n        } else {\n          err = this._formatError('Can\\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n          err.rejected = this._envelope.rejected;\n          err.rejectedErrors = this._envelope.rejectedErrors;\n          return callback(err);\n        }\n      } else if (this._envelope.rcptQueue.length) {\n        curRecipient = this._envelope.rcptQueue.shift();\n        this._recipientQueue.push(curRecipient);\n        this._responseActions.push(function (str) {\n          _this18._actionRCPT(str, callback);\n        });\n        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n      }\n    }\n\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionDATA\",\n    value: function _actionDATA(str, callback) {\n      // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n      // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n      if (!/^[23]/.test(str)) {\n        return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n      }\n      var response = {\n        accepted: this._envelope.accepted,\n        rejected: this._envelope.rejected\n      };\n      if (this._ehloLines && this._ehloLines.length) {\n        response.ehlo = this._ehloLines;\n      }\n      if (this._envelope.rejectedErrors.length) {\n        response.rejectedErrors = this._envelope.rejectedErrors;\n      }\n      callback(null, response);\n    }\n\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionSMTPStream\",\n    value: function _actionSMTPStream(str, callback) {\n      if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n      } else {\n        // Message sent succesfully\n        return callback(null, str);\n      }\n    }\n\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */\n  }, {\n    key: \"_actionLMTPStream\",\n    value: function _actionLMTPStream(recipient, _final2, str, callback) {\n      var err;\n      if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n        err.recipient = recipient;\n        this._envelope.rejected.push(recipient);\n        this._envelope.rejectedErrors.push(err);\n        for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {\n          if (this._envelope.accepted[i] === recipient) {\n            this._envelope.accepted.splice(i, 1);\n          }\n        }\n      }\n      if (_final2) {\n        return callback(null, str);\n      }\n    }\n  }, {\n    key: \"_handleXOauth2Token\",\n    value: function _handleXOauth2Token(isRetry, callback) {\n      var _this19 = this;\n      this._auth.oauth2.getToken(isRetry, function (err, accessToken) {\n        if (err) {\n          _this19.logger.info({\n            tnx: 'smtp',\n            username: _this19._auth.user,\n            action: 'authfail',\n            method: _this19._authMethod\n          }, 'User %s failed to authenticate', JSON.stringify(_this19._auth.user));\n          return callback(_this19._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n        }\n        _this19._responseActions.push(function (str) {\n          _this19._actionAUTHComplete(str, isRetry, callback);\n        });\n        _this19._sendCommand('AUTH XOAUTH2 ' + _this19._auth.oauth2.buildXOAuth2Token(accessToken),\n        //  Hidden for logs\n        'AUTH XOAUTH2 ' + _this19._auth.oauth2.buildXOAuth2Token('/* secret */'));\n      });\n    }\n\n    /**\n     *\n     * @param {string} command\n     * @private\n     */\n  }, {\n    key: \"_isDestroyedMessage\",\n    value: function _isDestroyedMessage(command) {\n      if (this._destroyed) {\n        return 'Cannot ' + command + ' - smtp connection is already destroyed.';\n      }\n      if (this._socket) {\n        if (this._socket.destroyed) {\n          return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';\n        }\n        if (!this._socket.writable) {\n          return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';\n        }\n      }\n    }\n  }, {\n    key: \"_getHostname\",\n    value: function _getHostname() {\n      // defaul hostname is machine hostname or [IP]\n      var defaultHostname;\n      try {\n        defaultHostname = os.hostname() || '';\n      } catch (err) {\n        // fails on windows 7\n        defaultHostname = 'localhost';\n      }\n\n      // ignore if not FQDN\n      if (!defaultHostname || defaultHostname.indexOf('.') < 0) {\n        defaultHostname = '[127.0.0.1]';\n      }\n\n      // IP should be enclosed in []\n      if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n        defaultHostname = '[' + defaultHostname + ']';\n      }\n      return defaultHostname;\n    }\n  }]);\n}(EventEmitter);\nmodule.exports = SMTPConnection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar PoolResource = __webpack_require__(/*! ./pool-resource */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\");\nvar SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nvar wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\nvar SMTPPool = /*#__PURE__*/function (_EventEmitter) {\n  function SMTPPool(options) {\n    var _this2;\n    _classCallCheck(this, SMTPPool);\n    _this2 = _callSuper(this, SMTPPool);\n    options = options || {};\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n    var urlData;\n    var service = options.service;\n    if (typeof options.getSocket === 'function') {\n      _this2.getSocket = options.getSocket;\n    }\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n    _this2.options = shared.assign(false,\n    // create new object\n    options,\n    // regular options\n    urlData,\n    // url options\n    service && wellKnown(service) // wellknown options\n    );\n\n    _this2.options.maxConnections = _this2.options.maxConnections || 5;\n    _this2.options.maxMessages = _this2.options.maxMessages || 100;\n    _this2.logger = shared.getLogger(_this2.options, {\n      component: _this2.options.component || 'smtp-pool'\n    });\n\n    // temporary object\n    var connection = new SMTPConnection(_this2.options);\n    _this2.name = 'SMTP (pool)';\n    _this2.version = packageData.version + '[client:' + connection.version + ']';\n    _this2._rateLimit = {\n      counter: 0,\n      timeout: null,\n      waiting: [],\n      checkpoint: false,\n      delta: Number(_this2.options.rateDelta) || 1000,\n      limit: Number(_this2.options.rateLimit) || 0\n    };\n    _this2._closed = false;\n    _this2._queue = [];\n    _this2._connections = [];\n    _this2._connectionCounter = 0;\n    _this2.idling = true;\n    setImmediate(function () {\n      if (_this2.idling) {\n        _this2.emit('idle');\n      }\n    });\n    return _this2;\n  }\n\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n  _inherits(SMTPPool, _EventEmitter);\n  return _createClass(SMTPPool, [{\n    key: \"getSocket\",\n    value: function getSocket(options, callback) {\n      // return immediatelly\n      return setImmediate(function () {\n        return callback(null, false);\n      });\n    }\n\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this3 = this;\n      if (this._closed) {\n        return false;\n      }\n      this._queue.push({\n        mail: mail,\n        requeueAttempts: 0,\n        callback: callback\n      });\n      if (this.idling && this._queue.length >= this.options.maxConnections) {\n        this.idling = false;\n      }\n      setImmediate(function () {\n        return _this3._processMessages();\n      });\n      return true;\n    }\n\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this4 = this;\n      var connection;\n      var len = this._connections.length;\n      this._closed = true;\n\n      // clear rate limit timer if it exists\n      clearTimeout(this._rateLimit.timeout);\n      if (!len && !this._queue.length) {\n        return;\n      }\n\n      // remove all available connections\n      for (var i = len - 1; i >= 0; i--) {\n        if (this._connections[i] && this._connections[i].available) {\n          connection = this._connections[i];\n          connection.close();\n          this.logger.info({\n            tnx: 'connection',\n            cid: connection.id,\n            action: 'removed'\n          }, 'Connection #%s removed', connection.id);\n        }\n      }\n      if (len && !this._connections.length) {\n        this.logger.debug({\n          tnx: 'connection'\n        }, 'All connections removed');\n      }\n      if (!this._queue.length) {\n        return;\n      }\n\n      // make sure that entire queue would be cleaned\n      var invokeCallbacks = function invokeCallbacks() {\n        if (!_this4._queue.length) {\n          _this4.logger.debug({\n            tnx: 'connection'\n          }, 'Pending queue entries cleared');\n          return;\n        }\n        var entry = _this4._queue.shift();\n        if (entry && typeof entry.callback === 'function') {\n          try {\n            entry.callback(new Error('Connection pool was closed'));\n          } catch (E) {\n            _this4.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n        }\n        setImmediate(invokeCallbacks);\n      };\n      setImmediate(invokeCallbacks);\n    }\n\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */\n  }, {\n    key: \"_processMessages\",\n    value: function _processMessages() {\n      var _this5 = this;\n      var connection;\n      var i, len;\n\n      // do nothing if already closed\n      if (this._closed) {\n        return;\n      }\n\n      // do nothing if queue is empty\n      if (!this._queue.length) {\n        if (!this.idling) {\n          // no pending jobs\n          this.idling = true;\n          this.emit('idle');\n        }\n        return;\n      }\n\n      // find first available connection\n      for (i = 0, len = this._connections.length; i < len; i++) {\n        if (this._connections[i].available) {\n          connection = this._connections[i];\n          break;\n        }\n      }\n      if (!connection && this._connections.length < this.options.maxConnections) {\n        connection = this._createConnection();\n      }\n      if (!connection) {\n        // no more free connection slots available\n        this.idling = false;\n        return;\n      }\n\n      // check if there is free space in the processing queue\n      if (!this.idling && this._queue.length < this.options.maxConnections) {\n        this.idling = true;\n        this.emit('idle');\n      }\n      var entry = connection.queueEntry = this._queue.shift();\n      entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n      connection.available = false;\n      this.logger.debug({\n        tnx: 'pool',\n        cid: connection.id,\n        messageId: entry.messageId,\n        action: 'assign'\n      }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);\n      if (this._rateLimit.limit) {\n        this._rateLimit.counter++;\n        if (!this._rateLimit.checkpoint) {\n          this._rateLimit.checkpoint = Date.now();\n        }\n      }\n      connection.send(entry.mail, function (err, info) {\n        // only process callback if current handler is not changed\n        if (entry === connection.queueEntry) {\n          try {\n            entry.callback(err, info);\n          } catch (E) {\n            _this5.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n          connection.queueEntry = false;\n        }\n      });\n    }\n\n    /**\n     * Creates a new pool resource\n     */\n  }, {\n    key: \"_createConnection\",\n    value: function _createConnection() {\n      var _this6 = this;\n      var connection = new PoolResource(this);\n      connection.id = ++this._connectionCounter;\n      this.logger.info({\n        tnx: 'pool',\n        cid: connection.id,\n        action: 'conection'\n      }, 'Created new pool resource #%s', connection.id);\n\n      // resource comes available\n      connection.on('available', function () {\n        _this6.logger.debug({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'available'\n        }, 'Connection #%s became available', connection.id);\n        if (_this6._closed) {\n          // if already closed run close() that will remove this connections from connections list\n          _this6.close();\n        } else {\n          // check if there's anything else to send\n          _this6._processMessages();\n        }\n      });\n\n      // resource is terminated with an error\n      connection.once('error', function (err) {\n        if (err.code !== 'EMAXLIMIT') {\n          _this6.logger.error({\n            err: err,\n            tnx: 'pool',\n            cid: connection.id\n          }, 'Pool Error for #%s: %s', connection.id, err.message);\n        } else {\n          _this6.logger.debug({\n            tnx: 'pool',\n            cid: connection.id,\n            action: 'maxlimit'\n          }, 'Max messages limit exchausted for #%s', connection.id);\n        }\n        if (connection.queueEntry) {\n          try {\n            connection.queueEntry.callback(err);\n          } catch (E) {\n            _this6.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n          connection.queueEntry = false;\n        }\n\n        // remove the erroneus connection from connections list\n        _this6._removeConnection(connection);\n        _this6._continueProcessing();\n      });\n      connection.once('close', function () {\n        _this6.logger.info({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'closed'\n        }, 'Connection #%s was closed', connection.id);\n        _this6._removeConnection(connection);\n        if (connection.queueEntry) {\n          // If the connection closed when sending, add the message to the queue again\n          // if max number of requeues is not reached yet\n          // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n          // in the next event loop\n          setTimeout(function () {\n            if (connection.queueEntry) {\n              if (_this6._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n                _this6._requeueEntryOnConnectionClose(connection);\n              } else {\n                _this6._failDeliveryOnConnectionClose(connection);\n              }\n            }\n            _this6._continueProcessing();\n          }, 50);\n        } else {\n          _this6._continueProcessing();\n        }\n      });\n      this._connections.push(connection);\n      return connection;\n    }\n  }, {\n    key: \"_shouldRequeuOnConnectionClose\",\n    value: function _shouldRequeuOnConnectionClose(queueEntry) {\n      if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n        return true;\n      }\n      return queueEntry.requeueAttempts < this.options.maxRequeues;\n    }\n  }, {\n    key: \"_failDeliveryOnConnectionClose\",\n    value: function _failDeliveryOnConnectionClose(connection) {\n      if (connection.queueEntry && connection.queueEntry.callback) {\n        try {\n          connection.queueEntry.callback(new Error('Reached maximum number of retries after connection was closed'));\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            messageId: connection.queueEntry.messageId,\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n        connection.queueEntry = false;\n      }\n    }\n  }, {\n    key: \"_requeueEntryOnConnectionClose\",\n    value: function _requeueEntryOnConnectionClose(connection) {\n      connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n      this.logger.debug({\n        tnx: 'pool',\n        cid: connection.id,\n        messageId: connection.queueEntry.messageId,\n        action: 'requeue'\n      }, 'Re-queued message <%s> for #%s. Attempt: #%s', connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);\n      this._queue.unshift(connection.queueEntry);\n      connection.queueEntry = false;\n    }\n\n    /**\n     * Continue to process message if the pool hasn't closed\n     */\n  }, {\n    key: \"_continueProcessing\",\n    value: function _continueProcessing() {\n      var _this7 = this;\n      if (this._closed) {\n        this.close();\n      } else {\n        setTimeout(function () {\n          return _this7._processMessages();\n        }, 100);\n      }\n    }\n\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */\n  }, {\n    key: \"_removeConnection\",\n    value: function _removeConnection(connection) {\n      var index = this._connections.indexOf(connection);\n      if (index !== -1) {\n        this._connections.splice(index, 1);\n      }\n    }\n\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */\n  }, {\n    key: \"_checkRateLimit\",\n    value: function _checkRateLimit(callback) {\n      var _this8 = this;\n      if (!this._rateLimit.limit) {\n        return callback();\n      }\n      var now = Date.now();\n      if (this._rateLimit.counter < this._rateLimit.limit) {\n        return callback();\n      }\n      this._rateLimit.waiting.push(callback);\n      if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n        return this._clearRateLimit();\n      } else if (!this._rateLimit.timeout) {\n        this._rateLimit.timeout = setTimeout(function () {\n          return _this8._clearRateLimit();\n        }, this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n        this._rateLimit.checkpoint = now;\n      }\n    }\n\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */\n  }, {\n    key: \"_clearRateLimit\",\n    value: function _clearRateLimit() {\n      clearTimeout(this._rateLimit.timeout);\n      this._rateLimit.timeout = null;\n      this._rateLimit.counter = 0;\n      this._rateLimit.checkpoint = false;\n\n      // resume all paused connections\n      while (this._rateLimit.waiting.length) {\n        var cb = this._rateLimit.waiting.shift();\n        setImmediate(cb);\n      }\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var _this9 = this;\n      var promise;\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      var auth = new PoolResource(this).auth;\n      this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n        var options = _this9.options;\n        if (socketOptions && socketOptions.connection) {\n          _this9.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n          options = shared.assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n        var connection = new SMTPConnection(options);\n        var returned = false;\n        connection.once('error', function (err) {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          connection.close();\n          return callback(err);\n        });\n        connection.once('end', function () {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          return callback(new Error('Connection closed'));\n        });\n        var finalize = function finalize() {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          connection.quit();\n          return callback(null, true);\n        };\n        connection.connect(function () {\n          if (returned) {\n            return;\n          }\n          if (auth && (connection.allowsAuth || options.forceAuth)) {\n            connection.login(auth, function (err) {\n              if (returned) {\n                return;\n              }\n              if (err) {\n                returned = true;\n                connection.close();\n                return callback(err);\n              }\n              finalize();\n            });\n          } else if (!auth && connection.allowsAuth && options.forceAuth) {\n            var _err = new Error('Authentication info was not provided');\n            _err.code = 'NoAuth';\n            returned = true;\n            connection.close();\n            return callback(_err);\n          } else {\n            finalize();\n          }\n        });\n      });\n      return promise;\n    }\n  }]);\n}(EventEmitter); // expose to the world\nmodule.exports = SMTPPool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js":
/*!****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/pool-resource.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nvar assign = (__webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\").assign);\nvar XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nvar PoolResource = /*#__PURE__*/function (_EventEmitter) {\n  function PoolResource(pool) {\n    var _this2;\n    _classCallCheck(this, PoolResource);\n    _this2 = _callSuper(this, PoolResource);\n    _this2.pool = pool;\n    _this2.options = pool.options;\n    _this2.logger = _this2.pool.logger;\n    if (_this2.options.auth) {\n      switch ((_this2.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            var oauth2 = new XOAuth2(_this2.options.auth, _this2.logger);\n            oauth2.provisionCallback = _this2.pool.mailer && _this2.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            _this2.auth = {\n              type: 'OAUTH2',\n              user: _this2.options.auth.user,\n              oauth2: oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', function (token) {\n              return _this2.pool.mailer.emit('token', token);\n            });\n            oauth2.on('error', function (err) {\n              return _this2.emit('error', err);\n            });\n            break;\n          }\n        default:\n          if (!_this2.options.auth.user && !_this2.options.auth.pass) {\n            break;\n          }\n          _this2.auth = {\n            type: (_this2.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: _this2.options.auth.user,\n            credentials: {\n              user: _this2.options.auth.user || '',\n              pass: _this2.options.auth.pass,\n              options: _this2.options.auth.options\n            },\n            method: (_this2.options.auth.method || '').trim().toUpperCase() || _this2.options.authMethod || false\n          };\n      }\n    }\n    _this2._connection = false;\n    _this2._connected = false;\n    _this2.messages = 0;\n    _this2.available = true;\n    return _this2;\n  }\n\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n  _inherits(PoolResource, _EventEmitter);\n  return _createClass(PoolResource, [{\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this3 = this;\n      this.pool.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n        var returned = false;\n        var options = _this3.options;\n        if (socketOptions && socketOptions.connection) {\n          _this3.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n          options = assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n        _this3.connection = new SMTPConnection(options);\n        _this3.connection.once('error', function (err) {\n          _this3.emit('error', err);\n          if (returned) {\n            return;\n          }\n          returned = true;\n          return callback(err);\n        });\n        _this3.connection.once('end', function () {\n          _this3.close();\n          if (returned) {\n            return;\n          }\n          returned = true;\n          var timer = setTimeout(function () {\n            if (returned) {\n              return;\n            }\n            // still have not returned, this means we have an unexpected connection close\n            var err = new Error('Unexpected socket close');\n            if (_this3.connection && _this3.connection._socket && _this3.connection._socket.upgrading) {\n              // starttls connection errors\n              err.code = 'ETLS';\n            }\n            callback(err);\n          }, 1000);\n          try {\n            timer.unref();\n          } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n          }\n        });\n        _this3.connection.connect(function () {\n          if (returned) {\n            return;\n          }\n          if (_this3.auth && (_this3.connection.allowsAuth || options.forceAuth)) {\n            _this3.connection.login(_this3.auth, function (err) {\n              if (returned) {\n                return;\n              }\n              returned = true;\n              if (err) {\n                _this3.connection.close();\n                _this3.emit('error', err);\n                return callback(err);\n              }\n              _this3._connected = true;\n              callback(null, true);\n            });\n          } else {\n            returned = true;\n            _this3._connected = true;\n            return callback(null, true);\n          }\n        });\n      });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this4 = this;\n      if (!this._connected) {\n        return this.connect(function (err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this4.send(mail, callback);\n        });\n      }\n      var envelope = mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId,\n        cid: this.id\n      }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n      if (mail.data.dsn) {\n        envelope.dsn = mail.data.dsn;\n      }\n      this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n        _this4.messages++;\n        if (err) {\n          _this4.connection.close();\n          _this4.emit('error', err);\n          return callback(err);\n        }\n        info.envelope = {\n          from: envelope.from,\n          to: envelope.to\n        };\n        info.messageId = messageId;\n        setImmediate(function () {\n          var err;\n          if (_this4.messages >= _this4.options.maxMessages) {\n            err = new Error('Resource exhausted');\n            err.code = 'EMAXLIMIT';\n            _this4.connection.close();\n            _this4.emit('error', err);\n          } else {\n            _this4.pool._checkRateLimit(function () {\n              _this4.available = true;\n              _this4.emit('available');\n            });\n          }\n        });\n        callback(null, info);\n      });\n    }\n\n    /**\n     * Closes the connection\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._connected = false;\n      if (this.auth && this.auth.oauth2) {\n        this.auth.oauth2.removeAllListeners();\n      }\n      if (this.connection) {\n        this.connection.close();\n      }\n      this.emit('close');\n    }\n  }]);\n}(EventEmitter);\nmodule.exports = PoolResource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nvar wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nvar XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nvar SMTPTransport = /*#__PURE__*/function (_EventEmitter) {\n  function SMTPTransport(options) {\n    var _this2;\n    _classCallCheck(this, SMTPTransport);\n    _this2 = _callSuper(this, SMTPTransport);\n    options = options || {};\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n    var urlData;\n    var service = options.service;\n    if (typeof options.getSocket === 'function') {\n      _this2.getSocket = options.getSocket;\n    }\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n    _this2.options = shared.assign(false,\n    // create new object\n    options,\n    // regular options\n    urlData,\n    // url options\n    service && wellKnown(service) // wellknown options\n    );\n\n    _this2.logger = shared.getLogger(_this2.options, {\n      component: _this2.options.component || 'smtp-transport'\n    });\n\n    // temporary object\n    var connection = new SMTPConnection(_this2.options);\n    _this2.name = 'SMTP';\n    _this2.version = packageData.version + '[client:' + connection.version + ']';\n    if (_this2.options.auth) {\n      _this2.auth = _this2.getAuth({});\n    }\n    return _this2;\n  }\n\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n  _inherits(SMTPTransport, _EventEmitter);\n  return _createClass(SMTPTransport, [{\n    key: \"getSocket\",\n    value: function getSocket(options, callback) {\n      // return immediatelly\n      return setImmediate(function () {\n        return callback(null, false);\n      });\n    }\n  }, {\n    key: \"getAuth\",\n    value: function getAuth(authOpts) {\n      var _this3 = this;\n      if (!authOpts) {\n        return this.auth;\n      }\n      var hasAuth = false;\n      var authData = {};\n      if (this.options.auth && _typeof(this.options.auth) === 'object') {\n        Object.keys(this.options.auth).forEach(function (key) {\n          hasAuth = true;\n          authData[key] = _this3.options.auth[key];\n        });\n      }\n      if (authOpts && _typeof(authOpts) === 'object') {\n        Object.keys(authOpts).forEach(function (key) {\n          hasAuth = true;\n          authData[key] = authOpts[key];\n        });\n      }\n      if (!hasAuth) {\n        return false;\n      }\n      switch ((authData.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            if (!authData.service && !authData.user) {\n              return false;\n            }\n            var oauth2 = new XOAuth2(authData, this.logger);\n            oauth2.provisionCallback = this.mailer && this.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            oauth2.on('token', function (token) {\n              return _this3.mailer.emit('token', token);\n            });\n            oauth2.on('error', function (err) {\n              return _this3.emit('error', err);\n            });\n            return {\n              type: 'OAUTH2',\n              user: authData.user,\n              oauth2: oauth2,\n              method: 'XOAUTH2'\n            };\n          }\n        default:\n          return {\n            type: (authData.type || '').toString().toUpperCase() || 'LOGIN',\n            user: authData.user,\n            credentials: {\n              user: authData.user || '',\n              pass: authData.pass,\n              options: authData.options\n            },\n            method: (authData.method || '').trim().toUpperCase() || this.options.authMethod || false\n          };\n      }\n    }\n\n    /**\n     * Sends an e-mail using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this4 = this;\n      this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n        var returned = false;\n        var options = _this4.options;\n        if (socketOptions && socketOptions.connection) {\n          _this4.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n\n          // only copy options if we need to modify it\n          options = shared.assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n        var connection = new SMTPConnection(options);\n        connection.once('error', function (err) {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          connection.close();\n          return callback(err);\n        });\n        connection.once('end', function () {\n          if (returned) {\n            return;\n          }\n          var timer = setTimeout(function () {\n            if (returned) {\n              return;\n            }\n            returned = true;\n            // still have not returned, this means we have an unexpected connection close\n            var err = new Error('Unexpected socket close');\n            if (connection && connection._socket && connection._socket.upgrading) {\n              // starttls connection errors\n              err.code = 'ETLS';\n            }\n            callback(err);\n          }, 1000);\n          try {\n            timer.unref();\n          } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n          }\n        });\n        var sendMessage = function sendMessage() {\n          var envelope = mail.message.getEnvelope();\n          var messageId = mail.message.messageId();\n          var recipients = [].concat(envelope.to || []);\n          if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n          }\n          if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n          }\n          _this4.logger.info({\n            tnx: 'send',\n            messageId: messageId\n          }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n          connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n            returned = true;\n            connection.close();\n            if (err) {\n              _this4.logger.error({\n                err: err,\n                tnx: 'send'\n              }, 'Send error for %s: %s', messageId, err.message);\n              return callback(err);\n            }\n            info.envelope = {\n              from: envelope.from,\n              to: envelope.to\n            };\n            info.messageId = messageId;\n            try {\n              return callback(null, info);\n            } catch (E) {\n              _this4.logger.error({\n                err: E,\n                tnx: 'callback'\n              }, 'Callback error for %s: %s', messageId, E.message);\n            }\n          });\n        };\n        connection.connect(function () {\n          if (returned) {\n            return;\n          }\n          var auth = _this4.getAuth(mail.data.auth);\n          if (auth && (connection.allowsAuth || options.forceAuth)) {\n            connection.login(auth, function (err) {\n              if (auth && auth !== _this4.auth && auth.oauth2) {\n                auth.oauth2.removeAllListeners();\n              }\n              if (returned) {\n                return;\n              }\n              if (err) {\n                returned = true;\n                connection.close();\n                return callback(err);\n              }\n              sendMessage();\n            });\n          } else {\n            sendMessage();\n          }\n        });\n      });\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var _this5 = this;\n      var promise;\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n        var options = _this5.options;\n        if (socketOptions && socketOptions.connection) {\n          _this5.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n          options = shared.assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n        var connection = new SMTPConnection(options);\n        var returned = false;\n        connection.once('error', function (err) {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          connection.close();\n          return callback(err);\n        });\n        connection.once('end', function () {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          return callback(new Error('Connection closed'));\n        });\n        var finalize = function finalize() {\n          if (returned) {\n            return;\n          }\n          returned = true;\n          connection.quit();\n          return callback(null, true);\n        };\n        connection.connect(function () {\n          if (returned) {\n            return;\n          }\n          var authData = _this5.getAuth({});\n          if (authData && (connection.allowsAuth || options.forceAuth)) {\n            connection.login(authData, function (err) {\n              if (returned) {\n                return;\n              }\n              if (err) {\n                returned = true;\n                connection.close();\n                return callback(err);\n              }\n              finalize();\n            });\n          } else if (!authData && connection.allowsAuth && options.forceAuth) {\n            var _err = new Error('Authentication info was not provided');\n            _err.code = 'NoAuth';\n            returned = true;\n            connection.close();\n            return callback(_err);\n          } else {\n            finalize();\n          }\n        });\n      });\n      return promise;\n    }\n\n    /**\n     * Releases resources\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.auth && this.auth.oauth2) {\n        this.auth.oauth2.removeAllListeners();\n      }\n      this.emit('close');\n    }\n  }]);\n}(EventEmitter); // expose to the world\nmodule.exports = SMTPTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/stream-transport/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nvar StreamTransport = /*#__PURE__*/function () {\n  function StreamTransport(options) {\n    _classCallCheck(this, StreamTransport);\n    options = options || {};\n    this.options = options || {};\n    this.name = 'StreamTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'stream-transport'\n    });\n    this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n  }\n\n  /**\n   * Compiles a mailcomposer message and forwards it to handler that sends it\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  return _createClass(StreamTransport, [{\n    key: \"send\",\n    value: function send(mail, done) {\n      var _this = this;\n      // We probably need this in the output\n      mail.message.keepBcc = true;\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');\n      setImmediate(function () {\n        var stream;\n        try {\n          stream = mail.message.createReadStream();\n        } catch (E) {\n          _this.logger.error({\n            err: E,\n            tnx: 'send',\n            messageId: messageId\n          }, 'Creating send stream failed for %s. %s', messageId, E.message);\n          return done(E);\n        }\n        if (!_this.options.buffer) {\n          stream.once('error', function (err) {\n            _this.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed creating message for %s. %s', messageId, err.message);\n          });\n          return done(null, {\n            envelope: mail.data.envelope || mail.message.getEnvelope(),\n            messageId: messageId,\n            message: stream\n          });\n        }\n        var chunks = [];\n        var chunklen = 0;\n        stream.on('readable', function () {\n          var chunk;\n          while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n          }\n        });\n        stream.once('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'send',\n            messageId: messageId\n          }, 'Failed creating message for %s. %s', messageId, err.message);\n          return done(err);\n        });\n        stream.on('end', function () {\n          return done(null, {\n            envelope: mail.data.envelope || mail.message.getEnvelope(),\n            messageId: messageId,\n            message: Buffer.concat(chunks, chunklen)\n          });\n        });\n      });\n    }\n  }]);\n}();\nmodule.exports = StreamTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar services = __webpack_require__(/*! ./services.json */ \"(rsc)/./node_modules/nodemailer/lib/well-known/services.json\");\nvar normalized = {};\nObject.keys(services).forEach(function (key) {\n  var service = services[key];\n  normalized[normalizeKey(key)] = normalizeService(service);\n  [].concat(service.aliases || []).forEach(function (alias) {\n    normalized[normalizeKey(alias)] = normalizeService(service);\n  });\n  [].concat(service.domains || []).forEach(function (domain) {\n    normalized[normalizeKey(domain)] = normalizeService(service);\n  });\n});\nfunction normalizeKey(key) {\n  return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();\n}\nfunction normalizeService(service) {\n  var filter = ['domains', 'aliases'];\n  var response = {};\n  Object.keys(service).forEach(function (key) {\n    if (filter.indexOf(key) < 0) {\n      response[key] = service[key];\n    }\n  });\n  return response;\n}\n\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */\nmodule.exports = function (key) {\n  key = normalizeKey(key.split('@').pop());\n  return normalized[key] || false;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvd2VsbC1rbm93bi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMscUZBQWlCLENBQUM7QUFDM0MsSUFBTUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUVyQkMsTUFBTSxDQUFDQyxJQUFJLENBQUNKLFFBQVEsQ0FBQyxDQUFDSyxPQUFPLENBQUMsVUFBQUMsR0FBRyxFQUFJO0VBQ2pDLElBQUlDLE9BQU8sR0FBR1AsUUFBUSxDQUFDTSxHQUFHLENBQUM7RUFFM0JKLFVBQVUsQ0FBQ00sWUFBWSxDQUFDRixHQUFHLENBQUMsQ0FBQyxHQUFHRyxnQkFBZ0IsQ0FBQ0YsT0FBTyxDQUFDO0VBRXpELEVBQUUsQ0FBQ0csTUFBTSxDQUFDSCxPQUFPLENBQUNJLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQ04sT0FBTyxDQUFDLFVBQUFPLEtBQUssRUFBSTtJQUM5Q1YsVUFBVSxDQUFDTSxZQUFZLENBQUNJLEtBQUssQ0FBQyxDQUFDLEdBQUdILGdCQUFnQixDQUFDRixPQUFPLENBQUM7RUFDL0QsQ0FBQyxDQUFDO0VBRUYsRUFBRSxDQUFDRyxNQUFNLENBQUNILE9BQU8sQ0FBQ00sT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDUixPQUFPLENBQUMsVUFBQVMsTUFBTSxFQUFJO0lBQy9DWixVQUFVLENBQUNNLFlBQVksQ0FBQ00sTUFBTSxDQUFDLENBQUMsR0FBR0wsZ0JBQWdCLENBQUNGLE9BQU8sQ0FBQztFQUNoRSxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixTQUFTQyxZQUFZQSxDQUFDRixHQUFHLEVBQUU7RUFDdkIsT0FBT0EsR0FBRyxDQUFDUyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0FBQzNEO0FBRUEsU0FBU1AsZ0JBQWdCQSxDQUFDRixPQUFPLEVBQUU7RUFDL0IsSUFBSVUsTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztFQUNuQyxJQUFJQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0VBRWpCZixNQUFNLENBQUNDLElBQUksQ0FBQ0csT0FBTyxDQUFDLENBQUNGLE9BQU8sQ0FBQyxVQUFBQyxHQUFHLEVBQUk7SUFDaEMsSUFBSVcsTUFBTSxDQUFDRSxPQUFPLENBQUNiLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtNQUN6QlksUUFBUSxDQUFDWixHQUFHLENBQUMsR0FBR0MsT0FBTyxDQUFDRCxHQUFHLENBQUM7SUFDaEM7RUFDSixDQUFDLENBQUM7RUFFRixPQUFPWSxRQUFRO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVVmLEdBQUcsRUFBRTtFQUM1QkEsR0FBRyxHQUFHRSxZQUFZLENBQUNGLEdBQUcsQ0FBQ2dCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUN4QyxPQUFPckIsVUFBVSxDQUFDSSxHQUFHLENBQUMsSUFBSSxLQUFLO0FBQ25DLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWR2aWQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi93ZWxsLWtub3duL2luZGV4LmpzP2M3MTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzZXJ2aWNlcyA9IHJlcXVpcmUoJy4vc2VydmljZXMuanNvbicpO1xuY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuXG5PYmplY3Qua2V5cyhzZXJ2aWNlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGxldCBzZXJ2aWNlID0gc2VydmljZXNba2V5XTtcblxuICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplS2V5KGtleSldID0gbm9ybWFsaXplU2VydmljZShzZXJ2aWNlKTtcblxuICAgIFtdLmNvbmNhdChzZXJ2aWNlLmFsaWFzZXMgfHwgW10pLmZvckVhY2goYWxpYXMgPT4ge1xuICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZUtleShhbGlhcyldID0gbm9ybWFsaXplU2VydmljZShzZXJ2aWNlKTtcbiAgICB9KTtcblxuICAgIFtdLmNvbmNhdChzZXJ2aWNlLmRvbWFpbnMgfHwgW10pLmZvckVhY2goZG9tYWluID0+IHtcbiAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVLZXkoZG9tYWluKV0gPSBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpO1xuICAgIH0pO1xufSk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleShrZXkpIHtcbiAgICByZXR1cm4ga2V5LnJlcGxhY2UoL1teYS16QS1aMC05Li1dL2csICcnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpIHtcbiAgICBsZXQgZmlsdGVyID0gWydkb21haW5zJywgJ2FsaWFzZXMnXTtcbiAgICBsZXQgcmVzcG9uc2UgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHNlcnZpY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGZpbHRlci5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICByZXNwb25zZVtrZXldID0gc2VydmljZVtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgU01UUCBjb25maWcgZm9yIGdpdmVuIGtleS4gS2V5IGNhbiBiZSBhIG5hbWUgKGxpa2UgJ0dtYWlsJyksIGFsaWFzIChsaWtlICdHb29nbGUgTWFpbCcpIG9yXG4gKiBhbiBlbWFpbCBhZGRyZXNzIChsaWtlICd0ZXN0QGdvb2dsZW1haWwuY29tJykuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBTTVRQIGNvbmZpZyBvciBmYWxzZSBpZiBub3QgZm91bmRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleS5zcGxpdCgnQCcpLnBvcCgpKTtcbiAgICByZXR1cm4gbm9ybWFsaXplZFtrZXldIHx8IGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6WyJzZXJ2aWNlcyIsInJlcXVpcmUiLCJub3JtYWxpemVkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXJ2aWNlIiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplU2VydmljZSIsImNvbmNhdCIsImFsaWFzZXMiLCJhbGlhcyIsImRvbWFpbnMiLCJkb21haW4iLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJmaWx0ZXIiLCJyZXNwb25zZSIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIiwic3BsaXQiLCJwb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/well-known/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/xoauth2/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */\nvar XOAuth2 = /*#__PURE__*/function (_Stream) {\n  function XOAuth2(options, logger) {\n    var _this2;\n    _classCallCheck(this, XOAuth2);\n    _this2 = _callSuper(this, XOAuth2);\n    _this2.options = options || {};\n    if (options && options.serviceClient) {\n      if (!options.privateKey || !options.user) {\n        setImmediate(function () {\n          return _this2.emit('error', new Error('Options \"privateKey\" and \"user\" are required for service account!'));\n        });\n        return _possibleConstructorReturn(_this2);\n      }\n      var serviceRequestTimeout = Math.min(Math.max(Number(_this2.options.serviceRequestTimeout) || 0, 0), 3600);\n      _this2.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n    }\n    _this2.logger = shared.getLogger({\n      logger: logger\n    }, {\n      component: _this2.options.component || 'OAuth2'\n    });\n    _this2.provisionCallback = typeof _this2.options.provisionCallback === 'function' ? _this2.options.provisionCallback : false;\n    _this2.options.accessUrl = _this2.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n    _this2.options.customHeaders = _this2.options.customHeaders || {};\n    _this2.options.customParams = _this2.options.customParams || {};\n    _this2.accessToken = _this2.options.accessToken || false;\n    if (_this2.options.expires && Number(_this2.options.expires)) {\n      _this2.expires = _this2.options.expires;\n    } else {\n      var timeout = Math.max(Number(_this2.options.timeout) || 0, 0);\n      _this2.expires = timeout && Date.now() + timeout * 1000 || 0;\n    }\n    return _this2;\n  }\n\n  /**\n   * Returns or generates (if previous has expired) a XOAuth2 token\n   *\n   * @param {Boolean} renew If false then use cached access token (if available)\n   * @param {Function} callback Callback function with error object and token string\n   */\n  _inherits(XOAuth2, _Stream);\n  return _createClass(XOAuth2, [{\n    key: \"getToken\",\n    value: function getToken(renew, callback) {\n      var _this3 = this;\n      if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n        return callback(null, this.accessToken);\n      }\n      var generateCallback = function generateCallback() {\n        if (arguments.length <= 0 ? undefined : arguments[0]) {\n          _this3.logger.error({\n            err: arguments.length <= 0 ? undefined : arguments[0],\n            tnx: 'OAUTH2',\n            user: _this3.options.user,\n            action: 'renew'\n          }, 'Failed generating new Access Token for %s', _this3.options.user);\n        } else {\n          _this3.logger.info({\n            tnx: 'OAUTH2',\n            user: _this3.options.user,\n            action: 'renew'\n          }, 'Generated new Access Token for %s', _this3.options.user);\n        }\n        callback.apply(void 0, arguments);\n      };\n      if (this.provisionCallback) {\n        this.provisionCallback(this.options.user, !!renew, function (err, accessToken, expires) {\n          if (!err && accessToken) {\n            _this3.accessToken = accessToken;\n            _this3.expires = expires || 0;\n          }\n          generateCallback(err, accessToken);\n        });\n      } else {\n        this.generateToken(generateCallback);\n      }\n    }\n\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */\n  }, {\n    key: \"updateToken\",\n    value: function updateToken(accessToken, timeout) {\n      this.accessToken = accessToken;\n      timeout = Math.max(Number(timeout) || 0, 0);\n      this.expires = timeout && Date.now() + timeout * 1000 || 0;\n      this.emit('token', {\n        user: this.options.user,\n        accessToken: accessToken || '',\n        expires: this.expires\n      });\n    }\n\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */\n  }, {\n    key: \"generateToken\",\n    value: function generateToken(callback) {\n      var _this4 = this;\n      var urlOptions;\n      var loggedUrlOptions;\n      if (this.options.serviceClient) {\n        // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n        var iat = Math.floor(Date.now() / 1000); // unix time\n        var tokenData = {\n          iss: this.options.serviceClient,\n          scope: this.options.scope || 'https://mail.google.com/',\n          sub: this.options.user,\n          aud: this.options.accessUrl,\n          iat: iat,\n          exp: iat + this.options.serviceRequestTimeout\n        };\n        var token;\n        try {\n          token = this.jwtSignRS256(tokenData);\n        } catch (err) {\n          return callback(new Error('Can\\x27t generate token. Check your auth options'));\n        }\n        urlOptions = {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: token\n        };\n        loggedUrlOptions = {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: tokenData\n        };\n      } else {\n        if (!this.options.refreshToken) {\n          return callback(new Error('Can\\x27t create new access token for user'));\n        }\n\n        // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n        urlOptions = {\n          client_id: this.options.clientId || '',\n          client_secret: this.options.clientSecret || '',\n          refresh_token: this.options.refreshToken,\n          grant_type: 'refresh_token'\n        };\n        loggedUrlOptions = {\n          client_id: this.options.clientId || '',\n          client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',\n          refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',\n          grant_type: 'refresh_token'\n        };\n      }\n      Object.keys(this.options.customParams).forEach(function (key) {\n        urlOptions[key] = _this4.options.customParams[key];\n        loggedUrlOptions[key] = _this4.options.customParams[key];\n      });\n      this.logger.debug({\n        tnx: 'OAUTH2',\n        user: this.options.user,\n        action: 'generate'\n      }, 'Requesting token using: %s', JSON.stringify(loggedUrlOptions));\n      this.postRequest(this.options.accessUrl, urlOptions, this.options, function (error, body) {\n        var data;\n        if (error) {\n          return callback(error);\n        }\n        try {\n          data = JSON.parse(body.toString());\n        } catch (E) {\n          return callback(E);\n        }\n        if (!data || _typeof(data) !== 'object') {\n          _this4.logger.debug({\n            tnx: 'OAUTH2',\n            user: _this4.options.user,\n            action: 'post'\n          }, 'Response: %s', (body || '').toString());\n          return callback(new Error('Invalid authentication response'));\n        }\n        var logData = {};\n        Object.keys(data).forEach(function (key) {\n          if (key !== 'access_token') {\n            logData[key] = data[key];\n          } else {\n            logData[key] = (data[key] || '').toString().substr(0, 6) + '...';\n          }\n        });\n        _this4.logger.debug({\n          tnx: 'OAUTH2',\n          user: _this4.options.user,\n          action: 'post'\n        }, 'Response: %s', JSON.stringify(logData));\n        if (data.error) {\n          // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n          var errorMessage = data.error;\n          if (data.error_description) {\n            errorMessage += ': ' + data.error_description;\n          }\n          if (data.error_uri) {\n            errorMessage += ' (' + data.error_uri + ')';\n          }\n          return callback(new Error(errorMessage));\n        }\n        if (data.access_token) {\n          _this4.updateToken(data.access_token, data.expires_in);\n          return callback(null, _this4.accessToken);\n        }\n        return callback(new Error('No access token'));\n      });\n    }\n\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */\n  }, {\n    key: \"buildXOAuth2Token\",\n    value: function buildXOAuth2Token(accessToken) {\n      var authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];\n      return Buffer.from(authData.join('\\x01'), 'utf-8').toString('base64');\n    }\n\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */\n  }, {\n    key: \"postRequest\",\n    value: function postRequest(url, payload, params, callback) {\n      var returned = false;\n      var chunks = [];\n      var chunklen = 0;\n      var req = nmfetch(url, {\n        method: 'post',\n        headers: params.customHeaders,\n        body: payload,\n        allowErrorResponse: true\n      });\n      req.on('readable', function () {\n        var chunk;\n        while ((chunk = req.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      req.once('error', function (err) {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        return callback(err);\n      });\n      req.once('end', function () {\n        if (returned) {\n          return;\n        }\n        returned = true;\n        return callback(null, Buffer.concat(chunks, chunklen));\n      });\n    }\n\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */\n  }, {\n    key: \"toBase64URL\",\n    value: function toBase64URL(data) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data);\n      }\n      return data.toString('base64').replace(/[=]+/g, '') // remove '='s\n      .replace(/\\+/g, '-') // '+' → '-'\n      .replace(/\\//g, '_'); // '/' → '_'\n    }\n\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */\n  }, {\n    key: \"jwtSignRS256\",\n    value: function jwtSignRS256(payload) {\n      var _this5 = this;\n      payload = ['{\"alg\":\"RS256\",\"typ\":\"JWT\"}', JSON.stringify(payload)].map(function (val) {\n        return _this5.toBase64URL(val);\n      }).join('.');\n      var signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);\n      return payload + '.' + this.toBase64URL(signature);\n    }\n  }]);\n}(Stream);\nmodule.exports = XOAuth2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/services.json":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/services.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"126":{"host":"smtp.126.com","port":465,"secure":true},"163":{"host":"smtp.163.com","port":465,"secure":true},"1und1":{"host":"smtp.1und1.de","port":465,"secure":true,"authMethod":"LOGIN"},"Aliyun":{"domains":["aliyun.com"],"host":"smtp.aliyun.com","port":465,"secure":true},"AOL":{"domains":["aol.com"],"host":"smtp.aol.com","port":587},"Bluewin":{"host":"smtpauths.bluewin.ch","domains":["bluewin.ch"],"port":465},"DebugMail":{"host":"debugmail.io","port":25},"DynectEmail":{"aliases":["Dynect"],"host":"smtp.dynect.net","port":25},"Ethereal":{"aliases":["ethereal.email"],"host":"smtp.ethereal.email","port":587},"FastMail":{"domains":["fastmail.fm"],"host":"smtp.fastmail.com","port":465,"secure":true},"Forward Email":{"aliases":["FE","ForwardEmail"],"domains":["forwardemail.net"],"host":"smtp.forwardemail.net","port":465,"secure":true},"Feishu Mail":{"aliases":["Feishu","FeishuMail"],"domains":["www.feishu.cn"],"host":"smtp.feishu.cn","port":465,"secure":true},"GandiMail":{"aliases":["Gandi","Gandi Mail"],"host":"mail.gandi.net","port":587},"Gmail":{"aliases":["Google Mail"],"domains":["gmail.com","googlemail.com"],"host":"smtp.gmail.com","port":465,"secure":true},"Godaddy":{"host":"smtpout.secureserver.net","port":25},"GodaddyAsia":{"host":"smtp.asia.secureserver.net","port":25},"GodaddyEurope":{"host":"smtp.europe.secureserver.net","port":25},"hot.ee":{"host":"mail.hot.ee"},"Hotmail":{"aliases":["Outlook","Outlook.com","Hotmail.com"],"domains":["hotmail.com","outlook.com"],"host":"smtp-mail.outlook.com","port":587},"iCloud":{"aliases":["Me","Mac"],"domains":["me.com","mac.com"],"host":"smtp.mail.me.com","port":587},"Infomaniak":{"host":"mail.infomaniak.com","domains":["ik.me","ikmail.com","etik.com"],"port":587},"Loopia":{"host":"mailcluster.loopia.se","port":465},"mail.ee":{"host":"smtp.mail.ee"},"Mail.ru":{"host":"smtp.mail.ru","port":465,"secure":true},"Mailcatch.app":{"host":"sandbox-smtp.mailcatch.app","port":2525},"Maildev":{"port":1025,"ignoreTLS":true},"Mailgun":{"host":"smtp.mailgun.org","port":465,"secure":true},"Mailjet":{"host":"in.mailjet.com","port":587},"Mailosaur":{"host":"mailosaur.io","port":25},"Mailtrap":{"host":"live.smtp.mailtrap.io","port":587},"Mandrill":{"host":"smtp.mandrillapp.com","port":587},"Naver":{"host":"smtp.naver.com","port":587},"One":{"host":"send.one.com","port":465,"secure":true},"OpenMailBox":{"aliases":["OMB","openmailbox.org"],"host":"smtp.openmailbox.org","port":465,"secure":true},"Outlook365":{"host":"smtp.office365.com","port":587,"secure":false},"OhMySMTP":{"host":"smtp.ohmysmtp.com","port":587,"secure":false},"Postmark":{"aliases":["PostmarkApp"],"host":"smtp.postmarkapp.com","port":2525},"qiye.aliyun":{"host":"smtp.mxhichina.com","port":"465","secure":true},"QQ":{"domains":["qq.com"],"host":"smtp.qq.com","port":465,"secure":true},"QQex":{"aliases":["QQ Enterprise"],"domains":["exmail.qq.com"],"host":"smtp.exmail.qq.com","port":465,"secure":true},"SendCloud":{"host":"smtp.sendcloud.net","port":2525},"SendGrid":{"host":"smtp.sendgrid.net","port":587},"SendinBlue":{"aliases":["Brevo"],"host":"smtp-relay.brevo.com","port":587},"SendPulse":{"host":"smtp-pulse.com","port":465,"secure":true},"SES":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-EAST-1":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-WEST-2":{"host":"email-smtp.us-west-2.amazonaws.com","port":465,"secure":true},"SES-EU-WEST-1":{"host":"email-smtp.eu-west-1.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTH-1":{"host":"email-smtp.ap-south-1.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-1":{"host":"email-smtp.ap-northeast-1.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-2":{"host":"email-smtp.ap-northeast-2.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-3":{"host":"email-smtp.ap-northeast-3.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTHEAST-1":{"host":"email-smtp.ap-southeast-1.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTHEAST-2":{"host":"email-smtp.ap-southeast-2.amazonaws.com","port":465,"secure":true},"Sparkpost":{"aliases":["SparkPost","SparkPost Mail"],"domains":["sparkpost.com"],"host":"smtp.sparkpostmail.com","port":587,"secure":false},"Tipimail":{"host":"smtp.tipimail.com","port":587},"Yahoo":{"domains":["yahoo.com"],"host":"smtp.mail.yahoo.com","port":465,"secure":true},"Yandex":{"domains":["yandex.ru"],"host":"smtp.yandex.ru","port":465,"secure":true},"Zoho":{"host":"smtp.zoho.com","port":465,"secure":true,"authMethod":"LOGIN"}}');

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/package.json":
/*!**********************************************!*\
  !*** ./node_modules/nodemailer/package.json ***!
  \**********************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"nodemailer","version":"6.9.14","description":"Easy as cake e-mail sending from your Node.js applications","main":"lib/nodemailer.js","scripts":{"test":"node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js","test:coverage":"c8 node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js","lint":"eslint .","update":"rm -rf node_modules/ package-lock.json && ncu -u && npm install"},"repository":{"type":"git","url":"https://github.com/nodemailer/nodemailer.git"},"keywords":["Nodemailer"],"author":"Andris Reinman","license":"MIT-0","bugs":{"url":"https://github.com/nodemailer/nodemailer/issues"},"homepage":"https://nodemailer.com/","devDependencies":{"@aws-sdk/client-ses":"3.600.0","bunyan":"1.8.15","c8":"10.1.2","eslint":"8.57.0","eslint-config-nodemailer":"1.2.0","eslint-config-prettier":"9.1.0","libbase64":"1.3.0","libmime":"5.3.5","libqp":"2.1.0","nodemailer-ntlm-auth":"1.0.4","proxy":"1.0.2","proxy-test-server":"1.0.0","smtp-server":"3.13.4"},"engines":{"node":">=6.0.0"}}');

/***/ })

};
;