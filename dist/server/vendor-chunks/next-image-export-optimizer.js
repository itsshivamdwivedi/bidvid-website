"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-image-export-optimizer";
exports.ids = ["vendor-chunks/next-image-export-optimizer"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-image-export-optimizer/dist/ExportedImage.js":
/*!************************************************************************!*\
  !*** ./node_modules/next-image-export-optimizer/dist/ExportedImage.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ var _excluded = [\n    \"src\",\n    \"priority\",\n    \"loading\",\n    \"className\",\n    \"width\",\n    \"height\",\n    \"onLoad\",\n    \"unoptimized\",\n    \"placeholder\",\n    \"basePath\",\n    \"alt\",\n    \"blurDataURL\",\n    \"style\",\n    \"onError\",\n    \"overrideSrc\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\n\n\nvar splitFilePath = function splitFilePath(_ref) {\n    var _filePath$split$pop;\n    var filePath = _ref.filePath;\n    var filenameWithExtension = ((_filePath$split$pop = filePath.split(\"\\\\\").pop()) === null || _filePath$split$pop === void 0 ? void 0 : _filePath$split$pop.split(\"/\").pop()) || \"\";\n    var filePathWithoutFilename = filePath.split(filenameWithExtension).shift();\n    var fileExtension = filePath.split(\".\").pop();\n    var filenameWithoutExtension = filenameWithExtension.substring(0, filenameWithExtension.lastIndexOf(\".\")) || filenameWithExtension;\n    return {\n        path: filePathWithoutFilename,\n        filename: filenameWithoutExtension,\n        extension: fileExtension || \"\"\n    };\n};\nvar generateImageURL = function generateImageURL(src, width, basePath) {\n    var _correctedPath;\n    var isRemoteImage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var _splitFilePath = splitFilePath({\n        filePath: src\n    }), filename = _splitFilePath.filename, path = _splitFilePath.path, extension = _splitFilePath.extension;\n    var useWebp =  true ? \"true\" == \"true\" : 0;\n    if (![\n        \"JPG\",\n        \"JPEG\",\n        \"WEBP\",\n        \"PNG\",\n        \"AVIF\",\n        \"GIF\"\n    ].includes(extension.toUpperCase())) {\n        // The images has an unsupported extension\n        // We will return the src\n        return src;\n    }\n    // If the images are stored as WEBP by the package, then we should change\n    // the extension to WEBP to load them correctly\n    var processedExtension = extension;\n    if (useWebp && [\n        \"JPG\",\n        \"JPEG\",\n        \"PNG\",\n        \"GIF\"\n    ].includes(extension.toUpperCase())) {\n        processedExtension = \"WEBP\";\n    }\n    var correctedPath = path;\n    var lastChar = (_correctedPath = correctedPath) === null || _correctedPath === void 0 ? void 0 : _correctedPath.substr(-1); // Selects the last character\n    if (lastChar != \"/\") {\n        // If the last character is not a slash\n        correctedPath = correctedPath + \"/\"; // Append a slash to it.\n    }\n    var isStaticImage = src.includes(\"_next/static/media\");\n    if (basePath) {\n        if (basePath.endsWith(\"/\") && correctedPath && correctedPath.startsWith(\"/\")) {\n            correctedPath = basePath + correctedPath.slice(1);\n        } else if (!basePath.endsWith(\"/\") && correctedPath && !correctedPath.startsWith(\"/\")) {\n            correctedPath = basePath + \"/\" + correctedPath;\n        } else {\n            correctedPath = basePath + correctedPath;\n        }\n    }\n    var exportFolderName = \"nextImageExportOptimizer\" || 0;\n    var basePathPrefixForStaticImages = basePath ? basePath + \"/\" : \"\";\n    var generatedImageURL = \"\".concat(isStaticImage ? basePathPrefixForStaticImages : correctedPath).concat(exportFolderName, \"/\").concat(filename, \"-opt-\").concat(width, \".\").concat(processedExtension.toUpperCase());\n    // if the generatedImageURL is not starting with a slash, then we add one as long as it is not a remote image\n    if (!isRemoteImage && generatedImageURL.charAt(0) !== \"/\") {\n        generatedImageURL = \"/\" + generatedImageURL;\n    }\n    return generatedImageURL;\n};\n// Credits to https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js\n// This is a hash function that is used to generate a hash from the image URL\nvar hashAlgorithm = function hashAlgorithm(str) {\n    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n    for(var i = 0, ch; i < str.length; i++){\n        ch = str.charCodeAt(i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n    h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n    h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n    h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\nfunction urlToFilename(url) {\n    try {\n        var parsedUrl = new URL(url);\n        var extension = parsedUrl.pathname.split(\".\").pop();\n        if (extension) {\n            return hashAlgorithm(url).toString().concat(\".\", extension);\n        }\n    } catch (error) {\n        console.error(\"Error parsing URL\", url, error);\n    }\n    return hashAlgorithm(url).toString();\n}\nvar imageURLForRemoteImage = function imageURLForRemoteImage(_ref2) {\n    var src = _ref2.src, width = _ref2.width, basePath = _ref2.basePath;\n    var encodedSrc = urlToFilename(src);\n    return generateImageURL(encodedSrc, width, basePath, true);\n};\nvar optimizedLoader = function optimizedLoader(_ref3) {\n    var src = _ref3.src, width = _ref3.width, basePath = _ref3.basePath;\n    var isStaticImage = _typeof(src) === \"object\";\n    var _src = isStaticImage ? src.src : src;\n    var originalImageWidth = isStaticImage && src.width || undefined;\n    // if it is a static image, we can use the width of the original image to generate a reduced srcset that returns\n    // the same image url for widths that are larger than the original image\n    if (isStaticImage && originalImageWidth && width > originalImageWidth) {\n        var _process$env$__NEXT_I, _process$env$__NEXT_I2;\n        var deviceSizes = (((_process$env$__NEXT_I = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image/\",\"loader\":\"custom\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]}) === null || _process$env$__NEXT_I === void 0 ? void 0 : _process$env$__NEXT_I.deviceSizes) || [\n            640,\n            750,\n            828,\n            1080,\n            1200,\n            1920,\n            2048,\n            3840\n        ]).map(Number);\n        var imageSizes = (((_process$env$__NEXT_I2 = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image/\",\"loader\":\"custom\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]}) === null || _process$env$__NEXT_I2 === void 0 ? void 0 : _process$env$__NEXT_I2.imageSizes) || [\n            16,\n            32,\n            48,\n            64,\n            96,\n            128,\n            256,\n            384\n        ]).map(Number);\n        var allSizes = [].concat(_toConsumableArray(deviceSizes), _toConsumableArray(imageSizes));\n        allSizes = allSizes.filter(function(v, i, a) {\n            return a.indexOf(v) === i;\n        });\n        allSizes.sort(function(a, b) {\n            return a - b;\n        });\n        // only use the width if it is smaller or equal to the next size in the allSizes array\n        var nextLargestSize = null;\n        for(var i = 0; i < allSizes.length; i++){\n            if (Number(allSizes[i]) >= originalImageWidth && (nextLargestSize === null || Number(allSizes[i]) < nextLargestSize)) {\n                nextLargestSize = Number(allSizes[i]);\n            }\n        }\n        if (nextLargestSize !== null) {\n            return generateImageURL(_src, nextLargestSize, basePath);\n        }\n    }\n    // Check if the image is a remote image (starts with http or https)\n    if (_src.startsWith(\"http\")) {\n        return imageURLForRemoteImage({\n            src: _src,\n            width: width,\n            basePath: basePath\n        });\n    }\n    return generateImageURL(_src, width, basePath);\n};\nvar fallbackLoader = function fallbackLoader(_ref4) {\n    var src = _ref4.src;\n    var _src = _typeof(src) === \"object\" ? src.src : src;\n    var isRemoteImage = _src.startsWith(\"http\");\n    // if the _src does not start with a slash, then we add one as long as it is not a remote image\n    if (!isRemoteImage && _src.charAt(0) !== \"/\") {\n        _src = \"/\" + _src;\n    }\n    return _src;\n};\nvar ExportedImage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(_ref5, ref) {\n    var src = _ref5.src, _ref5$priority = _ref5.priority, priority = _ref5$priority === void 0 ? false : _ref5$priority, loading = _ref5.loading, className = _ref5.className, width = _ref5.width, height = _ref5.height, _onLoad = _ref5.onLoad, unoptimized = _ref5.unoptimized, _ref5$placeholder = _ref5.placeholder, placeholder = _ref5$placeholder === void 0 ? \"blur\" : _ref5$placeholder, _ref5$basePath = _ref5.basePath, basePath = _ref5$basePath === void 0 ? \"\" : _ref5$basePath, _ref5$alt = _ref5.alt, alt = _ref5$alt === void 0 ? \"\" : _ref5$alt, blurDataURL = _ref5.blurDataURL, style = _ref5.style, _onError = _ref5.onError, overrideSrc = _ref5.overrideSrc, rest = _objectWithoutProperties(_ref5, _excluded);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), imageError = _useState[0], setImageError = _useState[1];\n    var automaticallyCalculatedBlurDataURL = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function() {\n        if (blurDataURL) {\n            // use the user provided blurDataURL if present\n            return blurDataURL;\n        }\n        // check if the src is specified as a local file -> then it is an object\n        var isStaticImage = _typeof(src) === \"object\";\n        var _src = isStaticImage ? src.src : src;\n        if (unoptimized === true) {\n            // return the src image when unoptimized\n            return _src;\n        }\n        // Check if the image is a remote image (starts with http or https)\n        if (_src.startsWith(\"http\")) {\n            return imageURLForRemoteImage({\n                src: _src,\n                width: 10,\n                basePath: basePath\n            });\n        }\n        // otherwise use the generated image of 10px width as a blurDataURL\n        return generateImageURL(_src, 10, basePath);\n    }, [\n        blurDataURL,\n        src,\n        unoptimized,\n        basePath\n    ]);\n    // check if the src is a SVG image -> then we should not use the blurDataURL and use unoptimized\n    var isSVG = _typeof(src) === \"object\" ? src.src.endsWith(\".svg\") : src.endsWith(\".svg\");\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), blurComplete = _useState2[0], setBlurComplete = _useState2[1];\n    // Currently, we have to handle the blurDataURL ourselves as the new Image component\n    // is expecting a base64 encoded string, but the generated blurDataURL is a normal URL\n    var blurStyle = placeholder === \"blur\" && !isSVG && automaticallyCalculatedBlurDataURL && automaticallyCalculatedBlurDataURL.startsWith(\"/\") && !blurComplete ? {\n        backgroundSize: (style === null || style === void 0 ? void 0 : style.objectFit) || \"cover\",\n        backgroundPosition: (style === null || style === void 0 ? void 0 : style.objectPosition) || \"50% 50%\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundImage: 'url(\"'.concat(automaticallyCalculatedBlurDataURL, '\")')\n    } : undefined;\n    var isStaticImage = _typeof(src) === \"object\";\n    var _src = isStaticImage ? src.src : src;\n    if (basePath && !isStaticImage && _src.startsWith(\"/\")) {\n        _src = basePath + _src;\n    }\n    if (basePath && !isStaticImage && !_src.startsWith(\"/\")) {\n        _src = basePath + \"/\" + _src;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(next_image__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        ref: ref,\n        alt: alt\n    }, rest), width && {\n        width: width\n    }), height && {\n        height: height\n    }), loading && {\n        loading: loading\n    }), className && {\n        className: className\n    }), _onLoad && {\n        onLoad: _onLoad\n    }), overrideSrc && {\n        overrideSrc: overrideSrc\n    }), placeholder && {\n        placeholder: blurStyle || blurComplete ? \"empty\" : placeholder\n    }), unoptimized && {\n        unoptimized: unoptimized\n    }), priority && {\n        priority: priority\n    }), isSVG && {\n        unoptimized: true\n    }), {}, {\n        style: _objectSpread(_objectSpread({}, style), blurStyle),\n        loader: imageError || unoptimized === true ? function() {\n            return fallbackLoader({\n                src: overrideSrc || src\n            });\n        } : function(e) {\n            return optimizedLoader({\n                src: src,\n                width: e.width,\n                basePath: basePath\n            });\n        },\n        blurDataURL: automaticallyCalculatedBlurDataURL,\n        onError: function onError(error) {\n            setImageError(true);\n            setBlurComplete(true);\n            // execute the onError function if provided\n            _onError && _onError(error);\n        },\n        onLoad: function onLoad(e) {\n            // for some configurations, the onError handler is not called on an error occurrence\n            // so we need to check if the image is loaded correctly\n            var target = e.target;\n            if (target.naturalWidth === 0) {\n                // Broken image, fall back to unoptimized (meaning the original image src)\n                setImageError(true);\n            }\n            setBlurComplete(true);\n            // execute the onLoad callback if present\n            _onLoad && _onLoad(e);\n        },\n        src: isStaticImage ? src : _src\n    }));\n});\nExportedImage.displayName = \"ExportedImage\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExportedImage);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-image-export-optimizer/dist/ExportedImage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-image-export-optimizer/dist/ExportedImage.js":
/*!************************************************************************!*\
  !*** ./node_modules/next-image-export-optimizer/dist/ExportedImage.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $$typeof: () => (/* binding */ $$typeof),
/* harmony export */   __esModule: () => (/* binding */ __esModule),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/bidvid-website/node_modules/next-image-export-optimizer/dist/ExportedImage.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/bidvid-website/node_modules/next-image-export-optimizer/dist/ExportedImage.js#default`));


/***/ })

};
;